{
    "version": "https://jsonfeed.org/version/1",
    "title": "学无止境",
    "subtitle": "阿宇的可爱博客",
    "icon": "https://blog.aayu.today/images/favicon.ico",
    "description": "真理和热爱是吾永生的追求",
    "home_page_url": "https://blog.aayu.today",
    "items": [
        {
            "id": "https://blog.aayu.today/nas/zspace/20220822-2/",
            "url": "https://blog.aayu.today/nas/zspace/20220822-2/",
            "title": "手拉手教你在极空间Docker上安装Gitea并实现SSH提交代码",
            "date_published": "2022-08-22T09:47:48.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>踩坑不容易啊，终于把这个需求实现了，这样我就可以把我的<a href=\"\">博客小站</a>通过 Git 部署到极空间上了，也可以把自己一些好玩的代码仓库上传到极空间上，再也不用担心 GitHub 的龟速访问，以及 Gitee 莫名其妙的代码审查了～～</p>\n<p>注意，本文需要配合内网穿透，实现外网访问后才能解决一些报错问题，有一定难度哦～～</p>\n<h2 id=\"安装数据库\"><a class=\"anchor\" href=\"#安装数据库\">#</a> 安装数据库</h2>\n<p>Gitea 运行需要数据库，默认为本地 sqlite，不过不推荐这种方式。这里可以参考 kangkang 大佬在极空间论坛里发布的安装 mariadb（mysql）镜像的教程，膜拜大佬～</p>\n<h2 id=\"安装gitea\"><a class=\"anchor\" href=\"#安装gitea\">#</a> 安装 Gitea</h2>\n<p>在极空间 Z4 的 Docker 里选择  <code>gitea/gitea</code>  镜像的  <code>1.9.6-linux-amd64</code>  版本进行下载，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221954929.png\" alt=\"\" /></p>\n<p>下载完成后可以参考如下配置启动容器</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221955369.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221955658.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230016107.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221956557.png\" alt=\"\" /></p>\n<p>其中，数据目录必须挂载，防止数据丢失。USER_UID=1000 USER_GID=1000 也需要设置</p>\n<p>其他设置使用默认的就可以啦，设置好以后，就可以启动容器了</p>\n<h2 id=\"配置gitea\"><a class=\"anchor\" href=\"#配置gitea\">#</a> 配置 Gitea</h2>\n<p>容器启动成功后，在浏览器中访问  <code>http://NAS的内网IP:3000/</code>  就可以看到 Gitea 的展示界面了，如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221959202.png\" alt=\"\" /></p>\n<p>点击右上角的注册，就可以进行 Gitea 的初始化配置，配置如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222000549.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222301075.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222001352.png\" alt=\"\" /></p>\n<p>然后点击安装，耐心等待 10 分钟左右应该就能安装成功了～</p>\n<p>安装完成后就会自动跳转到用户的界面，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222003278.png\" alt=\"\" /></p>\n<p>我们可以点击 + 号新建一个仓库来测试下～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222008537.png\" alt=\"\" /></p>\n<p>注意，这里有点小 bug，就是创建的时候不能勾选  <code>初始化存储库</code> ，否则会报 500 的异常，这个问题如果有大佬知道怎么解决欢迎留言呀～～</p>\n<div class=\"note info\">\n<p>2022-08-23 更新：博主在查看了日志后发现，当勾选了  <code>初始化存储库</code>  再创建仓库，gitea 会尝试用 git 用户去操作  <code>/tmp</code>  目录，而 tmp 目录是属于  <code>root:root</code>  用户和组的，所以这里就没操作成功，报了没有权限的错误，所以仓库就创建失败，返回 500</p>\n<p>知道报错原因后解决办法就很简单啦，我们在极空间里用 root 账号进入 gitea 容器，然后用  <code>chown -R git:git tmp/</code>  命令将 tmp 目录设置为 git 用户和组的，再次创建勾选了  <code>初始化存储库</code>  的仓库，报错完美解决～</p>\n</div>\n<p>创建成功如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222010015.png\" alt=\"\" /></p>\n<p>但是我这边测试直接在本地拉取会报错，但看 kangkang 大佬的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExNTE=\">教程</span>本地拉取就没有报错，有大佬如果知道是怎么回事欢迎给我留言</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222028976.png\" alt=\"\" /></p>\n<p>接下来测试下迁移外部仓库。点击左上角选择</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222021979.png\" alt=\"\" /></p>\n<p>点击迁移，耐心等待下，便可成功将外部的仓库迁移到极空间里的 Gitea 了，很方便～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222023397.png\" alt=\"\" /></p>\n<p>这里我又测试了一下本地拉取迁移过来的仓库，也是报错了。但别泄气，当后面配置了 frp 内网穿透后，用外网域名访问，以上本地拉取的报错问题就没有啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222031910.png\" alt=\"\" /></p>\n<h2 id=\"配置内网穿透\"><a class=\"anchor\" href=\"#配置内网穿透\">#</a> 配置内网穿透</h2>\n<p>内网穿透的方式太多了，我这里也没办法详细展开介绍，也不是本文的重点</p>\n<p>我用的是  <code>frp + 腾讯云 + 宝塔 + 自己的域名</code>  方式做的内网穿透，这样做的好处是完全的自我掌控，感兴趣的小伙伴可以去找点教程学习一下，frp 如果你会一点 Linux 命令的话，其实很简单的～～</p>\n<p>配置好内网穿透和域名后，就可以在外网用自己的域名访问了，效果如下～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222049630.png\" alt=\"\" /></p>\n<p>成功外网访问后，可以看到仓库的克隆链接那里还是极空间内网的地址，这里就需要再对 Gitea 的配置文件进行修改了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222051607.png\" alt=\"\" /></p>\n<p>在极空间的文件管理中，找到我们挂在的数据目录，找到  <code>app.ini</code>  配置文件，这里可以把这个配置文件下载到电脑上，然后用 sublime 或 notepad++ 等编辑器修改，或如果已经把极空间挂载成了网络硬盘，也可以直接在网络硬盘里找到该文件进行修改，或如果熟悉 vi 等编辑器的话，也可以直接打开极空间 Docker 的 SSH，在容器内部修改该配置文件都可以，选择自己熟悉的方式就好啦</p>\n<p>配置文件要修改以下地方</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230024987.png\" alt=\"\" /></p>\n<p>修改完配置文件后，就要重启 Gitea，这里不需要重启容器，而是直接进到容器内部，然后用  <code>ps aux | grep gitea</code>  命令找到 Gitea 进程，如下图</p>\n<p>注意要用 git 用户进入容器</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222057259.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222100817.png\" alt=\"\" /></p>\n<p>然后用  <code>kill -9 进程ID</code>  命令杀死 Gitea 进程即可，杀死后容器会自动重启 Gitea 程序～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222103463.png\" alt=\"\" /></p>\n<p>注意，这里可以用  <code>ps aux | grep gitea</code>  命令多查询几次，看重启后的 Gitea 进程 ID 是否还会变化，如果一直在变化，就表示你的  <code>app.ini</code>  设置有误，程序在不断的重启当中。</p>\n<p>如果发生了程序在不断重启的情况，不要慌张，可以去  <code>/data/gitea/log</code>  目录下找到日志文件，看是什么原因报错然后改正就可以啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222105495.png\" alt=\"\" /></p>\n<p>修改完配置文件并重启 Gitea 后，可以在 Web 界面的右上角【管理后台】处查看 Gitea 的配置，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222108037.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230027900.png\" alt=\"\" /></p>\n<p>可以看到在配置文件里修改的都已经更新过来了～～</p>\n<p>然后打开我们的项目，可以看到克隆链接已经变成公网域名的地址了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222113401.png\" alt=\"\" /></p>\n<p>然后再次在本地克隆仓库，嘿嘿，发现仓库成功拉取下来了。拉取时报了个警告是说我们的仓库是空的，没有内容～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222115090.png\" alt=\"\" /></p>\n<p>那我们就推送个内容上去</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222119098.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222119931.png\" alt=\"\" /></p>\n<p>可以看到我们本地的推送测试也是没有问题啦～～</p>\n<h2 id=\"配置ssh提交\"><a class=\"anchor\" href=\"#配置ssh提交\">#</a> 配置 SSH 提交</h2>\n<p>SSH 需要把我们自己电脑的公钥追加到容器的  <code>/data/git/.ssh/authorized_keys</code>  文件中，SSH 的公钥不知如何生成的，可以看我的这篇教程：<a href=\"\"></a></p>\n<p>注意，有小伙伴可能会注意到个人配置中有配置 SSH 的地方，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222121300.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222124452.png\" alt=\"\" /></p>\n<p>但博主实测，这样的做法不行，首先直接添加会报 500 的错误。就算查阅资料后，在  <code>app.ini</code>  配置文件中添加  <code>START_SSH_SERVER = true</code>  语句，然后成功在上图位置配置好了个人的 SSH 公钥，后面用 SSH 克隆仓库时还是不行，这里博主踩坑踩得贼累 🥲</p>\n<p>所以正确使用 SSH 的做法是什么呢，往下看！</p>\n<p>我们需要把自己电脑的公钥追加到容器的  <code>/data/git/.ssh/authorized_keys</code>  文件中。具体操作步骤就是先借助极空间把自己电脑的公钥文件上传到容器的  <code>/data/git</code>  目录下，然后用  <code>cat id_rsa.pub &gt; .ssh/authorized_keys</code>  命令生成 authorized_keys 文件（默认 .ssh 目录下没有这个文件），然后再用  <code>chmod 600 authorized_keys</code>  更改文件的权限，就大公告成啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230038774.png\" alt=\"\" /></p>\n<p>当成功配置了自己的公钥后，有什么效果呢，看下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230041738.png\" alt=\"\" /></p>\n<p>发现我们可以在自己的电脑上用 git 用户登录上极空间的 gitea 容器啦，终于达到这一步了，后面我们就可以用 SSH 来拉取代码了</p>\n<h2 id=\"用ssh克隆代码\"><a class=\"anchor\" href=\"#用ssh克隆代码\">#</a> 用 SSH 克隆代码</h2>\n<p>我们现在来尝试将迁移过来的外部仓库用 SSH 的方式克隆到本地，执行 clone 命令一看，卧槽，为啥还报错</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230048808.png\" alt=\"\" /></p>\n<p>细细看下报错原因，诶这个原因已经不是登录的问题了！是没有找到我们的 git 仓库。那为什么没找到呢，我们可以看到程序找 git 仓库的路径是  <code>/ylsislove/test-project.git</code> ，这斜杠开头的路径，是跑去容器的根路径下去找了</p>\n<p>那我们仓库的地址是在容器的  <code>/data/git/repositories/ylsislove/test-project.git</code>  这个路径下，所以我们就尝试对命令稍加修改  <code>git clone ssh://git@code.aayu.today:2222/data/git/repositories/ylsislove/test-project.git</code> ，运行，成了！</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230053242.png\" alt=\"\" /></p>\n<h2 id=\"尾声\"><a class=\"anchor\" href=\"#尾声\">#</a> 尾声</h2>\n<p>以上就是博主的踩坑过程，踩坑不易，希望能帮助到更多爱折腾的小伙伴～</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGVhLmlvL3poLWNuL3JldmVyc2UtcHJveGllcy8=\">Gitea 官方文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExNTE=\">Gitea, 一款轻量好用的自托管 Git 服务</span></li>\n</ul>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "SSH",
                "极空间",
                "Gitea"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20220822/",
            "url": "https://blog.aayu.today/nas/zspace/20220822/",
            "title": "手拉手教你在极空间Docker宝塔上搭建兰空图床（Lsky）",
            "date_published": "2022-08-21T15:56:50.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>世界上什么事最让人安心呢，可能每个人心中都有自己的答案。但我觉得有一件事应该没有人会否认，那就是把数据掌握在自己的手上，最让人安心！</p>\n<p>我之前其实已经在黑群晖上实现了兰空图床的搭建，详情可以回顾<a href=\"https://blog.aayu.today/nas/synology/20220111/\">黑群晖 NAS 搭建兰空图床（Lsky）</a>，而在用了黑群晖一段时间后，发现有了 NAS 之后是真爽啊～～</p>\n<p>而自己搭建的黑群晖由于种种原因并不是很稳定，而自己又是个颜狗，极空间 Z4 好看的外观瞬间就吸引了我，包括对用户极为友好的手机 APP 以及是一个国产品牌，于是便入手了极空间 Z4，也开始了本次的折腾之旅哈哈～～</p>\n<h2 id=\"安装docker宝塔\"><a class=\"anchor\" href=\"#安装docker宝塔\">#</a> 安装 Docker 宝塔</h2>\n<p>参考我之前的<a href=\"https://blog.aayu.today/nas/synology/20220111/\">折腾笔记</a>，首先第一步便是要在 Docker 里面安装宝塔面板，但很可惜的是，之前在黑群晖上安装的宝塔镜像在极空间上还真是用不了，原因大家应该也都知道，由于安全原因，极空间的 Docker 并没有开放 Privilege 权限，所以之前的镜像就用不了了。好在天无绝人之路，偶然发现极空间还有个论坛，这可算是打开了新世界的大门呀，里面的大佬原来早已经踩了很多我们可能会碰到的坑了～～</p>\n<p>其中，kangkang 大佬已经给出了在极空间 Z4 上搭建宝塔面板的教程了，详情可以看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExMDQ=\">极空间 Nas - 宝塔面板</span>，所以安装宝塔的步骤按照大佬的教程一步步走下去就可以啦。但是有一处地方建议更改，就是在【基本设置】中的启动性能限制，建议取消，直接给宝塔最大的性能空间。大佬原教程中的 2 核 2G 我实测后感觉带兰空图床太吃力了，图床的 Web 界面加载跳转要等待 5 秒以上。下面展示下我配置好的容器配置，其中端口 8890-8899 是我为宝塔内的网站预留的应用端口，小伙伴可以根据自己需要自由设置啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220358021.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359767.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359208.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359802.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359320.png\" alt=\"\" /></p>\n<h2 id=\"安装兰空图床\"><a class=\"anchor\" href=\"#安装兰空图床\">#</a> 安装兰空图床</h2>\n<p>安装好宝塔以后，顺利的话输入  <code>http://NAS的内网IP:18888/f185ef31/</code>  应该就能看到宝塔的登录界面啦，那用户名和密码是多少呢，我们可以在 Docker 自带的 SSH 里面用  <code>bt</code>  命令重置用户名和密码，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220400511.png\" alt=\"\" /></p>\n<p>进去以后，绑定好自己的手机，然后就可以看到主面板了，接下来我们首先点击已经安装好的 PHP-8.0 软件，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220400527.png\" alt=\"\" /></p>\n<p>然后点击启动，把 PHP-8.0 启起来。接下来点击【安装扩展】，安装以下三个扩展，我已经安装好了，所以是卸载的字样。注意，安装大概要耗费半个小时到一个小时的时间，所以要耐心等待，在此期间喝杯茶吧～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220401460.png\" alt=\"\" /></p>\n<p>然后点击【禁用函数】，把  <code>exec、shell_exec、readlink、symlink、putenv、chown</code>  这六个被禁用的函数删掉，也就是取消禁用。</p>\n<p>接下来就是创建网站了，在左侧导航栏点击【网站】，然后点击添加站点，设置如下，其中域名那里根据自己需求配置，也可以随便写一个，不影响。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220401714.png\" alt=\"\" /></p>\n<p>点击提交以后，网站就创建好啦。可以点击网站名，配置一下内网访问的端口，如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220402767.png\" alt=\"\" /></p>\n<p>然后在浏览器中输入  <code>http://NAS的内网IP:18891/</code>  出现如下界面就表示内网访问没问题啦～注意我这里是 18891 端口是因为配置 Docker 时我设置了 18891 -&gt; 8891 的端口映射啦，所以访问时要用 18891 端口</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220402517.png\" alt=\"\" /></p>\n<p>然后点击网站的根目录可以跳转到【文件】目录下，然后去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xza3ktb3JnL2xza3ktcHJv\">兰空图床的 GitHub 仓库</span> 下载最新的发行版，但建议和我用的版本保持一致以防接下来的配置出问题，我用的是当前的最新版 v2.1 版本。下载完成后，把压缩包上传到网站目录下，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403662.png\" alt=\"\" /></p>\n<p>然后在安装包上右键解压，解压也需要耗费几分钟的时间，耐心等待一下吧～</p>\n<p>解压完成后就继续配置我们的网站吧～</p>\n<p>配置网站的运行目录为  <code>/public</code> ，并取消防跨站攻击（open_basedir），如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403077.png\" alt=\"\" /></p>\n<p>然后设置伪静态，粘贴如下代码到【伪静态】，如下图</p>\n<pre><code>location / &#123;\n  try_files $uri $uri/ /index.php?$query_string;\n&#125;\n</code></pre>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403847.png\" alt=\"\" /></p>\n<p>还差最后一步，重启 PHP-8.0，如下图，我们的准备工作就完成啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403575.png\" alt=\"\" /></p>\n<h2 id=\"运行兰空图床\"><a class=\"anchor\" href=\"#运行兰空图床\">#</a> 运行兰空图床</h2>\n<p>完成以上准备工作后，直接在浏览器中输入  <code>http://NAS的内网IP:18891/</code> ，如果看到以下界面，恭喜，我们已经成功了 99% 了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404570.png\" alt=\"\" /></p>\n<p>点击下一步，配置好我们的数据库名称，数据库用户名和密码，以及管理员的账号和密码。其中数据库的相关信息可以在宝塔中查看，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404841.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404911.png\" alt=\"\" /></p>\n<p>配置好后点击立即安装，等待十几秒后，叮咚，出现下面界面，兰空图床安装成功啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404712.png\" alt=\"\" /></p>\n<p>上传一张图片测试下吧</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405172.png\" alt=\"\" /></p>\n<p>上传成功～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405203.png\" alt=\"\" /></p>\n<p>访问也完成没问题，(o ゜▽゜) o☆ BINGO!</p>\n<h2 id=\"其他配置\"><a class=\"anchor\" href=\"#其他配置\">#</a> 其他配置</h2>\n<p>如果熟悉 frp 的小伙伴，就可以用 frp 去做内网穿透，再搭配上自己的域名，就可以实现外网访问啦</p>\n<p>其中 frp 的 Docker 使用论坛里也有大佬写好了教程，顶礼膜拜～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405399.png\" alt=\"\" /></p>\n<p>在配置好内网穿透后，就可以挂载自己的域名进行访问了，下面是我之前在黑群晖上挂载的域名，满满都是成就感～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405259.png\" alt=\"\" /></p>\n<p>如果在远端云服务器上用宝塔配置了反向代理并且域名使用了 https 的情况下，程序请求静态资源、生成的链接是 http，就会出现如下界面，样式资源丢失</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406629.png\" alt=\"\" /></p>\n<p>解决办法就是在反向代理的配置文件中添加  <code>roxy_set_header X-Forwarded-Proto $scheme;</code></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406087.png\" alt=\"\" /></p>\n<p>更改完后，再次刷新，看到样式在 HTTPS 下也恢复啦～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406186.png\" alt=\"\" /></p>\n<p>后续还可以玩的就是搭配 PicGo 实现写博客时快速截图并上传到我们自己的图床上啦，可以看看我的这篇教程：<a href=\"https://blog.aayu.today/nas/synology/20220114/\">兰空图床（Lsky）搭配 PicGo 客户端进行图片快速上传</a></p>\n<p>当然，因为我们用的是 V2 版的兰空图床，所以上面那篇教程里用的 PicGo 的插件就不能用了，我们可以换成 hellodk 大佬开发的 lankong 1.1.3 插件，插件的配置教程可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlbGxvZGszNC9waWNnby1wbHVnaW4tbGFua29uZw==\">看这里</span>～</p>\n<p>配置好如下图。这样就可以用 QQ 自带的  <code>Ctrl + Alt + A</code> ，来快速截图，然后用设置好的  <code>Ctrl + Shift + Z</code>  直接将剪切板里的图片上传到我们的极空间里，简直不要太方便～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220411011.png\" alt=\"\" /></p>\n<p>实测外网的环境下，一到两秒就可以将剪切板里的图片上传，速度虽说没有之前在黑群晖里的快，但也是可以接受的～</p>\n<h2 id=\"尾声\"><a class=\"anchor\" href=\"#尾声\">#</a> 尾声</h2>\n<p>在经过一番折腾后，发现在极空间 Docker 宝塔上搭建的兰空图床还是界面反应很慢，相比我之前在黑群晖上搭建的界面响应速度要慢了两三倍，极空间还有很长的路要走呀，在此也希望极空间的开发人员能早日完善 Docker，并开放 Privilege 权限，这样可玩性才会越高，也能吸引更多爱折腾的人来玩机～</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmxza3kucHJvL2RvY3MvZnJlZS92Mi8=\">兰空图床官网教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xza3ktb3JnL2xza3ktcHJv\">兰空图床官方 GitHub 仓库</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mzk2NTQ1NjI=\">【保姆级教程】兰空图床 (Lskypro) 的宝塔面板安装教程</span></li>\n</ul>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "Lsky",
                "PicGo",
                "极空间"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220730/",
            "url": "https://blog.aayu.today/algorithm/dp/20220730/",
            "title": "动态规划：乘积为正数的最长子数组长度",
            "date_published": "2022-07-30T15:25:21.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/140d9bd313226.png\" alt=\"\" /></p>\n<h2 id=\"思路和题解\"><a class=\"anchor\" href=\"#思路和题解\">#</a> 思路和题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>哈哈哈，这类型题感觉已经渐渐找到诀窍了，实际上就是要分情况讨论，乘积为正数的最长子数组，可以分为若当前 i 是正数，那就要找 i-1 乘积为正数的最大长度；若当前 i 为负数，那就要找 i-1 乘积为负数的最大长度。所以我们就要维护两个数组～～</p>\n<p>虽然我已经解出这道题了，但维护两个数组应该还可以再优化一下，和前面的题类型，应该能用滚动数组将空间复杂度从 O (n) 优化到 O (1)，但最近要在外面出差有点忙，所以只能放到以后再优化了，后面的题也只能抽时间再刷～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">pos</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">neg</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> neg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                neg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220729/",
            "url": "https://blog.aayu.today/algorithm/dp/20220729/",
            "title": "动态规划：乘积最大子数组",
            "date_published": "2022-07-29T08:36:44.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/bb95c6f7d1edc.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这道题很容易陷入一个死胡同，可惜，我就陷入了～</p>\n<p><code>[2,-5,-2,-4,3]</code>  这组测试数据就很那啥，如果以我们人脑来思考，我们可以在大脑里运算一遍得出最大乘机是 24，但如果要写代码的话，在从左往右遍历的过程中，又该如何判断要放弃次最大的 20，也就是  <code>2,-5,-2</code> ，从而选择  <code>-2,-4,3</code>  呢，这不就只能用暴力求解吗，我就陷入了这样的死胡同</p>\n<p>看了官方题解后，我才明白关键的点在哪里，就是要分情况讨论啊，啊啊啊，因为有负号的干扰，所以我们还要多考虑一种情况，就是当前 i 如果是一个负数的话，那我就要找 i 前面的最小值，负负得正，从而也有可能问鼎最大值，所以就要维护最大子数组值和最小子数组值，这才是本题的关键呐！</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> mn <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 此题的关键就在于要维护一个最小的子数组乘机</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> mn <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            prev <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728-3/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728-3/",
            "title": "动态规划：环形子数组的最大和",
            "date_published": "2022-07-28T16:32:01.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/62151223a64ec.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>真的是不得不服，我只能想到双重 for 循环滚动求解环形数组，结果果不其然，时间是超时的，我真的想不出其他思路了，只能去求助官方题解了，谁知官方题解不说人话，就在我继续逛评论区时，看到惊为天人的思路，真的是不得不服，再次感叹呐</p>\n<blockquote>\n<p>直接两种情况，1：最大数组和在中间，和平时一样解法 2：最大数组和是跨越头尾，回头了， 麻烦第二种，从两边出发往中间靠拢必须都是最大，那就说明中间段就是最小，找最小不就行了</p>\n</blockquote>\n<p>学无止境，自己要学的东西还有很多啊～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"惊为天人的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubarraySumCircular</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 情况 1 最大段就在中间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 情况 2 最大段跨越首位，那就说明最小段在中间，太牛逼了这个想法，真的顶礼膜拜</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mi <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            mi <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            sum <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> mx2 <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> mi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 返回最大值，我还是笨呐，这里要判断 mx2 是否为 0 了，如果为 0，就表示全是负数，那就返回 mx</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> mx2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> mx <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> mx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728-2/",
            "title": "动态规划：最大子数组和",
            "date_published": "2022-07-28T15:34:32.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/99a09f0daa35d.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这个题真是我的克星啊，不知道为什么，我脑子一直转不过弯来，总是会想着，要是中间有个小的负数把可以合成一个更大的连续数组隔开了怎么办，该怎么判断，我就一直死脑筋卡在这里了，感觉我也是有点笨笨的，呜呜呜～</p>\n<p>但言归正传，看了官方题解后，发现我就真是没转过那个弯来，你就管他是不是一个小负数会把更大的数组隔开，反正只要判断当前数的前面，前面数组的连续和是否对该数有帮助不就行了，有帮助我就收为我有（nums [i] + prev），没有帮助我就另起炉灶（nums [i]），然后再判断我另起炉灶的数和已知的最大和谁大，不断更新最大和就行了，啊啊啊啊，我真是笨呐，为什么这个弯我就没有转过来，我需要老婆的安慰呜呜呜～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// return dp(nums);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">greedy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">greedy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//prev 是轮询连续数组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//mx 维护最大的一个连续数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728/",
            "title": "动态规划：删除并获得点数",
            "date_published": "2022-07-28T06:10:36.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/d97de25bc78ba.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这题我承认我没有解出来，还是看了官方题解后才有思路的 🤣 怎么说呢，这道题如果你能转过弯，把它映射到我们前几道题所做的<a href=\"https://blog.aayu.today/algorithm/dp/20220726-2/\">打家劫舍</a>上，那这个题就很简单啦，关键就在于如何把这个题转换为打家劫舍～</p>\n<p>再看一遍题干， <code>你必须删除所有等于 nums[i] - 1 和 nums[i] + 1 的元素</code> ，意思不就是如果我们要获取 nums [i] 房屋的财产，那就不能获取 nums [i] 相邻两间房屋的财产了，所以我们的思路就是要把相同点数 i 累加起来，作为 nums [i] 的财产值，然后再用打家劫舍的滚动数组就可以啦</p>\n<p>再次感叹一句，思路才是最重要和最宝贵的呀～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">deleteAndEarn</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> mv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>mv <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> sum<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727-3/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727-3/",
            "title": "动态规划：跳跃游戏 II",
            "date_published": "2022-07-27T13:39:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/347287e2a581a.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>比上一题多加了一些条件，但动态规划的思想不变，都是先求解子问题（小问题），然后逐步求解出一个复杂的问题（大问题）~</p>\n<p>上一题我们可以知道在当前 i 处能走到的最大距离，所以稍微一思考，只要后面走的距离在这最大距离之内，步数都不变；只有能走的最大距离不能满足 i 了，才把步数加一，同时更新 i 处能走到的最大距离，是不是很 easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token operator\">++</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                limit <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            m <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727-2/",
            "title": "动态规划：跳跃游戏",
            "date_published": "2022-07-27T12:08:12.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/70c6e9786b6a9.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>经过前面几道题的熏陶，这类题感觉已经挺熟练了，动态规划就是先求解子问题，比如说一个长数组，我们先不要看那么多元素，可以就从有一个元素开始往后遍历求解，最后就可以求出一个复杂问题的答案了～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/6f3ec80ba5fb0.png\" alt=\"\" /></p>\n<p>但是这题应该还有好多其他解法，比如说深度优先搜索应该也算一种，一直往前冲，冲不动了就回退，然后再往前冲～～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> limit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            limit <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> limit <span class=\"token operator\">>=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727/",
            "title": "动态规划：打家劫舍 II",
            "date_published": "2022-07-27T11:29:24.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/99608969451b1.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这道题看起来不难，不就在上一道题的基础上添加了首尾房间相邻的限制吗，但我尝试解了三次都失败了，太丢人了 🤣</p>\n<p>悄咪咪的看了一下题解，一句关键的话语瞬间就扩展了我的思路</p>\n<blockquote>\n<p>如何才能保证第一间房屋和最后一间房屋不同时偷窃呢？如果偷窃了第一间房屋，则不能偷窃最后一间房屋，因此偷窃房屋的范围是第一间房屋到最后第二间房屋；如果偷窃了最后一间房屋，则不能偷窃第一间房屋，因此偷窃房屋的范围是第二间房屋到最后一间房屋。</p>\n</blockquote>\n<p>原来如此，我之前一直钻在当计算到最后一间房屋的时候，如何知道第一件房间到底是抢了还是没抢，就一直加条件去判断，结果越加越繁琐，繁琐了还不对</p>\n<p>看到题解的这句话我就恍然大悟了，我真是笨呐，第一件房和最后一间房不能同时考虑，那我就用两个 for 循环去计算就好啦，三下五除二，五分钟写完，一次性通过～</p>\n<p>果然，思路才是最重要的！</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 先计算排除最后一间房的价格</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> r1 <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 再计算排除第一间房的价格</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220726-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220726-2/",
            "title": "动态规划：打家劫舍",
            "date_published": "2022-07-26T11:31:14.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/0e8e6d5a53f8d.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>和前面题的思路蛮像的，关键在于比大小，因为题目有不能偷盗相邻的两个房间的限制，所以比大小的关键就是  <code>max(dp[i-1], dp[i-2] + nums[i])</code> ，dp [i] 就表示新增了第 i 个房间后的最大收益，所以如果我第 i 个房间不偷，我能得到的最大收益就是 dp [i-1]；如果我第 i 个房间偷了，那我 i-1 房间就不能偷了，所以我能得的最大收益就是 dp [i-2] + nums [i]，是不是很 easy~~</p>\n<p>当然啦，再稍微思考一下，可以用滚动数组把空间复杂度优化为 O (1)</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"优化题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220726/",
            "url": "https://blog.aayu.today/algorithm/dp/20220726/",
            "title": "动态规划：使用最小花费爬楼梯",
            "date_published": "2022-07-25T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/035f513090ae2.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这个题目描述的比较绕，如果有纸和笔的话，在纸上画一画会好很多，比如我胡乱画的如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/4416d31f461c5.jpg\" alt=\"\" /></p>\n<p>看了官方题解，思路才比较清晰了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/6e507951fe249.png\" alt=\"\" /></p>\n<p>上述代码的时间复杂度和空间复杂度都是 O (n)。但也可以用滚动数组的方式将空间复杂度优化到 O (1)</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minCostClimbingStairs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        res<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            r1 <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">//r2 = res[i-1] + cost[i-1] + cost[i];</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            r2 <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r1 <span class=\"token operator\">&lt;</span> r2 <span class=\"token operator\">?</span> r1 <span class=\"token operator\">:</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"官方题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minCostClimbingStairs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220725-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220725-2/",
            "title": "动态规划：爬楼梯",
            "date_published": "2022-07-24T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/73d3d92e4a44c.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>n 阶，可以看成是 n-2 阶爬 2 阶后到达，也可以看成是 n-1 阶爬 1 阶后到达，所以就是 n-2 阶的爬取数 + n-1 阶的爬取数，翻译过来就是斐波那契数，easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//n 阶，可以看成是 n-2 阶爬 2 阶后到达</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 也可以看成是 n-1 阶爬 1 阶后到达</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 所以就是 n-2 阶的爬取数 + n-1 阶的爬取数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 翻译过来就是斐波那契数，easy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            q <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            r <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220725/",
            "url": "https://blog.aayu.today/algorithm/dp/20220725/",
            "title": "动态规划：第N个泰波那契数",
            "date_published": "2022-07-24T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/b08130d1eee33.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>和昨天的<a href=\"https://blog.aayu.today/algorithm/dp/20220724/\">斐波那契数</a>思路一样，用滚动数组的思想，关键点在于设置 p、q、t、r 的初值，我们知道，r = p + q + t，第一个要计算的值是 Fn (3)，T_3 = 0 + 1 + 1，这是滚动之后的，所以 p、q、t、r 的初值应该是 0、0、1、1，这样滚动过后才能变成 0、1、1，就能算出 Fn (3) = r = 0 + 1 + 1。Easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的代码\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">tribonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            q <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            t <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q <span class=\"token operator\">+</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220724/",
            "url": "https://blog.aayu.today/algorithm/dp/20220724/",
            "title": "动态规划：斐波那契数",
            "date_published": "2022-07-23T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/6ac1effd292d1.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>第一想到的应该就是递归，用递归尝试后爆溢栈了，于是便想到用一个数组记录下来已算出的斐波那契数。我犯的一个低级错误就是把  <code>if (n == 1 || n == 0) return n;</code>  刚开始没有放到 fib 函数里，导致系统输入 0 时，直接 n - 1 = -1，数组越界报错了 🤣 长时间不思考果然脑袋就变笨了</p>\n<p>看了官方题解后又有了收获，用滚动数组的思想，就可以将递归函数转换为 for 循环，用自下而上的方法去求解子问题，秒的很</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/0dc94061dbc19.gif\" alt=\"\" /></p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        flag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        data<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">recur</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        flag<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"优化题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        p <span class=\"token operator\">=</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            q <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/english/reading/20220619/",
            "url": "https://blog.aayu.today/english/reading/20220619/",
            "title": "Daily Reading #1: The Capitol-riot hearings: High time for prime time",
            "date_published": "2022-06-18T16:00:00.000Z",
            "content_html": "<h2 id=\"文章来源\"><a class=\"anchor\" href=\"#文章来源\">#</a> 文章来源</h2>\n<p>The Economist: June 11th - 17th 2022</p>\n<h2 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h2>\n<p>The Capitol-riot hearings: High time for prime time 国会暴动听证会：黄金时间的到来</p>\n<p>Why America’s probe into the attempted coup last year is needed, before it’s too late 为什么美国需要对去年的未遂政变进行调查，否则就太晚了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/1f9cc6772ee8f.png\" alt=\"\" /></p>\n<h2 id=\"长难句分析\"><a class=\"anchor\" href=\"#长难句分析\">#</a> 长难句分析</h2>\n<div class=\"note info\">\n<p>为了更加直观的展示，句子中的主语用<span class=\"red\">红色</span>标记，谓语或系动词用<span class=\"yellow\">黄色</span>标记，宾语用<span class=\"blue\">蓝色</span>标记，宾语补足语用<span class=\"green\">绿色</span>标记，状语用<span class=\"purple\">紫色</span>标记，连词和状语引导词用<ins>下划线</ins>标记</p>\n</div>\n<div class=\"note primary\">\n<p>博主在学习的过程中难免会有错误，欢迎小伙伴留言指出～～</p>\n</div>\n<ol>\n<li class=\"quiz essay\">\n<p>A mob stormed the Capitol in Washington, DC, in an effort to prevent Congress from certifying Joe Biden’s election victory.</p>\n<blockquote>\n<ul>\n<li><span class=\"red\">A mob</span> <span class=\"yellow\">stormed</span> <span class=\"blue\">the Capitol</span> in Washington, DC, in an effort to prevent Congress from certifying Joe Biden’s election victory.<br />\n 一群暴徒冲进华盛顿特区的国会大厦，试图阻止国会认证乔 - 拜登的选举胜利。</li>\n<li>主谓宾结构，in an effort to prevent 应该是非谓语动词做后置定语吧</li>\n<li>storm 作动词，表示 “猛烈攻击”，英文解释为 “to suddenly attack and enter a place using a lot of force”<br />\n 举个🌰：An angry crowd stormed the embassy. 愤怒的人群冲进大使馆</li>\n<li>prevent 作动词，表示阻止，在日常英语中，人们经常用  <code>stop somebody/something (from) doing something</code>  代替  <code>prevent somebody/something (from) doing something</code> <br />\n 举个🌰：This barrier is to stop people from coming in without a ticket. 这个屏障是为了阻止人们无票进入。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Members of Congress had to be rushed to a secure location in a basement.</p>\n<blockquote>\n<ul>\n<li><span class=\"red\">Members</span> of Congress <span class=\"purple\">had to</span> <span class=\"yellow\">be rushed</span> to a secure <span class=\"blue\">location</span> in a basement.<br />\n 国会议员不得不被紧急送往地下室的一个安全地点。</li>\n<li>被动句，had to 做状语修饰谓语 rush</li>\n<li>rush 作动词，表示 “迅速送往”，英文解释为 “to take or send someone or something somewhere very quickly, especially because of an unexpected problem”，用法 <code>rush somebody/something to something</code> <br />\n 举个🌰：Dan was rushed to hospital with serious head injuries. 丹因头部严重受伤被紧急送往医院。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>And the man who inspired all this was the president himself, who had urged his followers to help overturn his election defeat.</p>\n<blockquote>\n<p><ins>And</ins> <span class=\"red\">the man</span> <ins>who</ins> inspired all this <span class=\"yellow\">was</span> <span class=\"blue\">the president</span> himself, <ins>who</ins> had urged his followers to help overturn his election defeat.<br />\n 而激发这一切的人就是总统本人，他曾敦促他的追随者帮助推翻他的选举失败。<br />\n两个 who 引导的定语从句，修饰主语 man</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>As the Republicans’ leader in the Senate, Mitch McConnell, told the Senate a few weeks later, Donald Trump was “practically and morally responsible” for these events: “The people who stormed this building believed they were acting on the wishes and instructions of their president.”</p>\n<blockquote>\n<ul>\n<li><ins>As</ins> the Republicans’ leader in the Senate, Mitch McConnell, told the Senate a few weeks later, <span class=\"red\">Donald Trump</span> <span class=\"yellow\">was</span> <span class=\"blue\">“practically and morally responsible”</span> for these events: “<span class=\"red\">The people</span> <ins>who</ins> stormed this building <span class=\"yellow\">believed</span> they were acting on the wishes and instructions of their president.”<br />\n 正如共和党参议院领袖米奇・麦康奈尔（Mitch McConnell）几周后告诉参议院的那样，唐纳德・特朗普对这些事件负有 “实际和道义上的责任”：“袭击这座大楼的人认为他们是按照总统的意愿和指示行事的。”</li>\n<li>As 在这个句中应该引导的是方式状语从句，翻译成 “正如，如同，按照”，Mitch McConnell 应该是同位语，补充说明前面的 leader，关于同位语和插入语的区别可以看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzA5MDMyMjI=\">考研英语语法：同位语、插入语</span> 这篇文章</li>\n<li>冒号后面的句子应该是同位语，用于解释说明前面的 these events</li>\n<li>在同位语中，又包含了一个 who 引导的定语从句和 believe 引导的宾语从句，宾语从句省略了 that</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"全文速览\"><a class=\"anchor\" href=\"#全文速览\">#</a> 全文速览</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"英文全文\">\n<p>The essence of what happened on January 6th 2021 is well-known, if still shocking to recall. A mob stormed the Capitol in Washington, DC, in an effort to prevent Congress from certifying Joe Biden’s election victory. Four people in the crowd died that day, and five police officers in its aftermath. Members of Congress had to be rushed to a secure location in a basement. Rioters erected a mock gallows and chanted “Hang Mike Pence”. And the man who inspired all this was the president himself, who had urged his followers to help overturn his election defeat. As the Republicans’ leader in the Senate, Mitch McConnell, told the Senate a few weeks later, Donald Trump was “practically and morally responsible” for these events: “The people who stormed this building believed they were acting on the wishes and instructions of their president.”</p>\n<p>So what is the point of the public hearings of the House committee probing the insurrection due to start on June 9th? From Thursday’s prime-time political theatre to half a dozen sessions that will follow before a final report in September, the coverage will be viewed very differently on either side of a polarised country. Commentators on the right will belittle it all as a witch hunt. And after November’s mid-term elections, in which the Republicans look likely to win control of the House, they can be counted on to bury the matter.</p>\n<p>Yet that ticking clock gives an urgency to the proceedings, which matter profoundly, for three reasons. One flows from the basic workings of democracy: institutions must do their job. It is the task of Congress to probe how an assault on the Capitol happened and conclude what lessons can be learned. Its nine-member committee—seven Democrats and two principled Republicans, Liz Cheney and Adam Kinzinger—has gone about it in a commendably thorough, bipartisan way, despite much resistance. On June 3rd the Department of Justice charged Peter Navarro, a former economic adviser to Mr Trump, for refusing to co-operate with the committee (though it strangely decided not to act against Mark Meadows, the White House chief of staff at the time of the riot, despite similar obstructionism).</p>\n<p>Second, though the core of the story is known, many vital details are not—especially concerning the extent of the coup’s planning and how directly the president was involved. Some revealing details, such as text messages from Mr Trump’s family to Mr Meadows urging him to persuade his boss to stop the riot, have dribbled out in the course of the committee’s work so far. More can be expected in the public hearings, given that they will draw on information gleaned from more than 1,000 depositions and interviews and over 140,000 documents.</p>\n<p>A flow of fresh facts about the depth of plotting would reinforce the third reason why these hearings are important: the threat is not over. True, America’s democracy prevailed despite the attack. Members of Congress were eventually able to go back into the chamber and they duly certified the election (albeit that, despite the violence that had occurred that day, 138 Republican House members still voted to reject the results in Pennsylvania). Mr Biden became president. But even now 60% of Republicans believe Mr Trump’s lie that the election was stolen. And the party has decided that the insurrection was not serious enough to break with Mr Trump, leaving him the front-runner for the Republican nomination in 2024. If Republicans select him, Mr McConnell says he will back him.</p>\n<p>Astonishing as it may seem, given what is already known about his efforts to thwart the will of the electorate, let alone what may be discovered, Mr Trump could well win back the presidency legitimately. In case he does not, his supporters are striving to put in place officials who may make a future challenge to the voters’ verdict succeed. The committee’s work, including the public hearings, is a vital part of the eternal vigilance that, more than ever, is needed to defend American democracy.</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"中文翻译\">\n<p>2021 年 1 月 6 日发生的事情的本质是众所周知的，如果回忆起来仍然令人震惊。一群暴徒冲进华盛顿特区的国会大厦，试图阻止国会认证乔 - 拜登的选举胜利。当天，人群中有 4 人死亡，5 名警察在事后死亡。国会议员不得不被紧急送往地下室的一个安全地点。骚乱者搭建了一个模拟绞架，并高呼 &quot;绞死迈克 - 彭斯&quot;。而激发这一切的人就是总统本人，他曾敦促他的追随者帮助推翻他的选举失败。正如共和党在参议院的领导人米奇 - 麦康奈尔几周后告诉参议院的那样，唐纳德 - 特朗普对这些事件 &quot;实际上和道德上都有责任&quot;。&quot;冲进这座大楼的人认为他们是按照他们的总统的意愿和指示行事。&quot;</p>\n<p>那么，将于 6 月 9 日开始的众议院委员会调查叛乱的公开听证会的意义何在？从周四的黄金时段的政治戏剧到随后的半打会议，再到 9 月的最终报告，在这个两极分化的国家里，人们对这些报道的看法会非常不同。右派的评论员会把这一切贬低为猎奇。而在 11 月的中期选举之后，共和党看起来有可能赢得对众议院的控制权，可以指望他们将此事埋葬。</p>\n<p>然而，这个滴答作响的钟声给这个程序带来了紧迫感，它关系重大，原因有三。一个原因来自于民主的基本运作：机构必须做好自己的工作。国会的任务是调查对国会大厦的攻击是如何发生的，并总结出可以吸取的教训。其九名成员组成的委员会 -- 七名民主党人和两名有原则的共和党人利兹 - 切尼和亚当 - 金辛格 -- 以值得称道的彻底、两党合作的方式进行调查，尽管有很多阻力。6 月 3 日，司法部指控特朗普先生的前经济顾问彼得 - 纳瓦罗 (Peter Navarro) 拒绝与委员会合作（但奇怪的是，尽管有类似的阻挠行为，司法部还是决定不对骚乱发生时的白宫幕僚长马克 - 梅多斯 (Mark Meadows) 采取行动）。</p>\n<p>第二，虽然故事的核心内容已经知道，但许多重要的细节并不清楚，特别是关于政变的计划程度以及总统如何直接参与。在委员会迄今为止的工作过程中，一些具有启发性的细节，如特朗普先生的家人给梅多斯先生的短信，敦促他劝说他的老板停止暴乱，已经流传出来。鉴于公开听证会将利用从 1000 多份证词和访谈以及 14 万多份文件中收集到的信息，可以预期会有更多的细节。</p>\n<p>关于阴谋深度的新事实的流动将加强这些听证会重要的第三个原因：威胁并没有结束。诚然，尽管发生了袭击，美国的民主还是取得了胜利。国会议员最终能够回到会议厅，他们正式认证了选举（尽管当天发生了暴力事件，但仍有 138 名共和党众议员投票反对宾夕法尼亚州的选举结果）。拜登先生成为总统。但即使是现在，也有 60% 的共和党人相信特朗普先生的谎言，即选举被盗。而该党已经决定，叛乱还没有严重到与特朗普先生决裂的地步，让他成为 2024 年共和党提名的领跑者。如果共和党人选择他，麦康奈尔先生说他会支持他。</p>\n<p>尽管看起来令人吃惊，但考虑到他阻挠选民意愿的努力已经为人所知，更不用说可能发现的情况，特朗普先生很可能合法地赢回总统职位。如果他不这样做，他的支持者正在努力安排一些官员，他们可能会使未来对选民裁决的挑战取得成功。委员会的工作，包括公开听证会，是捍卫美国民主比以往任何时候都更需要的永恒的警惕的重要组成部分。</p>\n</div>\n",
            "tags": [
                "英语学习之路",
                "每日精读",
                "每日精读"
            ]
        },
        {
            "id": "https://blog.aayu.today/leisure/mood/20220519/",
            "url": "https://blog.aayu.today/leisure/mood/20220519/",
            "title": "DIY的一个超好看的小夜灯",
            "date_published": "2022-05-18T16:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>最近在 B 站上看到一个 DIY 小夜灯的教程，实物真的要比照片好看～～</p>\n<p>520 要到啦，自己 DIY 一个送给对象，是个很不错的礼物～～</p>\n<h2 id=\"小夜灯\"><a class=\"anchor\" href=\"#小夜灯\">#</a> 小夜灯</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/7a917a89b6e39.jpg\" alt=\"\" /></p>\n<h2 id=\"教程链接\"><a class=\"anchor\" href=\"#教程链接\">#</a> 教程链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXNVNHkxYzdOeQ==\">成本 20 手把手教：3D 打印有趣的小夜灯，超级好看！大鱼 DIY 原创，含资料图纸！</span></li>\n</ul>\n",
            "tags": [
                "清风明月",
                "心情",
                "心情"
            ]
        },
        {
            "id": "https://blog.aayu.today/hardware/raspberry-pi/20220516/",
            "url": "https://blog.aayu.today/hardware/raspberry-pi/20220516/",
            "title": "树莓派4B安装向日葵踩坑笔记",
            "date_published": "2022-05-15T16:00:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>近期在捣鼓树莓派，已经在树莓派上成功用 VNC 进行了远程桌面连接，那么便想尝试能否用向日葵连接树莓派，这一尝试便踩了不少坑，而且国内关于这方面的资料也挺少，于是便把自己的踩坑经历记录下来～</p>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<p>我用的是完整版的 Raspberry Pi OS 64 位系统，注意是 64 位系统哦，可以用上海交通大学 SJTUG 镜像站下载，下载速度很快，链接如下～</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnNqdHVnLnNqdHUuZWR1LmNuL3Jhc3BiZXJyeS1waS1vcy1pbWFnZXMvcmFzcGlvc19mdWxsX2FybTY0L2ltYWdlcy8=\">Raspberry Pi OS 64</span></p>\n<p>更多镜像的下载链接和介绍可以看这篇博文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E0OTYyOTg2ODUvYXJ0aWNsZS9kZXRhaWxzLzEwODkwOTkyNw==\">使用国内镜像站下载树莓派 Raspberry Pi OS 操作系统</span></p>\n<p>最终烧录好的系统如下</p>\n<pre><code>Linux raspberrypi 5.15.32-v8+ #1538 SMP PREEMPT Thu Mar 31 19:40:39 BST 2022 aarch64 GNU/Linux\n</code></pre>\n<h2 id=\"下载安装包\"><a class=\"anchor\" href=\"#下载安装包\">#</a> 下载安装包</h2>\n<p>去向日葵的官网下载 Linux 的安装包</p>\n<p>因为我们的系统是 arm64 位的，而向日葵的「UOS」和「麒麟」这两个应用平台提供 arm64 版本的架构，这里我选择「麒麟」应用平台的 arm64 版本安装包</p>\n<p>下载完安装包后就可以在树莓派里用如下命令安装</p>\n<pre><code>sudo dpkg -i SunloginClient_11.0.1.44968_kylin_arm.deb\n</code></pre>\n<p>但会发现报错，报错如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/b3fa5e9133894.png\" alt=\"\" /></p>\n<p>从报错信息中可以，缺少  <code>libappindicator3-1</code>  这个依赖包</p>\n<h2 id=\"解决缺少依赖问题\"><a class=\"anchor\" href=\"#解决缺少依赖问题\">#</a> 解决缺少依赖问题</h2>\n<p>首先尝试用  <code>sudo apt-get install libappindicator3-1</code>  去安装依赖，发现源里没有这个依赖包</p>\n<p>没办法，那就直接下载好这个依赖包然后手动安装吧，经过查阅资料，从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ0NzQ3Ny9hcnRpY2xlL2RldGFpbHMvMTE1MTg4OTM4\">这篇博客中</span> 找到了相关的下载链接</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24vZGViaWFuL3Bvb2wvbWFpbi9saWJhL2xpYmFwcGluZGljYXRvci8=\">libappindicator3-1 官方下载链接</span></p>\n<p>我们找到 arm64 架构的进行下载，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/0ac959820f764.png\" alt=\"\" /></p>\n<p>下载完成后先用  <code>sudo apt --fix-broken install</code>  命令进行依赖包错误的修复，然后再用  <code>sudo dpkg -i libappindicator3-1_0.4.92-7_arm64.deb</code>  安装刚刚下载好的依赖包</p>\n<p>结果事与愿违，依然报错啦，报错截图如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/fb0a62fe6909f.png\" alt=\"\" /></p>\n<p>可以看到还缺少了  <code>libdbusmenu-glib4</code> ， <code>libdbusmenu-gtk3-4</code> ， <code>libindicator3-7</code>  这三个依赖包</p>\n<p>好吧，那再次尝试把这三个依赖包看能不能安装上吧，还是先用  <code>sudo apt --fix-broken install</code>  命令进行依赖包错误的修复，然后尝试看本地源里有无依赖包，终于来好运了，本地源里有  <code>libdbusmenu-glib4</code> ， <code>libdbusmenu-gtk3-4</code>  这两个依赖包，用如下命令安装</p>\n<pre><code>sudo apt-get install libdbusmenu-glib4\nsudo apt-get install libdbusmenu-gtk3-4\n</code></pre>\n<p>在尝试用本地源安装  <code>libindicator3-7</code>  时发现没有，那就还是自己下载依赖包手动安装吧，下载链接如下</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24vZGViaWFuL3Bvb2wvbWFpbi9saWJpL2xpYmluZGljYXRvci8=\">libindicator3-7 官方下载链接</span></p>\n<p>我们依然选择 arm64 架构的进行下载，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/c8f687dd6d8f7.png\" alt=\"\" /></p>\n<p>下载好后就可以用  <code>sudo dpkg -i libindicator3-7_0.5.0-4_arm64.deb</code>  命令进行安装啦</p>\n<p>终于把这三个依赖包都安装好了，然后再次用  <code>sudo dpkg -i libappindicator3-1_0.4.92-7_arm64.deb</code>  安装最开始报错的依赖包，结果终于不报错啦，接下来终于可以尝试再次安装向日葵的安装包啦，安装命令如下</p>\n<pre><code>sudo dpkg -i SunloginClient_11.0.1.44968_kylin_arm.deb\n</code></pre>\n<p>终于，安装成功！结果如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/c92d4247ba514.png\" alt=\"\" /></p>\n<h2 id=\"启动向日葵\"><a class=\"anchor\" href=\"#启动向日葵\">#</a> 启动向日葵</h2>\n<p>在树莓派上终于安好向日葵了，那向日葵怎么启动呢，可以在菜单栏里找到向日葵，如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/907d31ab2f6c1.png\" alt=\"\" /></p>\n<p>成功运行向日葵，如下～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/b2742e182bbd4.png\" alt=\"\" /></p>\n<h2 id=\"相关链接\"><a class=\"anchor\" href=\"#相关链接\">#</a> 相关链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E0OTYyOTg2ODUvYXJ0aWNsZS9kZXRhaWxzLzEwODkwOTkyNw==\">使用国内镜像站下载树莓派 Raspberry Pi OS 操作系统</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ0NzQ3Ny9hcnRpY2xlL2RldGFpbHMvMTE1MTg4OTM4\">无法定位软件包：libappindicator3-1_libappindicator3-1 软件包安装失败</span></li>\n</ul>\n",
            "tags": [
                "硬件修炼手册",
                "树莓派",
                "RaspberryPi"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/tools/20220510/",
            "url": "https://blog.aayu.today/skill/tools/20220510/",
            "title": "NoteExpress七个隐藏的实用技巧",
            "date_published": "2022-05-10T11:50:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>NoteExpress 可以说是国内最专业的文献检索与管理系统了，对比 Endnote 来说，它最大的优点是对中文文献管理非常友好！对于需要发中文核心的科研人员来说，特别推荐！</p>\n<h2 id=\"笔记添加\"><a class=\"anchor\" href=\"#笔记添加\">#</a> 笔记添加</h2>\n<p>在预览区的倒数第 2 个位置就是「笔记」选项卡，在这里可以做笔记。各栏位置可以用鼠标拖动进行调整。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/883b8b000400e.png\" alt=\"\" /></p>\n<p>笔记不仅可以插入文字，还可以插入图片和表格。</p>\n<p>文字插入大家应该都会，不需要多讲；</p>\n<p>关于图片、表格以及一些超链接的插入，只需要点击相应的图标，然后在文件夹里选中需要插入的内容就可以了！最后，点击「保存」这个图标就可以了。</p>\n<p>一旦有笔记加入，会出现粉红色方框，这就代表笔记已经存在了。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/209f42b041519.png\" alt=\"\" /></p>\n<p>这对我们之后查找文件帮助很大，打开文件看到特定的小红点就知道是自己想要的内容，不需要费时寻找。</p>\n<h2 id=\"文献去重\"><a class=\"anchor\" href=\"#文献去重\">#</a> 文献去重</h2>\n<p>我们在众多数据库中进行检索添加参考文献记录，不可避免的会有重复的文献。这种情况下，可以直接用 NoteExpress 进行查找去重。</p>\n<p>操作步骤也非常简单：</p>\n<p>选中左上角菜单栏的「查重」按钮，根据需要选择想要查重的文件夹和筛选条件，点击「查找」。此时，NoteExpress 会显示我们上一步筛选出来的重复文献，且左侧检索记录会记录下每一次查重的结果。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/bd99341b3a272.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/cf8a519300b5b.png\" alt=\"\" /></p>\n<p>这时，重复的文献就会被选中，呈现深蓝色的背景颜色啦</p>\n<p>我们可以单击单篇文献，点击预览区的「位置」按钮，便可查看文献所处数据库或者文件夹的位置。</p>\n<p>根据需要，将重复文献从不必要的数据库当中删除即可。</p>\n<p>操作方式是：右键文献，选择「从所有文件夹中删除」或者「从指定文件夹中删除」。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/bd8e81799c1d8.png\" alt=\"\" /></p>\n<h2 id=\"标签标记\"><a class=\"anchor\" href=\"#标签标记\">#</a> 标签标记</h2>\n<p>该功能主要支持给文献添加标签，一篇文献可添加多个标签。添加之后方便文献的管理。</p>\n<p>操作方式是：选中文献，点击左上角的「标签标记」，添加合适的标签、星标或优先级，点击「确定」即可。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/aecc19871b5f9.png\" alt=\"\" /></p>\n<p>此时的标签云是一个超链接，点击词组标签可以跳到相应的文件（或者显示多个文件），也可点击向下的小三角对标签进行排序或隐藏。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/685ba7141df5d.png\" alt=\"\" /></p>\n<h2 id=\"文献阅读\"><a class=\"anchor\" href=\"#文献阅读\">#</a> 文献阅读</h2>\n<p>这是对前面一些小技巧汇了一个总，这里我把题录分成了 9 个部分。</p>\n<p>① 表示是否阅读了文献；</p>\n<p>② 表示文献类型，比如说有学位论文或者是期刊文章；</p>\n<p>③ 已经加星标，将其收藏；</p>\n<p>④ 代表优先级，这个优先级有 5 个档次；</p>\n<p>⑤ 有无附件、红色方块显示有附件，没有方块则代表没有附件；</p>\n<p>⑥ 到 ⑨ 就是年份作者标题和来源，这个暂时不多讲。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/4bdd582ed5a45.png\" alt=\"\" /></p>\n<p>值得注意的是，这些选项就可以作为筛选条件来对其进行排序，我们只需要选择想要筛选的条件那里，点一下，就可以排序了。</p>\n<p>当然，还可以自定义列表头。有以下两种方法，都很简单实用。</p>\n<p>第一种：「文件夹」上右键 -「自定义列表头」-「自定义」；</p>\n<p>或者第二种方法：列表头上面右键，选择「自定义」即可。</p>\n<h2 id=\"文献统计分析\"><a class=\"anchor\" href=\"#文献统计分析\">#</a> 文献统计分析</h2>\n<p>没想到吧，NoteExpress 还提供了对文献记录的基本统计功能。</p>\n<p>操作方式是：</p>\n<p>选中需要统计的数据库，再选择「文件夹信息统计」-「统计题录类型」（例如对当前数据库文献记录题录类型、 第一作者、第二作者、卷、 期、引用次数以及关键词等），最后点击「统计」即可。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/01f7cede6c33b.png\" alt=\"\" /></p>\n<p>如，对当前数据库文献记录来源的年份进行分析，可以了解当前文献的来源近况，这样，点击「年份」后就会出现分析结果，可以将统计结果另存为文本格式。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/1741884409216.png\" alt=\"\" /></p>\n<h2 id=\"压缩数据库\"><a class=\"anchor\" href=\"#压缩数据库\">#</a> 压缩数据库</h2>\n<p>如果文献太多，已经没有多余的空间了，这个时候建议使用「压缩当前数据库」的功能。</p>\n<p>且该功能可以多次使用，如果经过一段时间使用，数据库又没有冗余空间可继续使用该功能。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/2d5605f31976e.png\" alt=\"\" /></p>\n<h2 id=\"工具选项\"><a class=\"anchor\" href=\"#工具选项\">#</a> 工具选项</h2>\n<p>「工具选项」可以对常规、显示、数据库备份、笔记、扩展、样式、网络代理、自定义、用户以及其他等进行设置。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/8f7cb5587acfc.png\" alt=\"\" /></p>\n<p>这里我们着重讲一下「扩展」的设置，这里面描述了如何设置 Word 与 WPS 的插件，也即是说将 Noteexpress 选项卡存放在 Word 或者 WPS 的菜单栏。</p>\n<p>一般情况下，安装完 Noteexpress ，会自动在 Word 中加载该扩展，WPS 中也能加载该扩展，两个软件都并未出现不兼容的情况，使用感受也都差不多，可以按照个人习惯选择。</p>\n<p>假如未能显示，或者其他未知的错误，可以点击这里的按钮重装一次 。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/042a23eb537ec.png\" alt=\"\" /></p>\n<p>还有自定义选项。我们可以在这个地方，对题录的字段自定义，也可以对列表头自定义。这样就可以更加方便、自如地管理我们的文献了！</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODA3MDczNTI=\">中文文献管理神器的 7 个隐藏的实用技巧…</span></li>\n</ul>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "工具篇",
                "NoteExpress"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/miscellaneous/20220508/",
            "url": "https://blog.aayu.today/skill/miscellaneous/20220508/",
            "title": "常见文档打开乱码原因总结",
            "date_published": "2022-05-08T09:07:00.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>本文总结了一些常见的因为编码设置错误而打开文档乱码的情况</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/196501abc3a9f.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "杂七杂八",
                "乱码"
            ]
        }
    ]
}