{
    "version": "https://jsonfeed.org/version/1",
    "title": "学无止境",
    "subtitle": "阿宇的可爱博客",
    "icon": "https://blog.aayu.today/images/favicon.ico",
    "description": "真理和热爱是吾永生的追求",
    "home_page_url": "https://blog.aayu.today",
    "items": [
        {
            "id": "https://blog.aayu.today/hardware/iot/20220920/",
            "url": "https://blog.aayu.today/hardware/iot/20220920/",
            "title": "移远BC28模块连接华为云IoT平台",
            "date_published": "2022-09-20T15:38:07.000Z",
            "content_html": "<h2 id=\"基础命令\"><a class=\"anchor\" href=\"#基础命令\">#</a> 基础命令</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">AT+CFUN=1</td>\n<td style=\"text-align:center\">开启射频（全功能模式）。如果关闭了自动连接默认 + CFUN:0，需要手动开启</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+NCCID</td>\n<td style=\"text-align:center\">读取 SIM 卡 ID，如果能返回 + NCCID: 开头的一串 ID，证明 SIM 与 NB-IoT 设备的物理连接没问题（不能排除卡欠费等问题）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+CGATT=1</td>\n<td style=\"text-align:center\">让 NB-IoT 设备去附着网络</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+CSQ</td>\n<td style=\"text-align:center\">查询卡信号，如果是 + CSQ:99,99，表示当前没信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+CGSN=1</td>\n<td style=\"text-align:center\">返回 IMEI（国际移动设备识别码）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+CIMI</td>\n<td style=\"text-align:center\">获得 IMSI。用来读取或者识别 SIM 卡的 IMSI（国际移动签署者标识），识别移动设备附带的 SIM 卡标识。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AT+CEREG?</td>\n<td style=\"text-align:center\">查询 NB 网络注册状态，+CEREG:0,1 表示已注册到归属网络</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"连接教程\"><a class=\"anchor\" href=\"#连接教程\">#</a> 连接教程</h2>\n<p>待更，先放一个大概步骤吧，后续有空再整理</p>\n<ol>\n<li>AT</li>\n<li>AT+CFUN? 是否开启了频射</li>\n<li>AT+CFUN=1 开启频射</li>\n<li>AT+CGATT? 是否附着网络</li>\n<li>AT+CGATT=1 附着网络</li>\n<li>AT+CSQ 查询信号强度</li>\n<li>AT+NCCID 物联网卡是否正常接入</li>\n<li>AT+CGSN=1 查询设备标识码</li>\n</ol>\n<div class=\"note info\">\n<p>查看配置项<br />\n AT+QMTCFG=?<br />\nAT+QMTCFG=&quot;version&quot;,0</p>\n</div>\n<ol start=\"9\">\n<li>AT+QMTCFG=&quot;version&quot;,0,4 设置 MQTT 版本为 3.1.1</li>\n<li>AT+QMTOPEN=0,&quot;<span class=\"exturl\" data-url=\"aHR0cDovLzNmOWU4NWI0MGEuaW90LW1xdHRzLmNuLW5vcnRoLTQubXlodWF3ZWljbG91ZC5jb20=\">3f9e85b40a.iot-mqtts.cn-north-4.myhuaweicloud.com</span>&quot;,1883</li>\n<li>AT+QMTCONN=0,&quot;&lt;ClientId&gt;&quot;,&quot;&lt;Username&gt;&quot;,&quot;&lt;Password&gt;&quot;</li>\n<li>AT+QMTSUB=0,1,&quot;$oc/devices/&lt;device_id&gt;/user/messages/up&quot;,0 订阅消息</li>\n</ol>\n<div class=\"note warning\">\n<p>华为云物联网平台不能直接订阅预设的 Topic：AT+QMTSUB=0,1,&quot;$oc/devices/&lt;device_id&gt;/sys/messages/up&quot;,0</p>\n</div>\n<ol start=\"13\">\n<li>AT+QMTPUB=0,0,0,0,&quot;$oc/devices/&lt;device_id&gt;/user/messages/up&quot; 发布消息</li>\n</ol>\n<div class=\"note info\">\n<p>此处被坑惨了</p>\n</div>\n<h2 id=\"被坑笔记\"><a class=\"anchor\" href=\"#被坑笔记\">#</a> 被坑笔记</h2>\n<p>哇，真的是被坑惨了，我用的是 BC28 模块，整个 MQTT 连接流程走下来，就一直卡在用  <code>AT+QMTPUB=</code>  命令发布消息这里，我这里参考了  <code>Quectel_BC26BC20_MQTT_应用指导_V1.0</code>  BC26 的 MQTT 应用指导手册，其中对  <code>AT+QMTPUB=</code>  命令的介绍如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/09/21/202209210236879.png\" alt=\"\" /></p>\n<p>我死活无法用  <code>AT+QMTPUB=&lt;TCP_connectID&gt;,&lt;msgID&gt;,&lt;qos&gt;,&lt;retain&gt;,&quot;&lt;topic&gt;&quot;,&quot;&lt;msg&gt;&quot;</code>  这个命令来直接发布消息，QCOM 客户端直接给我返回  <code>ERROR</code> ，看到这个 ERROR 我都要欲哭无泪了，为啥啊，为啥我不能一次性发布消息，如果用上图所示的  <code>进入数据模式</code>  发布消息，我又咋在代码里面按  <code>Ctrl+Z</code>  结束发送呢，哭死</p>\n<div class=\"note info\">\n<p>在找资料过程中的一个意外收获，在出现 &gt; 这个符号后，发送完自己想发送的数据后，直接用（HEX String）模式（针对 QCOM 客户端），也是就 16 进制模式发送 1A 字符串，就可以结束发送啦，这样用代码也就可以实现了  <code>进入数据模式</code>  的发布消息命令了，真的是最后一根稻草了</p>\n</div>\n<p>我就找啊找，找啊找，根本就在网上找不到相关的帖子说 BC28 模块的  <code>AT+QMTPUB=</code>  命令报错，呜呜呜，但天无绝人之路，就在我以为是我的 BC28 模块的固件版本太老，想升级固件，用  <code>BC28JAR01A08</code>  为关键字在 Bing 上搜索，终于让我找到一个相关的帖子：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMucXVlY3RlbC5jb20vdC9iYzI2LW1xdHQtb2stYmMyOC1mYWlsLzQxNDg=\">BC26 MQTT OK BC28 Fail</span> 说这事了，真的流泪了</p>\n<p>移远的技术支持也好心的回复了这个帖子</p>\n<blockquote>\n<p>BC28 Special characters are not supported.<br />\nYou can use the following modes to publish messages.<br />\nAT+QMTPUB=,,,,&quot;&quot; After “&gt;” is responded, input the data to be sent. Tap “CTRL+Z” to send, and tap “ESC” to cancel the operation.</p>\n</blockquote>\n<p>原来真的是 BC28 不支持直接发布消息的命令啊，知道真相的我眼泪掉下来。总之，这个坑也真的是让我花了一晚上的时间去查找资料，还是很有必要在这记录下来的，生活不易，猫猫叹气</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2Jsb2dzLzE5MTcwNg==\">BC35/BC28 无法入网的原因及排错方法</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMucXVlY3RlbC5jb20vdC9iYzI2LW1xdHQtb2stYmMyOC1mYWlsLzQxNDg=\">BC26 MQTT OK BC28 Fail</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYXNuYWlsL3AvMTI4MTAzNTkuaHRtbA==\">BC26 之 MQTT 协议 AT 命令</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW50YW5nbW9rZS9hcnRpY2xlL2RldGFpbHMvOTI3ODk4MDE=\">BC28 使用 MQTT 协议 连接 OneNET 平台的流程解析</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0xOTU2MDAtMS0xLmh0bWw=\">为什么 NB-IOT 模组在华为云平台一直显示未激活？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeHltbS5uZXQvYXJ0aWNsZS9xcV80MTI5ODI0NS8xMDY4MDMyOTg=\">BC28_MQTT 调试笔记</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlbHBpbmZvL2FydGljbGUvZGV0YWlscy8xMTkzNDE5NTE=\">移远 BC20 连接 MQTT 服务器小记</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ3NTQ4NDEvYXJ0aWNsZS9kZXRhaWxzLzg0NTczMTc4\">物联网 - 移远 M26 模块 MQTT 开发（AT 命令）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0xOTAxNTQtMS0xLmh0bWw=\">【BC28】【注册网络】AT+NMSTATUS 查询出现的状态分别代表什么意思</span></li>\n</ul>\n<h2 id=\"低功耗模式相关问题链接\"><a class=\"anchor\" href=\"#低功耗模式相关问题链接\">#</a> 低功耗模式相关问题链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0xNjY5My0xLTEuaHRtbA==\">BC35-G 模块的初始化流程，基于 COAP 协议，怎么优化更好？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0xODU2Mi0xLTEuaHRtbA==\">BC28 PSM 进入问题</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0zNDMxMy0xLTEuaHRtbA==\">你们的移动 NB 卡，PSM 模式下 54 分钟会自动唤醒一次吗？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2ZvcnVtL3RocmVhZC0xMjMzMzAtMS0xLmh0bWw=\">移远 BC28 模块进入 PSM 模式后功耗较大，且还能进行 AT 指令的回复</span></li>\n</ul>\n",
            "tags": [
                "硬件修炼手册",
                "物联网",
                "IoT",
                "BC28"
            ]
        },
        {
            "id": "https://blog.aayu.today/resources/20220919/",
            "url": "https://blog.aayu.today/resources/20220919/",
            "title": "知识的海洋~",
            "date_published": "2022-09-19T12:19:14.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>我宣布，B 站是最好的学习平台 😎，但在 B 站上用收藏夹管理学习的知识总是不方便，各种分类啊什么的，收藏夹一多，就更乱了。既然我有博客，我为啥不在博客里列个目录呢，完全可以按照自己的想法分类和整理，所以便有了本篇博客，也方便后期自己进行回顾～～</p>\n<h2 id=\"正在学习\"><a class=\"anchor\" href=\"#正在学习\">#</a> 正在学习</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL2NoZWVzZS9wbGF5L3NzODY1\">阿奇讲 SOLIDWORKS 机械臂大作战（2/29）</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTd6NDExaTdlcg==\">【野火】FPGA 系列教学视频（2/236）</span></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> DCDC 电路</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> LDO 电路</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> 电源电路</label></li>\n</ul>\n<h2 id=\"电子电路基础\"><a class=\"anchor\" href=\"#电子电路基础\">#</a> 电子电路基础</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"科普\">\n<ul class=\"task-list\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWFhNDExZzc2VQ==\">电子电路入门没你想的那么简（复）单（杂）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWszNDExVzdxeA==\">新手如何入门硬件 一本正经的电子电路入门</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFnNDExUzdWRw==\">锂电池充电的同时也能放电吗？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVFyNHkxVDdiNQ==\">再复杂的芯片，也离不开这 8 种基础电路</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW81NHkxcDd4bw==\">OLED 和 LCD 屏幕最本质的区别，一个视频让你彻底搞懂！</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW02NHkxRDdnYg==\">逆变！逆变！直流电如何变为交流电，一分钟动画让你看懂！</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZxNHkxNzd3bQ==\">数码管如何工作？超形象动画让你一看就懂</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXJWNDExczdlWQ==\">从 1 万纳米到 5 纳米，只用了 50 年！平面晶体管和三维立体场效应管的区别？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVRLNHkxZzdHUA==\">6 年了，问世即巅峰的雷电 3 为何还不普及？</span></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVRoNDExaDc5eQ==\">火线零线和地线到底有什么区别？接地接到哪了？</span></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"基础元器件\">\n<ul class=\"task-list\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZYNHkxVDdOeg==\">半导体为什么叫半导体？它是如何导电的？原理非常简单，知道的人却不多！</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWt2NDExNTc0WQ==\">三极管是如何导电？超形象动画让你一看就懂！</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUpxNHkxRTdRWg==\">三极管的饱和与放大</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTM0NHkxNjdxbQ==\">Mos 管的工作原理</span></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTQ4NHkxYzdMdA==\">为什么芯片都是 CMOS 的呢？CMOS 和 TTL 有什么区别？TTL 与 CMOS 的高低电平的标准是多少（5V 为例）？</span></label></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"电路设计\">\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUh2NHkxZjd3aA==\">芯片虽然复杂，但是内部电路不难、一看就懂</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTExNHkxczdTWg==\">如何设计一个锂电池充电电路</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXQ2NHkxYjd3Nw==\">怎么把 12V 电降到 5V？直流线性稳压降压电源原理</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTY0NHkxcTc0dw==\">直流电 12V 变 5V 开关电源的工作原理 DC DC 降压稳压电路的基本原理</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWlNNHkxSzdpRw==\">怎么把 5V 电升到 12V？开关电源 BOOST 升压原理</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVlRNHkxZjdQMQ==\">最简单，只要一个元器件，把 12V 降到 5V</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXhYNHkxRjdMcA==\">电荷泵升压原理</span></li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"面试相关\">\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVFmNHkxNjdoNg==\">10 道题看你能答对 2 道，大多数只能答对 1 道题，硬件工程师面试真题</span></li>\n</ul>\n</div>\n<h2 id=\"ps\"><a class=\"anchor\" href=\"#ps\">#</a> PS</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWllNHkxbzdMNg==\">1 分钟用 PS，你能把这张脸磨皮磨到吹弹可破吗？</span></li>\n</ul>\n",
            "tags": [
                "FPGA"
            ]
        },
        {
            "id": "https://blog.aayu.today/english/grammar/20220917/",
            "url": "https://blog.aayu.today/english/grammar/20220917/",
            "title": "英语语法学习（2）：动词分类",
            "date_published": "2022-09-17T12:09:21.000Z",
            "content_html": "<h2 id=\"视频讲解\"><a class=\"anchor\" href=\"#视频讲解\">#</a> 视频讲解</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVhZNDExSjdhRz9wPTM=\">【英语兔】英语语法精讲合集 (全面，通俗，有趣 | 从零打造系统语法体系)：动词分类</span></p>\n<h2 id=\"五大谓语动词-五大句型\"><a class=\"anchor\" href=\"#五大谓语动词-五大句型\">#</a> 五大谓语动词 ➤ 五大句型</h2>\n<ul>\n<li><code>不及物动词</code>  - 无需动作承受者： <code>The rabbit slept.</code>  兔子睡了</li>\n<li><code>单及物动词</code>  - 有一个宾语且无需补充信息： <code>The rabbit ate a carrot.</code>  兔子吃了根胡萝卜</li>\n<li><code>双及物动词</code>  - 有两个宾语： <code>The rabbit gave the wolf a carrot.</code>  兔子给了狼一根胡萝卜</li>\n<li><code>复杂及物动词</code>  - 有一个宾语且需要补充信息： <code>The rabbit considered the carrot tasty.</code>  兔子认为这胡萝卜好吃</li>\n<li><code>系动词</code>  - 赋予状态 / 性质的系动词： <code>The rabbit is smart.</code>  兔子聪明</li>\n</ul>\n<p>无需动作承受者被称为 <code>不及物动词</code> ，带宾语的被称为 <code>及物动词</code></p>\n<h2 id=\"动词分类\"><a class=\"anchor\" href=\"#动词分类\">#</a> 动词分类</h2>\n<ol>\n<li>可做谓语动词</li>\n</ol>\n<ul>\n<li>实义动词\n<ul>\n<li>（按动作承受者划分）\n<ul>\n<li>及物动词</li>\n<li>不及物动词</li>\n</ul>\n</li>\n<li>（按动作状态划分）\n<ul>\n<li>动作动词，如 <code>eat</code></li>\n<li>状态动词，如 <code>have</code>  表示 <code>有</code> 、 <code>feel</code>  表示 <code>感觉</code> 、 <code>own</code>  表示 <code>拥有</code> 、 <code>believe</code>  表示 <code>相信</code> 等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>（连）系动词</li>\n</ul>\n<ol start=\"2\">\n<li>可辅助构成谓语动词</li>\n</ol>\n<ul>\n<li>助动词</li>\n<li>情态动词</li>\n</ul>\n<ol start=\"3\">\n<li>不可做谓语动词</li>\n</ol>\n<ul>\n<li>非谓语动词\n<ul>\n<li>不定式</li>\n<li>过去分词</li>\n<li>现在分词</li>\n<li>动名词</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "英语学习之路",
                "语法学习",
                "英语语法学习"
            ]
        },
        {
            "id": "https://blog.aayu.today/english/grammar/20220911/",
            "url": "https://blog.aayu.today/english/grammar/20220911/",
            "title": "英语语法学习（1）：语法综述",
            "date_published": "2022-09-11T13:45:10.000Z",
            "content_html": "<h2 id=\"视频讲解\"><a class=\"anchor\" href=\"#视频讲解\">#</a> 视频讲解</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVhZNDExSjdhRz9wPTI=\">【英语兔】英语语法精讲合集 (全面，通俗，有趣 | 从零打造系统语法体系)：英语语法综述</span></p>\n<h2 id=\"简单句\"><a class=\"anchor\" href=\"#简单句\">#</a> 简单句</h2>\n<p>概括为 <code>什么 + 怎么样</code> ，对应两个句子成分： <code>主语 + 谓语</code> ，即  <code>人/物 + 动作/发生了什么事</code></p>\n<ol>\n<li>\n<p>可以独立完成的动作： <code>主语 + 不及物动词</code></p>\n<ul>\n<li>举个🌰：Papa Rabbit sleeps. 兔老爹睡觉</li>\n</ul>\n</li>\n<li>\n<p>有 1 个动作的承受者： <code>主语 + 单及物动词 + 宾语</code></p>\n<ul>\n<li>举个🌰：Papa Rabbit likes you. 兔老爹喜欢你</li>\n</ul>\n</li>\n<li>\n<p>有 2 个动作承受者： <code>主语 + 双及物动词 + 间接宾语 + 直接宾语</code></p>\n<ul>\n<li>举个🌰：Papa Rabbit teaches you English. 兔老爹教你英语。</li>\n</ul>\n</li>\n<li>\n<p>只有 1 个动作承受者（但需补充）： <code>主语 + 复杂及物动词 + 宾语 + （宾语）补语</code></p>\n<ul>\n<li>举个🌰：Papa Rabbit considers you smart. 兔老爹认为你聪明</li>\n</ul>\n</li>\n<li>\n<p>非动词： <code>主语 + 系动词 + （主语）补语/表语</code></p>\n<ul>\n<li>举个🌰：Papa Rabbit is tall. 兔老爹是高的.</li>\n<li>举个🌰：Papa Rabbit looks tall. 兔老爹看起来高.</li>\n<li>举个🌰：Papa Rabbit smells nice. 兔老爹闻上去香.</li>\n</ul>\n</li>\n</ol>\n<div class=\"note info\">\n<p>第 5 类句子的动词被称为 <code>连系动词 Linking Verbs</code> ，即我们耳熟能详的 <code>系动词</code> ～</p>\n</div>\n<div class=\"note primary\">\n<p>还有一种 <code>八大句型</code> 的分类，即在 <code>五大句型</code> 基础上增加：<br />\n6.  <code>There be</code>  句型，如：There is a rabbit. 可理解为第五种句型 <code>主语 + 系动词 + 表语</code> 的倒装<br />\n 7.  <code>主语 + 谓语动词 + 状语</code> ，如：I live in China. 可理解为第一种句型 <code>主语 + 谓语动词</code> 的延伸（虽然这里的状语很重要）<br />\n8.  <code>主语 + 谓语动词 + 宾语 + 状语</code> ，如：I put the carrot on the table. 可理解为第四种句型 <code>主语 + 谓语动词 + 宾语 + 宾语补语</code> 的延伸。</p>\n</div>\n<h2 id=\"句子成分\"><a class=\"anchor\" href=\"#句子成分\">#</a> 句子成分</h2>\n<ol>\n<li>主语</li>\n<li>谓语动词\n<ul>\n<li>谓语动词 ≠ 谓语， <code>谓语动词是谓语的一部分</code> 。谓语动词按如上简单句可以分为 5 类：</li>\n<li>可以独立完成的动作： <code>不及物动词</code></li>\n<li>有一个动作的承受者： <code>单及物动词</code></li>\n<li>有二个动作承受者： <code>双及物动词</code></li>\n<li>只有一个动作承受者： <code>复杂及物动词</code></li>\n<li>非动词： <code>系动词</code></li>\n</ul>\n</li>\n<li>宾语</li>\n<li>宾语补语</li>\n<li>主语补语（表语）</li>\n<li>定语\n<ul>\n<li>主要用来修饰主语或宾语</li>\n<li>举个🌰：The little white rabbit ate a large carrot. 这只小白兔吃了一根大胡萝卜</li>\n</ul>\n</li>\n<li>状语\n<ul>\n<li>主要用来修饰谓语动词</li>\n<li>举个🌰：The rabbit ate quickly. 兔子快速地吃</li>\n</ul>\n</li>\n<li>同位语\n<ul>\n<li>主要用来再把主语或宾语重复一遍</li>\n<li>举个🌰：Papa Rabbit, an English teacher, eats carrots. 兔老爹，一个英语老师，吃胡萝卜</li>\n</ul>\n</li>\n</ol>\n<div class=\"note info\">\n<p>你可能听过 <code>插入语</code> ，如：This carrot, I think（插入语）, is very tasty. 但是插入语是独立的，不作句子成分</p>\n</div>\n<h2 id=\"复合句compound-sentence\"><a class=\"anchor\" href=\"#复合句compound-sentence\">#</a> 复合句（Compound Sentence）</h2>\n<p>或并列句，句子的简单叠加，也称并列复合句</p>\n<h2 id=\"复杂句complex-sentence\"><a class=\"anchor\" href=\"#复杂句complex-sentence\">#</a> 复杂句（Complex Sentence）</h2>\n<p>从属关系，也称主从复合句，此处并不禁止套娃 😎</p>\n<ul>\n<li>简单句，作主语，是主语从句</li>\n<li>简单句，作宾语，是宾语从句</li>\n<li>简单句，作主语补语（表语），是表语从句</li>\n<li>简单句，作同位语，是同位语从句</li>\n</ul>\n<div class=\"note info\">\n<p>以上这几种从句都具有名词的性质，所以又合称为名词性从句</p>\n</div>\n<p>简单句还可以</p>\n<ul>\n<li>作定语，即定语从句</li>\n<li>作状语，即状语从句</li>\n</ul>\n<h2 id=\"词性词类\"><a class=\"anchor\" href=\"#词性词类\">#</a> 词性（词类）</h2>\n<p>两个句子的句型相同，但包含的词类不一定相同，同一类句子成分里可能有不同的词类，词类可分为以下几类</p>\n<ol>\n<li>\n<p>名词，nouns，表人和物</p>\n<ul>\n<li>举个🌰：Papa Rabbit is a  <code>rabbit</code> . 兔老爹是只兔子</li>\n</ul>\n</li>\n<li>\n<p>冠词，articles，英语中说明人和事物</p>\n<ul>\n<li>如上个例子中的  <code>a</code></li>\n</ul>\n</li>\n<li>\n<p>代词，pronouns，替代人和物</p>\n<ul>\n<li>举个🌰： <code>I</code>  am a rabbit. 我是只兔子</li>\n</ul>\n</li>\n<li>\n<p>形容词，adjective，形容人和物</p>\n<ul>\n<li>举个🌰：I am a  <code>smart</code>  rabbit. 我是只聪明的兔子</li>\n</ul>\n</li>\n<li>\n<p>数词，numerals，表数量</p>\n<ul>\n<li>举个🌰：I ate  <code>two</code>  carrots. 我吃了两根胡萝卜</li>\n</ul>\n</li>\n<li>\n<p>副词，adverbs，修饰动词或形容词等等</p>\n<ul>\n<li>举个🌰：I ate two carrots  <code>quickly</code> . 我很快地吃了两根胡萝卜</li>\n</ul>\n</li>\n<li>\n<p>介词，prepositions，表示和其他词关系的词</p>\n<ul>\n<li>举个🌰：I ate two carrots  <code>with</code>  chopsticks. 我用筷子吃了两根胡萝卜</li>\n</ul>\n</li>\n<li>\n<p>叹词，interjections，表感叹</p>\n<ul>\n<li>举个🌰： <code>Ah</code> , the carrot is tasty! 啊，胡萝卜好美味！</li>\n</ul>\n</li>\n<li>\n<p>连词，conjunctions，连接词和句</p>\n<ul>\n<li>举个🌰：I ate two carrots and a potato,  <code>because</code>  I was hungry. 我吃了两根胡萝卜和一个马铃薯，因为我饿了</li>\n</ul>\n</li>\n</ol>\n<p>以上九类和 <code>动词（verbs）</code> 一起，便是英语的十大词类！</p>\n<div class=\"note primary\">\n<p>句子成分 ≠ 词类。句子成分和句子中的词类是完全不同的概念，如下图，除了谓语动词是动词，其他句子成分都可能包含不同的词类～</p>\n</div>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/09/12/202209120213626.png\" alt=\"\" /></p>\n<h3 id=\"谓语动词\"><a class=\"anchor\" href=\"#谓语动词\">#</a> 谓语动词</h3>\n<p>谓语动词的三大本领</p>\n<ol>\n<li>动作 <code>时</code> 间\n<ul>\n<li>现在</li>\n<li>过去</li>\n<li>将来</li>\n<li>过去将来</li>\n</ul>\n</li>\n<li>动作状 <code>态</code>\n<ul>\n<li>一般</li>\n<li>完成</li>\n<li>进行</li>\n<li>完成进行</li>\n</ul>\n</li>\n</ol>\n<p>以上时态进行排列组合，理论上有 16 种可能的时态（噔噔咚），如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/09/12/202209120224828.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>动作假设，情感，也成为动词的 <code>语气</code>\n<ul>\n<li>虚拟语气：If I were a rabbit ...</li>\n<li>陈述语气：I ate a carrot and ...</li>\n<li>祈使语气：Eat this carrot and ...</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"助动词auxiliary-verbs\"><a class=\"anchor\" href=\"#助动词auxiliary-verbs\">#</a> 助动词（Auxiliary Verbs）</h4>\n<p>谓语动词往往需要搭配助动词才能完成以上本领，以及表否定、可能性、必须性等意思</p>\n<p>如动词 <code>吃：eat</code> ，可以和助动词结合如下：</p>\n<ul>\n<li>（协助）表示 <code>吃过了（完成）</code>  =&gt; have =&gt; have eaten</li>\n<li>（协助）表示 <code>正在吃（进行）</code>  =&gt; be =&gt; is eating</li>\n<li>（协助）表示 <code>被吃</code>  =&gt; be =&gt; be eaten</li>\n<li>（协助）表示 <code>有能力吃</code>  =&gt; can =&gt; can eat</li>\n<li>（协助）表示 <code>有可能吃</code>  =&gt; might =&gt; might eat</li>\n<li>（协助）表示 <code>有义务吃</code>  =&gt; must =&gt; must eaten</li>\n<li>（协助）表示 <code>不吃（否定）</code>  =&gt; do =&gt; do not eat</li>\n</ul>\n<h3 id=\"非谓语动词\"><a class=\"anchor\" href=\"#非谓语动词\">#</a> 非谓语动词</h3>\n<p>非谓语动词可以取代几乎所有的从句，从而简化句子，需要结合上下文才能区分是谓语动词还是非谓语动词，如下</p>\n<ol>\n<li>\n<p>动词不定式，长得和谓语动词原形一样</p>\n<ul>\n<li>Rabbits  <code>eat</code>  carrots.（谓语动词）</li>\n<li>To  <code>eat</code>  or not to eat?（非谓语动词 - 动词不定式）</li>\n</ul>\n</li>\n<li>\n<p>现在分词</p>\n</li>\n<li>\n<p>动名词，长得和谓语动词进行状态一样</p>\n<ul>\n<li>The rabbit is  <code>eating</code> .（谓语动词）</li>\n<li><code>Eating</code>  everything, I survived.（非谓语动词 - 现在分词）</li>\n<li><code>Eating</code>  carrots is healthy.（非谓语动词 - 动名词）</li>\n</ul>\n</li>\n<li>\n<p>过去分词，长得和谓语动词的完成状态一样</p>\n<ul>\n<li>The rabbit has  <code>eaten</code> .（谓语动词）</li>\n<li>This is a half- <code>eaten</code>  carrot.（非谓语动词 - 过去分词）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>英语语法的核心就是动词！</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/09/12/202209120258266.png\" alt=\"\" /></p>\n",
            "tags": [
                "英语学习之路",
                "语法学习",
                "英语语法学习"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20220903/",
            "url": "https://blog.aayu.today/nas/zspace/20220903/",
            "title": "极空间上Docker迁移日记",
            "date_published": "2022-09-03T14:26:15.000Z",
            "content_html": "<p>今天买的固态硬盘终于到了，970 EVO Plus 1T，拿来做高速存储，实话说，Docker 升级前我还满忐忑的，因为看说明，Docker 升级会把所有的镜像和容器清空，所以我就连夜写了篇博客（<a href=\"https://blog.aayu.today/nas/zspace/20220902/\">极空间上常用 Docker 应用推荐 - 可玩性 +++</a>）把 Docker 容器的配置全部记录下来，把数据库都做了备份，才敢去安装固态硬盘作为高速存储，升级 Docker，结果很舒适，Docker 升级后，镜像的下载速度和容器的启动速度提高太多了，以 kangkang 大佬的宝塔镜像为例，升级前我记得镜像光下载就下载了 10 到 20 分钟左右吧，启动宝塔镜像也要花个十几分钟。在 Docker 升级后，宝塔镜像下载 1 分钟左右就下载好了，容器启动更快，几乎秒启，一两秒就启动了，这波升级真可以～</p>\n<p>但目前把文件夹映射到高速存储里好像还存在一些 bug，在容器的环境里不能指定其他用户，只能用 root 用户，否则挂载的文件夹就会找不到。比如我的 gitea 容器，在环境里指定了 git 用户去运行 gitea 程序，容器启动后，如果用 git 用户登录 SSH，是找不到挂载在高速存储里的文件夹，这个问题不知道极空间的开发人员是否有遇到。</p>\n<p>捣鼓了一中午，发现把 gitea 程序用 chown 命令设置成 root 用户，然后编辑 app.ini，也指定成 root 用户，虽然 gitea 程序能启动了，之前保存的代码仓库也能访问了，但之前配置成功的 SSH 提交代码就不行了，还是有一堆问题，所以木得办法，只能把 gitea 容器里的文件夹映射再改回去了，不用高速存储了</p>\n<p>还有其他问题，就是之前论坛里也有人提到的，nginx 的配置文件映射到高速存储，也是因为权限问题，不行，只能改为不用高速存储了</p>\n<p>kangkang 大佬的 mariadb 数据库镜像的文件映射到高速缓存里也会出问题，会导致数据库无法删除，再放回机械硬盘，就能删除不用的数据库了，只能说目前极空间的 Dokcer 还有很多 bug 要修复呀</p>\n<p>其他容器还在测试，后续如果发现其他问题再补充～</p>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "极空间"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20220902/",
            "url": "https://blog.aayu.today/nas/zspace/20220902/",
            "title": "极空间上常用Docker应用推荐-可玩性+++",
            "date_published": "2022-09-02T17:28:42.000Z",
            "content_html": "<h2 id=\"应用推荐\"><a class=\"anchor\" href=\"#应用推荐\">#</a> 应用推荐</h2>\n<ol>\n<li>baota（宝塔），可以部署自己的网站 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYXl1LnRvZGF5\">https://aayu.today</span></li>\n<li>lsky（兰空图床），基于 baota 部署，在 docker 上部署好自己的兰空图床后，写博客时要用到的图片都可以保存到 NAS 里了，数据在手，天下我有</li>\n<li>nginx，部署自己的个人博客 <a href=\"https://blog.aayu.today\">https://blog.aayu.today</a></li>\n<li>zdir，部署自己的共享云盘 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYWF5dS50b2RheQ==\">https://pan.aayu.today</span></li>\n<li>gitea，部署自己的代码仓库 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLmFheXUudG9kYXk=\">https://code.aayu.today</span>，可私有可公开，代码保存到自己的 NAS 里，倍安心～</li>\n<li>mariadb，本质是 mysql8 数据库，上面的兰空图床和 gitea 都要用到 mysql 数据库</li>\n<li>qbittorrent 影片资源下载神器</li>\n<li>frpc 我觉得是最好用的内网穿透工具，配合腾讯云的香港云服务器和自己的域名，便可实现我上述的那些域名外网访问了，香港云服务器峰值带宽 30Mb，实测夜间下载我的共享云盘资源能到 4MB/s，很爽</li>\n<li>siyuan（思源笔记），可以把自己的笔记保存到我们的极空间里，而且可配置项很多，笔记的界面可以美化的很好看～</li>\n<li>qinglong（青龙面板），挂载自动化脚本，可以拿来薅羊毛（蛮复杂的），或练练自己写的自动化脚本，还是蛮不错的</li>\n<li>komga，一个支持中文，可以看漫画的 Docker 应用</li>\n</ol>\n<p>以上就是我目前最常使用的 docker 应用了，我觉得极大丰富了极空间 NAS 的可玩性～～</p>\n<p>Reader3 我折腾了一下，发现搜书过程响应太慢了，而且书源还很杂很乱，占用资源又挺多的，还不如用极空间 App 自带的极阅读呢，把自己找的资源导进去就可以了，所以 Reader3 我就不折腾了～</p>\n<h2 id=\"详细设置\"><a class=\"anchor\" href=\"#详细设置\">#</a> 详细设置</h2>\n<h3 id=\"qbittorrent\"><a class=\"anchor\" href=\"#qbittorrent\">#</a> qbittorrent</h3>\n<ul>\n<li>linuxserver/qbittorrent:latest</li>\n<li>这里推荐 4 个 CPU，内存 4G 应该会更好一点～</li>\n<li>下面的容器端口只用配置 8999 和 8092 这三个端口就行</li>\n<li>访问地址：IP 地址 + 端口：8092</li>\n<li>默认用户名是 admin、密码是 adminadmin</li>\n<li>在添加的时候，保存文件的路径，这个 <code>/downloads/</code>  不要删除，我们直接在后面加文件夹名字即可，例如 <code>/downloads/电影</code> 、 <code>/downloads/4K电影</code> 、 <code>/downloads/电视剧</code> 等等</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030007797.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030009238.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030014797.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030016077.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030059310.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030101665.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030101798.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030102482.png\" alt=\"\" /></p>\n<h3 id=\"baota\"><a class=\"anchor\" href=\"#baota\">#</a> baota</h3>\n<ul>\n<li>kangkang223/baota:latest</li>\n<li>文件夹映射没必要映射 <code>/home</code> ，当时只是测试用的</li>\n<li>端口映射后面的 <code>8890-8899</code>  随意设置，这是为以后宝塔内的应用预留的备用端口</li>\n<li>宝塔启动成功后，进入 SSH，用 <code>bt</code>  命令重置用户名和密码就行</li>\n<li>可以是不是的备份宝塔配置，这样以后迁移时就能直接恢复配置了，注意要把宝塔备份数据下载下来</li>\n<li>要搭建兰空图床的 PHP-8.0 的配置详见我这篇博客：<a href=\"https://blog.aayu.today/nas/zspace/20220822/\">手拉手教你在极空间 Docker 宝塔上搭建兰空图床（Lsky）</a></li>\n</ul>\n<div class=\"note warning\">\n<p>注意：在搭建图床那篇博客中需要变通的是，不能用宝塔内部的 MySQL 数据库，因为我实测，用了一两天就自己给崩了，再也启动不了，所以解决办法就是用下面我要介绍的  <code>Mariadb</code>  镜像，该 Docker 镜像就是 MySQL8 数据库，不能用宝塔内部的数据库，一定要注意呀，不管用哪个数据库，也要经常做备份～</p>\n</div>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030137635.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030138132.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030140784.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030141848.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030142449.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030144588.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030145938.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030150748.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030151260.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030414585.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030416891.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030418283.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030420696.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030421764.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030422381.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030424566.png\" alt=\"\" /></p>\n<h3 id=\"frpc\"><a class=\"anchor\" href=\"#frpc\">#</a> frpc</h3>\n<ul>\n<li>oldiy/frpc:latest</li>\n<li>除了设置文件夹路径外，其余设置都保持默认就好</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030213306.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030214380.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030215126.png\" alt=\"\" /></p>\n<h3 id=\"mariadb\"><a class=\"anchor\" href=\"#mariadb\">#</a> mariadb</h3>\n<ul>\n<li>kangkang223/centos-mariadb:latest</li>\n<li>在环境这里记得设置 root 密码</li>\n<li>如果是初次运行镜像，进入容器后，运行  <code>sh /init_db.sh</code> ，有报错的话就再运行一次，应该就没有报错了</li>\n<li>容器内连接数据库： <code>/usr/local/mariadb/bin/mysql -u root</code></li>\n<li>记得数据库要常做备份呀！</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030217415.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030217487.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030218084.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030218742.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030219962.png\" alt=\"\" /></p>\n<h3 id=\"gitea\"><a class=\"anchor\" href=\"#gitea\">#</a> gitea</h3>\n<ul>\n<li>gitea/gitea/1.9.6-linux-amd64</li>\n<li>注意，这里在环境这里设置了 git 作为程序的运行用户，同时指定了 UID 和 GID 都为 1000，这个设置很重要，因为后面用 Nginx 映射博客静态文件时，只有 UID 保持一直，才不会导致博客文件权限混乱</li>\n<li>gitea 的其他配置可以详见：<a href=\"https://blog.aayu.today/nas/zspace/20220822-2/\">手拉手教你在极空间 Docker 上安装 Gitea 并实现 SSH 提交代码</a></li>\n</ul>\n<div class=\"note primary\">\n<p>如果配合 Hexo 博客框架，想实现把博客静态文件提交到 gitea 上，需要参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4NjYzMi9hcnRpY2xlL2RldGFpbHMvMTA2NDU3ODcz\">hexo 部署到云服务器上</span> 这篇文章，设置一下  <code>GIT HOOKS</code> ，在  <code>post-receive</code>  添加如下内容（注意按自己实际情况适当修改静态文件保存的路径）</p>\n<pre><code>git --work-tree=/data/www/blog --git-dir=/data/git/repositories/ylsislove/blog.git checkout -f\n</code></pre>\n<p>注意提前创好 <code>/data/www/blog</code>  目录，并用 <code>chown -R git:git /data/www/blog</code>  设置成 git 用户和组</p>\n</div>\n<p>app.ini 部分配置供参考</p>\n<pre><code>[server]\nAPP_DATA_PATH    = /data/gitea\nSSH_DOMAIN       = code.aayu.today\nHTTP_PORT        = 3000\nROOT_URL         = https://code.aayu.today/\nDISABLE_SSH      = false\nSSH_PORT         = 2222\nLFS_START_SERVER = true\nLFS_CONTENT_PATH = /data/git/lfs\nDOMAIN           = code.aayu.today\nOFFLINE_MODE     = false\nLANDING_PAGE\t = explore\n\n[picture]\nAVATAR_UPLOAD_PATH            = /data/gitea/avatars\nREPOSITORY_AVATAR_UPLOAD_PATH = /data/gitea/repo-avatars\nDISABLE_GRAVATAR              = true\nENABLE_FEDERATED_AVATAR       = false\n\n[attachment]\nPATH = /data/gitea/attachments\nALLOWED_TYPES = */*\nMAX_SIZE  = 50\nMAX_FILES = 10\n\n[service]\nDISABLE_REGISTRATION              = true\nREQUIRE_SIGNIN_VIEW               = false\nREGISTER_EMAIL_CONFIRM            = false\nENABLE_NOTIFY_MAIL                = false\nALLOW_ONLY_EXTERNAL_REGISTRATION  = false\nENABLE_CAPTCHA                    = false\nDEFAULT_KEEP_EMAIL_PRIVATE        = false\nDEFAULT_ALLOW_CREATE_ORGANIZATION = true\nDEFAULT_ENABLE_TIMETRACKING       = true\nNO_REPLY_ADDRESS                  = noreply.example.org\n</code></pre>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030229974.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030230543.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030230993.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030231483.png\" alt=\"\" /></p>\n<h3 id=\"zdir\"><a class=\"anchor\" href=\"#zdir\">#</a> zdir</h3>\n<ul>\n<li>linuxserver/nginx:latest</li>\n<li>注意配置下要映射的 80 端口</li>\n<li>除了文件夹路径和端口设置下，其他设置默认就可以啦</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030254768.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030255280.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030255097.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030256144.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030257806.png\" alt=\"\" /></p>\n<h3 id=\"blog\"><a class=\"anchor\" href=\"#blog\">#</a> blog</h3>\n<ul>\n<li>linuxserver/nginx:latest</li>\n<li>注意博客的文件夹路径映射，是从 gitea 创建的 /data/www/blog 那里映射过来的</li>\n<li>所以在环境配置那里要多加条配置 <code>USER</code> ， <code>git</code></li>\n<li>同样注意配置下要映射的 80 端口</li>\n</ul>\n<div class=\"note warning\">\n<p>这里我的配置还是有问题的，因为我就算设置了 <code>USER</code> 、 <code>USER_UID</code>  和 <code>USER_GID</code> ，容器启动后，依然把  <code>/data/www/blog</code>  这个目录的用户和组变成了 911，变成 911 后，博客访问虽然没问题，但用 Hexo 部署博客到 gitea 就会报错，因为 git 用户没有 911 用户的权限，我这个小菜鸟目前也不知道该怎么解决啦，如果有熟悉 docker 的，欢迎给我点指导 🙈</p>\n</div>\n<div class=\"note primary\">\n<p>2022-09-03 更新：博客这里的权限问题解决了，需要设置 <code>PUID</code>  和 <code>PGID</code>  为 1000，就可以了。因为 gitea 容器的环境是 git 用户，而 git 用户的 ID 就是 1000，但和 gitea 容器的区别是，这里要用 <code>PUID</code>  和 <code>PGID</code>  指定 nginx 启动用户的 ID 号，只要设置了，就可以和 gitea 那边保持同样的用户 ID 了，问题解决～</p>\n</div>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030258911.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030258706.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030259805.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030332199.png\" alt=\"\" /></p>\n<h3 id=\"siyuan\"><a class=\"anchor\" href=\"#siyuan\">#</a> siyuan</h3>\n<ul>\n<li>zsource/siyuan:latest</li>\n<li>思源笔记配置比较简单，环境那里可以配置下授权码配置 <code>ACCESSAUTHCODE</code> ，这样笔记就必须输入授权码才能查看啦，这里忘设置了也没关系，可以进入界面后在笔记里设置</li>\n<li>思源笔记美化教程资源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xhbmd6aG91L3NpeXVhbi1ub3Rl\">思源笔记美化教程</span></li>\n</ul>\n<div class=\"note primary\">\n<p>要是配置了内网穿透，然后用反向代理设置了 HTTPS，需要在反向代理的配置文件里添加如下两行，进行 WebSocket 反代，详情可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpeXVhbi1ub3RlL3NpeXVhbi9pc3N1ZXMvNDk1OQ==\">群晖 docker 安装，配置反向代理，https 访问提示 “内核连接中断...v2.0.11</span></p>\n<pre><code>proxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection 'Upgrade';\n</code></pre>\n</div>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030339604.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030340122.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030340469.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030341131.png\" alt=\"\" /></p>\n<h3 id=\"qinglong\"><a class=\"anchor\" href=\"#qinglong\">#</a> qinglong</h3>\n<ul>\n<li>whyour/qinglong:latest</li>\n<li>文件夹映射还蛮多的，青龙面板用来练练自己写的自动化任务还是蛮不错的</li>\n<li>用青龙面板薅羊毛感觉好复杂，后面有时间再研究吧</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030355859.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030355501.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030356578.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030356433.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030358002.png\" alt=\"\" /></p>\n<h3 id=\"komga\"><a class=\"anchor\" href=\"#komga\">#</a> komga</h3>\n<ul>\n<li>gotson/komga:latest</li>\n<li>一个支持中文，可以看漫画的 Docker 应用，但说实话，我还不咋常用，最主要的原因可能是漫画资源不好找哇 😖</li>\n<li>貌似占用资源很多，如果有小伙伴常用的话，可以取消性能限制</li>\n</ul>\n<p class=\"gallery\" data-height=\"150\"><img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030404198.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030405788.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030405832.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2022/09/03/202209030405492.png\" alt=\"\" /></p>\n<h2 id=\"尾记\"><a class=\"anchor\" href=\"#尾记\">#</a> 尾记</h2>\n<p>迁移 Docker 前记得备份下 mariadb 数据库</p>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "极空间"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20220822-2/",
            "url": "https://blog.aayu.today/nas/zspace/20220822-2/",
            "title": "手拉手教你在极空间Docker上安装Gitea并实现SSH提交代码",
            "date_published": "2022-08-22T09:47:48.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>踩坑不容易啊，终于把这个需求实现了，这样我就可以把我的<a href=\"https://blog.aayu.today/\">博客小站</a>通过 Git 部署到极空间上了，也可以把自己一些好玩的代码仓库上传到极空间上，再也不用担心 GitHub 的龟速访问，以及 Gitee 莫名其妙的代码审查了～～</p>\n<p>注意，本文需要配合内网穿透，实现外网访问后才能解决一些报错问题，有一定难度哦～～</p>\n<h2 id=\"安装数据库\"><a class=\"anchor\" href=\"#安装数据库\">#</a> 安装数据库</h2>\n<p>Gitea 运行需要数据库，默认为本地 sqlite，不过不推荐这种方式。这里可以参考 kangkang 大佬在极空间论坛里发布的安装 mariadb（mysql）镜像的教程，膜拜大佬～</p>\n<h2 id=\"安装gitea\"><a class=\"anchor\" href=\"#安装gitea\">#</a> 安装 Gitea</h2>\n<p>在极空间 Z4 的 Docker 里选择  <code>gitea/gitea</code>  镜像的  <code>1.9.6-linux-amd64</code>  版本进行下载，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221954929.png\" alt=\"\" /></p>\n<p>下载完成后可以参考如下配置启动容器</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221955369.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221955658.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230016107.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221956557.png\" alt=\"\" /></p>\n<p>其中，数据目录必须挂载，防止数据丢失。USER_UID=1000 USER_GID=1000 也需要设置</p>\n<p>其他设置使用默认的就可以啦，设置好以后，就可以启动容器了</p>\n<h2 id=\"配置gitea\"><a class=\"anchor\" href=\"#配置gitea\">#</a> 配置 Gitea</h2>\n<p>容器启动成功后，在浏览器中访问  <code>http://NAS的内网IP:3000/</code>  就可以看到 Gitea 的展示界面了，如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208221959202.png\" alt=\"\" /></p>\n<p>点击右上角的注册，就可以进行 Gitea 的初始化配置，配置如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222000549.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222301075.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222001352.png\" alt=\"\" /></p>\n<p>然后点击安装，耐心等待 10 分钟左右应该就能安装成功了～</p>\n<p>安装完成后就会自动跳转到用户的界面，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222003278.png\" alt=\"\" /></p>\n<p>我们可以点击 + 号新建一个仓库来测试下～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222008537.png\" alt=\"\" /></p>\n<p>注意，这里有点小 bug，就是创建的时候不能勾选  <code>初始化存储库</code> ，否则会报 500 的异常，这个问题如果有大佬知道怎么解决欢迎留言呀～～</p>\n<div class=\"note info\">\n<p>2022-08-23 更新：博主在查看了日志后发现，当勾选了  <code>初始化存储库</code>  再创建仓库，gitea 会尝试用 git 用户去操作  <code>/tmp</code>  目录，而 tmp 目录是属于  <code>root:root</code>  用户和组的，所以这里就没操作成功，报了没有权限的错误，所以仓库就创建失败，返回 500</p>\n<p>知道报错原因后解决办法就很简单啦，我们在极空间里用 root 账号进入 gitea 容器，然后用  <code>chown -R git:git tmp/</code>  命令将 tmp 目录设置为 git 用户和组的，再次创建勾选了  <code>初始化存储库</code>  的仓库，报错完美解决～</p>\n</div>\n<p>创建成功如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222010015.png\" alt=\"\" /></p>\n<p>但是我这边测试直接在本地拉取会报错，但看 kangkang 大佬的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExNTE=\">教程</span>本地拉取就没有报错，有大佬如果知道是怎么回事欢迎给我留言</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222028976.png\" alt=\"\" /></p>\n<p>接下来测试下迁移外部仓库。点击左上角选择</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222021979.png\" alt=\"\" /></p>\n<p>点击迁移，耐心等待下，便可成功将外部的仓库迁移到极空间里的 Gitea 了，很方便～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222023397.png\" alt=\"\" /></p>\n<p>这里我又测试了一下本地拉取迁移过来的仓库，也是报错了。但别泄气，当后面配置了 frp 内网穿透后，用外网域名访问，以上本地拉取的报错问题就没有啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222031910.png\" alt=\"\" /></p>\n<h2 id=\"配置内网穿透\"><a class=\"anchor\" href=\"#配置内网穿透\">#</a> 配置内网穿透</h2>\n<p>内网穿透的方式太多了，我这里也没办法详细展开介绍，也不是本文的重点</p>\n<p>我用的是  <code>frp + 腾讯云 + 宝塔 + 自己的域名</code>  方式做的内网穿透，这样做的好处是完全的自我掌控，感兴趣的小伙伴可以去找点教程学习一下，frp 如果你会一点 Linux 命令的话，其实很简单的～～</p>\n<p>配置好内网穿透和域名后，就可以在外网用自己的域名访问了，效果如下～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222049630.png\" alt=\"\" /></p>\n<p>成功外网访问后，可以看到仓库的克隆链接那里还是极空间内网的地址，这里就需要再对 Gitea 的配置文件进行修改了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222051607.png\" alt=\"\" /></p>\n<p>在极空间的文件管理中，找到我们挂在的数据目录，找到  <code>app.ini</code>  配置文件，这里可以把这个配置文件下载到电脑上，然后用 sublime 或 notepad++ 等编辑器修改，或如果已经把极空间挂载成了网络硬盘，也可以直接在网络硬盘里找到该文件进行修改，或如果熟悉 vi 等编辑器的话，也可以直接打开极空间 Docker 的 SSH，在容器内部修改该配置文件都可以，选择自己熟悉的方式就好啦</p>\n<p>配置文件要修改以下地方</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230024987.png\" alt=\"\" /></p>\n<p>修改完配置文件后，就要重启 Gitea，这里不需要重启容器，而是直接进到容器内部，然后用  <code>ps aux | grep gitea</code>  命令找到 Gitea 进程，如下图</p>\n<p>注意要用 git 用户进入容器</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222057259.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222100817.png\" alt=\"\" /></p>\n<p>然后用  <code>kill -9 进程ID</code>  命令杀死 Gitea 进程即可，杀死后容器会自动重启 Gitea 程序～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222103463.png\" alt=\"\" /></p>\n<p>注意，这里可以用  <code>ps aux | grep gitea</code>  命令多查询几次，看重启后的 Gitea 进程 ID 是否还会变化，如果一直在变化，就表示你的  <code>app.ini</code>  设置有误，程序在不断的重启当中。</p>\n<p>如果发生了程序在不断重启的情况，不要慌张，可以去  <code>/data/gitea/log</code>  目录下找到日志文件，看是什么原因报错然后改正就可以啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222105495.png\" alt=\"\" /></p>\n<p>修改完配置文件并重启 Gitea 后，可以在 Web 界面的右上角【管理后台】处查看 Gitea 的配置，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222108037.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230027900.png\" alt=\"\" /></p>\n<p>可以看到在配置文件里修改的都已经更新过来了～～</p>\n<p>然后打开我们的项目，可以看到克隆链接已经变成公网域名的地址了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222113401.png\" alt=\"\" /></p>\n<p>然后再次在本地克隆仓库，嘿嘿，发现仓库成功拉取下来了。拉取时报了个警告是说我们的仓库是空的，没有内容～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222115090.png\" alt=\"\" /></p>\n<p>那我们就推送个内容上去</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222119098.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222119931.png\" alt=\"\" /></p>\n<p>可以看到我们本地的推送测试也是没有问题啦～～</p>\n<h2 id=\"配置ssh提交\"><a class=\"anchor\" href=\"#配置ssh提交\">#</a> 配置 SSH 提交</h2>\n<p>SSH 需要把我们自己电脑的公钥追加到容器的  <code>/data/git/.ssh/authorized_keys</code>  文件中，SSH 的公钥不知如何生成的，可以看我的这篇教程：<a href=\"\"></a></p>\n<p>注意，有小伙伴可能会注意到个人配置中有配置 SSH 的地方，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222121300.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208222124452.png\" alt=\"\" /></p>\n<p>但博主实测，这样的做法不行，首先直接添加会报 500 的错误。就算查阅资料后，在  <code>app.ini</code>  配置文件中添加  <code>START_SSH_SERVER = true</code>  语句，然后成功在上图位置配置好了个人的 SSH 公钥，后面用 SSH 克隆仓库时还是不行，这里博主踩坑踩得贼累 🥲</p>\n<p>所以正确使用 SSH 的做法是什么呢，往下看！</p>\n<p>我们需要把自己电脑的公钥追加到容器的  <code>/data/git/.ssh/authorized_keys</code>  文件中。具体操作步骤就是先借助极空间把自己电脑的公钥文件上传到容器的  <code>/data/git</code>  目录下，然后用  <code>cat id_rsa.pub &gt; .ssh/authorized_keys</code>  命令生成 authorized_keys 文件（默认 .ssh 目录下没有这个文件），然后再用  <code>chmod 600 authorized_keys</code>  更改文件的权限，就大公告成啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230038774.png\" alt=\"\" /></p>\n<p>当成功配置了自己的公钥后，有什么效果呢，看下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230041738.png\" alt=\"\" /></p>\n<p>发现我们可以在自己的电脑上用 git 用户登录上极空间的 gitea 容器啦，终于达到这一步了，后面我们就可以用 SSH 来拉取代码了</p>\n<h2 id=\"用ssh克隆代码\"><a class=\"anchor\" href=\"#用ssh克隆代码\">#</a> 用 SSH 克隆代码</h2>\n<p>我们现在来尝试将迁移过来的外部仓库用 SSH 的方式克隆到本地，执行 clone 命令一看，卧槽，为啥还报错</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230048808.png\" alt=\"\" /></p>\n<p>细细看下报错原因，诶这个原因已经不是登录的问题了！是没有找到我们的 git 仓库。那为什么没找到呢，我们可以看到程序找 git 仓库的路径是  <code>/ylsislove/test-project.git</code> ，这斜杠开头的路径，是跑去容器的根路径下去找了</p>\n<p>那我们仓库的地址是在容器的  <code>/data/git/repositories/ylsislove/test-project.git</code>  这个路径下，所以我们就尝试对命令稍加修改  <code>git clone ssh://git@code.aayu.today:2222/data/git/repositories/ylsislove/test-project.git</code> ，运行，成了！</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/23/202208230053242.png\" alt=\"\" /></p>\n<h2 id=\"尾声\"><a class=\"anchor\" href=\"#尾声\">#</a> 尾声</h2>\n<p>以上就是博主的踩坑过程，踩坑不易，希望能帮助到更多爱折腾的小伙伴～</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGVhLmlvL3poLWNuL3JldmVyc2UtcHJveGllcy8=\">Gitea 官方文档</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExNTE=\">Gitea, 一款轻量好用的自托管 Git 服务</span></li>\n</ul>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "SSH",
                "极空间",
                "Gitea"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20220822/",
            "url": "https://blog.aayu.today/nas/zspace/20220822/",
            "title": "手拉手教你在极空间Docker宝塔上搭建兰空图床（Lsky）",
            "date_published": "2022-08-21T15:56:50.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>世界上什么事最让人安心呢，可能每个人心中都有自己的答案。但我觉得有一件事应该没有人会否认，那就是把数据掌握在自己的手上，最让人安心！</p>\n<p>我之前其实已经在黑群晖上实现了兰空图床的搭建，详情可以回顾<a href=\"https://blog.aayu.today/nas/synology/20220111/\">黑群晖 NAS 搭建兰空图床（Lsky）</a>，而在用了黑群晖一段时间后，发现有了 NAS 之后是真爽啊～～</p>\n<p>而自己搭建的黑群晖由于种种原因并不是很稳定，而自己又是个颜狗，极空间 Z4 好看的外观瞬间就吸引了我，包括对用户极为友好的手机 APP 以及是一个国产品牌，于是便入手了极空间 Z4，也开始了本次的折腾之旅哈哈～～</p>\n<h2 id=\"安装docker宝塔\"><a class=\"anchor\" href=\"#安装docker宝塔\">#</a> 安装 Docker 宝塔</h2>\n<p>参考我之前的<a href=\"https://blog.aayu.today/nas/synology/20220111/\">折腾笔记</a>，首先第一步便是要在 Docker 里面安装宝塔面板，但很可惜的是，之前在黑群晖上安装的宝塔镜像在极空间上还真是用不了，原因大家应该也都知道，由于安全原因，极空间的 Docker 并没有开放 Privilege 权限，所以之前的镜像就用不了了。好在天无绝人之路，偶然发现极空间还有个论坛，这可算是打开了新世界的大门呀，里面的大佬原来早已经踩了很多我们可能会碰到的坑了～～</p>\n<p>其中，kangkang 大佬已经给出了在极空间 Z4 上搭建宝塔面板的教程了，详情可以看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hlbndlaWthbmcudG9wLz9wPTExMDQ=\">极空间 Nas - 宝塔面板</span>，所以安装宝塔的步骤按照大佬的教程一步步走下去就可以啦。但是有一处地方建议更改，就是在【基本设置】中的启动性能限制，建议取消，直接给宝塔最大的性能空间。大佬原教程中的 2 核 2G 我实测后感觉带兰空图床太吃力了，图床的 Web 界面加载跳转要等待 5 秒以上。下面展示下我配置好的容器配置，其中端口 8890-8899 是我为宝塔内的网站预留的应用端口，小伙伴可以根据自己需要自由设置啦～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220358021.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359767.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359208.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359802.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220359320.png\" alt=\"\" /></p>\n<h2 id=\"安装兰空图床\"><a class=\"anchor\" href=\"#安装兰空图床\">#</a> 安装兰空图床</h2>\n<p>安装好宝塔以后，顺利的话输入  <code>http://NAS的内网IP:18888/f185ef31/</code>  应该就能看到宝塔的登录界面啦，那用户名和密码是多少呢，我们可以在 Docker 自带的 SSH 里面用  <code>bt</code>  命令重置用户名和密码，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220400511.png\" alt=\"\" /></p>\n<p>进去以后，绑定好自己的手机，然后就可以看到主面板了，接下来我们首先点击已经安装好的 PHP-8.0 软件，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220400527.png\" alt=\"\" /></p>\n<p>然后点击启动，把 PHP-8.0 启起来。接下来点击【安装扩展】，安装以下三个扩展，我已经安装好了，所以是卸载的字样。注意，安装大概要耗费半个小时到一个小时的时间，所以要耐心等待，在此期间喝杯茶吧～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220401460.png\" alt=\"\" /></p>\n<p>然后点击【禁用函数】，把  <code>exec、shell_exec、readlink、symlink、putenv、chown</code>  这六个被禁用的函数删掉，也就是取消禁用。</p>\n<p>接下来就是创建网站了，在左侧导航栏点击【网站】，然后点击添加站点，设置如下，其中域名那里根据自己需求配置，也可以随便写一个，不影响。</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220401714.png\" alt=\"\" /></p>\n<p>点击提交以后，网站就创建好啦。可以点击网站名，配置一下内网访问的端口，如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220402767.png\" alt=\"\" /></p>\n<p>然后在浏览器中输入  <code>http://NAS的内网IP:18891/</code>  出现如下界面就表示内网访问没问题啦～注意我这里是 18891 端口是因为配置 Docker 时我设置了 18891 -&gt; 8891 的端口映射啦，所以访问时要用 18891 端口</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220402517.png\" alt=\"\" /></p>\n<p>然后点击网站的根目录可以跳转到【文件】目录下，然后去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xza3ktb3JnL2xza3ktcHJv\">兰空图床的 GitHub 仓库</span> 下载最新的发行版，但建议和我用的版本保持一致以防接下来的配置出问题，我用的是当前的最新版 v2.1 版本。下载完成后，把压缩包上传到网站目录下，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403662.png\" alt=\"\" /></p>\n<p>然后在安装包上右键解压，解压也需要耗费几分钟的时间，耐心等待一下吧～</p>\n<p>解压完成后就继续配置我们的网站吧～</p>\n<p>配置网站的运行目录为  <code>/public</code> ，并取消防跨站攻击（open_basedir），如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403077.png\" alt=\"\" /></p>\n<p>然后设置伪静态，粘贴如下代码到【伪静态】，如下图</p>\n<pre><code>location / &#123;\n  try_files $uri $uri/ /index.php?$query_string;\n&#125;\n</code></pre>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403847.png\" alt=\"\" /></p>\n<p>还差最后一步，重启 PHP-8.0，如下图，我们的准备工作就完成啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220403575.png\" alt=\"\" /></p>\n<h2 id=\"运行兰空图床\"><a class=\"anchor\" href=\"#运行兰空图床\">#</a> 运行兰空图床</h2>\n<p>完成以上准备工作后，直接在浏览器中输入  <code>http://NAS的内网IP:18891/</code> ，如果看到以下界面，恭喜，我们已经成功了 99% 了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404570.png\" alt=\"\" /></p>\n<p>点击下一步，配置好我们的数据库名称，数据库用户名和密码，以及管理员的账号和密码。其中数据库的相关信息可以在宝塔中查看，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404841.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404911.png\" alt=\"\" /></p>\n<p>配置好后点击立即安装，等待十几秒后，叮咚，出现下面界面，兰空图床安装成功啦</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220404712.png\" alt=\"\" /></p>\n<p>上传一张图片测试下吧</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405172.png\" alt=\"\" /></p>\n<p>上传成功～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405203.png\" alt=\"\" /></p>\n<p>访问也完成没问题，(o ゜▽゜) o☆ BINGO!</p>\n<h2 id=\"其他配置\"><a class=\"anchor\" href=\"#其他配置\">#</a> 其他配置</h2>\n<p>如果熟悉 frp 的小伙伴，就可以用 frp 去做内网穿透，再搭配上自己的域名，就可以实现外网访问啦</p>\n<p>其中 frp 的 Docker 使用论坛里也有大佬写好了教程，顶礼膜拜～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405399.png\" alt=\"\" /></p>\n<p>在配置好内网穿透后，就可以挂载自己的域名进行访问了，下面是我之前在黑群晖上挂载的域名，满满都是成就感～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220405259.png\" alt=\"\" /></p>\n<p>如果在远端云服务器上用宝塔配置了反向代理并且域名使用了 https 的情况下，程序请求静态资源、生成的链接是 http，就会出现如下界面，样式资源丢失</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406629.png\" alt=\"\" /></p>\n<p>解决办法就是在反向代理的配置文件中添加  <code>roxy_set_header X-Forwarded-Proto $scheme;</code></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406087.png\" alt=\"\" /></p>\n<p>更改完后，再次刷新，看到样式在 HTTPS 下也恢复啦～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220406186.png\" alt=\"\" /></p>\n<p>后续还可以玩的就是搭配 PicGo 实现写博客时快速截图并上传到我们自己的图床上啦，可以看看我的这篇教程：<a href=\"https://blog.aayu.today/nas/synology/20220114/\">兰空图床（Lsky）搭配 PicGo 客户端进行图片快速上传</a></p>\n<p>当然，因为我们用的是 V2 版的兰空图床，所以上面那篇教程里用的 PicGo 的插件就不能用了，我们可以换成 hellodk 大佬开发的 lankong 1.1.3 插件，插件的配置教程可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlbGxvZGszNC9waWNnby1wbHVnaW4tbGFua29uZw==\">看这里</span>～</p>\n<p>配置好如下图。这样就可以用 QQ 自带的  <code>Ctrl + Alt + A</code> ，来快速截图，然后用设置好的  <code>Ctrl + Shift + Z</code>  直接将剪切板里的图片上传到我们的极空间里，简直不要太方便～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/202208220411011.png\" alt=\"\" /></p>\n<p>实测外网的环境下，一到两秒就可以将剪切板里的图片上传，速度虽说没有之前在黑群晖里的快，但也是可以接受的～</p>\n<h2 id=\"尾声\"><a class=\"anchor\" href=\"#尾声\">#</a> 尾声</h2>\n<p>在经过一番折腾后，发现在极空间 Docker 宝塔上搭建的兰空图床还是界面反应很慢，相比我之前在黑群晖上搭建的界面响应速度要慢了两三倍，极空间还有很长的路要走呀，在此也希望极空间的开发人员能早日完善 Docker，并开放 Privilege 权限，这样可玩性才会越高，也能吸引更多爱折腾的人来玩机～</p>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmxza3kucHJvL2RvY3MvZnJlZS92Mi8=\">兰空图床官网教程</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xza3ktb3JnL2xza3ktcHJv\">兰空图床官方 GitHub 仓库</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mzk2NTQ1NjI=\">【保姆级教程】兰空图床 (Lskypro) 的宝塔面板安装教程</span></li>\n</ul>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "Lsky",
                "PicGo",
                "极空间"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220730/",
            "url": "https://blog.aayu.today/algorithm/dp/20220730/",
            "title": "动态规划：乘积为正数的最长子数组长度",
            "date_published": "2022-07-30T15:25:21.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/140d9bd313226.png\" alt=\"\" /></p>\n<h2 id=\"思路和题解\"><a class=\"anchor\" href=\"#思路和题解\">#</a> 思路和题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>哈哈哈，这类型题感觉已经渐渐找到诀窍了，实际上就是要分情况讨论，乘积为正数的最长子数组，可以分为若当前 i 是正数，那就要找 i-1 乘积为正数的最大长度；若当前 i 为负数，那就要找 i-1 乘积为负数的最大长度。所以我们就要维护两个数组～～</p>\n<p>虽然我已经解出这道题了，但维护两个数组应该还可以再优化一下，和前面的题类型，应该能用滚动数组将空间复杂度从 O (n) 优化到 O (1)，但最近要在外面出差有点忙，所以只能放到以后再优化了，后面的题也只能抽时间再刷～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLen</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">pos</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">neg</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> neg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                neg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> neg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220729/",
            "url": "https://blog.aayu.today/algorithm/dp/20220729/",
            "title": "动态规划：乘积最大子数组",
            "date_published": "2022-07-29T08:36:44.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/bb95c6f7d1edc.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这道题很容易陷入一个死胡同，可惜，我就陷入了～</p>\n<p><code>[2,-5,-2,-4,3]</code>  这组测试数据就很那啥，如果以我们人脑来思考，我们可以在大脑里运算一遍得出最大乘机是 24，但如果要写代码的话，在从左往右遍历的过程中，又该如何判断要放弃次最大的 20，也就是  <code>2,-5,-2</code> ，从而选择  <code>-2,-4,3</code>  呢，这不就只能用暴力求解吗，我就陷入了这样的死胡同</p>\n<p>看了官方题解后，我才明白关键的点在哪里，就是要分情况讨论啊，啊啊啊，因为有负号的干扰，所以我们还要多考虑一种情况，就是当前 i 如果是一个负数的话，那我就要找 i 前面的最小值，负负得正，从而也有可能问鼎最大值，所以就要维护最大子数组值和最小子数组值，这才是本题的关键呐！</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxProduct</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> mn <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 此题的关键就在于要维护一个最小的子数组乘机</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> mn <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            prev <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728-3/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728-3/",
            "title": "动态规划：环形子数组的最大和",
            "date_published": "2022-07-28T16:32:01.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/62151223a64ec.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>真的是不得不服，我只能想到双重 for 循环滚动求解环形数组，结果果不其然，时间是超时的，我真的想不出其他思路了，只能去求助官方题解了，谁知官方题解不说人话，就在我继续逛评论区时，看到惊为天人的思路，真的是不得不服，再次感叹呐</p>\n<blockquote>\n<p>直接两种情况，1：最大数组和在中间，和平时一样解法 2：最大数组和是跨越头尾，回头了， 麻烦第二种，从两边出发往中间靠拢必须都是最大，那就说明中间段就是最小，找最小不就行了</p>\n</blockquote>\n<p>学无止境，自己要学的东西还有很多啊～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"惊为天人的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubarraySumCircular</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 情况 1 最大段就在中间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 情况 2 最大段跨越首位，那就说明最小段在中间，太牛逼了这个想法，真的顶礼膜拜</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mi <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            mi <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            sum <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> mx2 <span class=\"token operator\">=</span> sum <span class=\"token operator\">-</span> mi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 返回最大值，我还是笨呐，这里要判断 mx2 是否为 0 了，如果为 0，就表示全是负数，那就返回 mx</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> mx2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> mx <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> mx2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728-2/",
            "title": "动态规划：最大子数组和",
            "date_published": "2022-07-28T15:34:32.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/99a09f0daa35d.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这个题真是我的克星啊，不知道为什么，我脑子一直转不过弯来，总是会想着，要是中间有个小的负数把可以合成一个更大的连续数组隔开了怎么办，该怎么判断，我就一直死脑筋卡在这里了，感觉我也是有点笨笨的，呜呜呜～</p>\n<p>但言归正传，看了官方题解后，发现我就真是没转过那个弯来，你就管他是不是一个小负数会把更大的数组隔开，反正只要判断当前数的前面，前面数组的连续和是否对该数有帮助不就行了，有帮助我就收为我有（nums [i] + prev），没有帮助我就另起炉灶（nums [i]），然后再判断我另起炉灶的数和已知的最大和谁大，不断更新最大和就行了，啊啊啊啊，我真是笨呐，为什么这个弯我就没有转过来，我需要老婆的安慰呜呜呜～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// return dp(nums);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">greedy</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">greedy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//prev 是轮询连续数组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//mx 维护最大的一个连续数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            prev <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> mx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220728/",
            "url": "https://blog.aayu.today/algorithm/dp/20220728/",
            "title": "动态规划：删除并获得点数",
            "date_published": "2022-07-28T06:10:36.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/d97de25bc78ba.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这题我承认我没有解出来，还是看了官方题解后才有思路的 🤣 怎么说呢，这道题如果你能转过弯，把它映射到我们前几道题所做的<a href=\"https://blog.aayu.today/algorithm/dp/20220726-2/\">打家劫舍</a>上，那这个题就很简单啦，关键就在于如何把这个题转换为打家劫舍～</p>\n<p>再看一遍题干， <code>你必须删除所有等于 nums[i] - 1 和 nums[i] + 1 的元素</code> ，意思不就是如果我们要获取 nums [i] 房屋的财产，那就不能获取 nums [i] 相邻两间房屋的财产了，所以我们的思路就是要把相同点数 i 累加起来，作为 nums [i] 的财产值，然后再用打家劫舍的滚动数组就可以啦</p>\n<p>再次感叹一句，思路才是最重要和最宝贵的呀～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">deleteAndEarn</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> mv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mv <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>mv <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> sum<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727-3/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727-3/",
            "title": "动态规划：跳跃游戏 II",
            "date_published": "2022-07-27T13:39:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/347287e2a581a.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>比上一题多加了一些条件，但动态规划的思想不变，都是先求解子问题（小问题），然后逐步求解出一个复杂的问题（大问题）~</p>\n<p>上一题我们可以知道在当前 i 处能走到的最大距离，所以稍微一思考，只要后面走的距离在这最大距离之内，步数都不变；只有能走的最大距离不能满足 i 了，才把步数加一，同时更新 i 处能走到的最大距离，是不是很 easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token operator\">++</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                limit <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            m <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727-2/",
            "title": "动态规划：跳跃游戏",
            "date_published": "2022-07-27T12:08:12.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/70c6e9786b6a9.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>经过前面几道题的熏陶，这类题感觉已经挺熟练了，动态规划就是先求解子问题，比如说一个长数组，我们先不要看那么多元素，可以就从有一个元素开始往后遍历求解，最后就可以求出一个复杂问题的答案了～～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/6f3ec80ba5fb0.png\" alt=\"\" /></p>\n<p>但是这题应该还有好多其他解法，比如说深度优先搜索应该也算一种，一直往前冲，冲不动了就回退，然后再往前冲～～</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> limit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            limit <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> limit <span class=\"token operator\">>=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220727/",
            "url": "https://blog.aayu.today/algorithm/dp/20220727/",
            "title": "动态规划：打家劫舍 II",
            "date_published": "2022-07-27T11:29:24.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/99608969451b1.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这道题看起来不难，不就在上一道题的基础上添加了首尾房间相邻的限制吗，但我尝试解了三次都失败了，太丢人了 🤣</p>\n<p>悄咪咪的看了一下题解，一句关键的话语瞬间就扩展了我的思路</p>\n<blockquote>\n<p>如何才能保证第一间房屋和最后一间房屋不同时偷窃呢？如果偷窃了第一间房屋，则不能偷窃最后一间房屋，因此偷窃房屋的范围是第一间房屋到最后第二间房屋；如果偷窃了最后一间房屋，则不能偷窃第一间房屋，因此偷窃房屋的范围是第二间房屋到最后一间房屋。</p>\n</blockquote>\n<p>原来如此，我之前一直钻在当计算到最后一间房屋的时候，如何知道第一件房间到底是抢了还是没抢，就一直加条件去判断，结果越加越繁琐，繁琐了还不对</p>\n<p>看到题解的这句话我就恍然大悟了，我真是笨呐，第一件房和最后一间房不能同时考虑，那我就用两个 for 循环去计算就好啦，三下五除二，五分钟写完，一次性通过～</p>\n<p>果然，思路才是最重要的！</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 先计算排除最后一间房的价格</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> r1 <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 再计算排除第一间房的价格</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220726-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220726-2/",
            "title": "动态规划：打家劫舍",
            "date_published": "2022-07-26T11:31:14.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/0e8e6d5a53f8d.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>和前面题的思路蛮像的，关键在于比大小，因为题目有不能偷盗相邻的两个房间的限制，所以比大小的关键就是  <code>max(dp[i-1], dp[i-2] + nums[i])</code> ，dp [i] 就表示新增了第 i 个房间后的最大收益，所以如果我第 i 个房间不偷，我能得到的最大收益就是 dp [i-1]；如果我第 i 个房间偷了，那我 i-1 房间就不能偷了，所以我能得的最大收益就是 dp [i-2] + nums [i]，是不是很 easy~~</p>\n<p>当然啦，再稍微思考一下，可以用滚动数组把空间复杂度优化为 O (1)</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"优化题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220726/",
            "url": "https://blog.aayu.today/algorithm/dp/20220726/",
            "title": "动态规划：使用最小花费爬楼梯",
            "date_published": "2022-07-25T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/035f513090ae2.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>这个题目描述的比较绕，如果有纸和笔的话，在纸上画一画会好很多，比如我胡乱画的如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/4416d31f461c5.jpg\" alt=\"\" /></p>\n<p>看了官方题解，思路才比较清晰了</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/6e507951fe249.png\" alt=\"\" /></p>\n<p>上述代码的时间复杂度和空间复杂度都是 O (n)。但也可以用滚动数组的方式将空间复杂度优化到 O (1)</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minCostClimbingStairs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        res<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> cost<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            r1 <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">//r2 = res[i-1] + cost[i-1] + cost[i];</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            r2 <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r1 <span class=\"token operator\">&lt;</span> r2 <span class=\"token operator\">?</span> r1 <span class=\"token operator\">:</span> r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"官方题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minCostClimbingStairs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prev <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            prev <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            curr <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220725-2/",
            "url": "https://blog.aayu.today/algorithm/dp/20220725-2/",
            "title": "动态规划：爬楼梯",
            "date_published": "2022-07-24T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/73d3d92e4a44c.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>n 阶，可以看成是 n-2 阶爬 2 阶后到达，也可以看成是 n-1 阶爬 1 阶后到达，所以就是 n-2 阶的爬取数 + n-1 阶的爬取数，翻译过来就是斐波那契数，easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的题解\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//n 阶，可以看成是 n-2 阶爬 2 阶后到达</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 也可以看成是 n-1 阶爬 1 阶后到达</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 所以就是 n-2 阶的爬取数 + n-1 阶的爬取数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 翻译过来就是斐波那契数，easy</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            q <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            r <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        },
        {
            "id": "https://blog.aayu.today/algorithm/dp/20220725/",
            "url": "https://blog.aayu.today/algorithm/dp/20220725/",
            "title": "动态规划：第N个泰波那契数",
            "date_published": "2022-07-24T16:00:00.000Z",
            "content_html": "<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2022/08/22/b08130d1eee33.png\" alt=\"\" /></p>\n<h2 id=\"思路与题解\"><a class=\"anchor\" href=\"#思路与题解\">#</a> 思路与题解</h2>\n<div class=\"tab\" data-id=\"id1\" data-title=\"思路\">\n<p>和昨天的<a href=\"https://blog.aayu.today/algorithm/dp/20220724/\">斐波那契数</a>思路一样，用滚动数组的思想，关键点在于设置 p、q、t、r 的初值，我们知道，r = p + q + t，第一个要计算的值是 Fn (3)，T_3 = 0 + 1 + 1，这是滚动之后的，所以 p、q、t、r 的初值应该是 0、0、1、1，这样滚动过后才能变成 0、1、1，就能算出 Fn (3) = r = 0 + 1 + 1。Easy~</p>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"我的代码\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">tribonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            q <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            t <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> q <span class=\"token operator\">+</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "数据结构与算法",
                "动态规划",
                "动态规划"
            ]
        }
    ]
}