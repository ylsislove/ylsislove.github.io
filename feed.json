{
    "version": "https://jsonfeed.org/version/1",
    "title": "学无止境",
    "subtitle": "世界上大部分事，都没太大意义。真理与热爱除外",
    "icon": "https://blog.aayu.today/images/favicon.ico",
    "description": "真理和热爱是吾永生的追求",
    "home_page_url": "https://blog.aayu.today",
    "items": [
        {
            "id": "https://blog.aayu.today/skill/miscellaneous/20230702/",
            "url": "https://blog.aayu.today/skill/miscellaneous/20230702/",
            "title": "机械臂学习笔记",
            "date_published": "2023-07-02T13:31:45.000Z",
            "content_html": "<h2 id=\"临摹相同尺寸草图图片\"><a class=\"anchor\" href=\"#临摹相同尺寸草图图片\">#</a> 临摹相同尺寸草图图片</h2>\n<p>在草图编辑状态，点击「 工具 」-&gt;「 草图工具 」-&gt;「 草图图片 」即可导入草图，然后根据尺寸确定缩放关系，将草图移至原点即可</p>\n<h2 id=\"尺寸链\"><a class=\"anchor\" href=\"#尺寸链\">#</a> 尺寸链</h2>\n<p>水平尺寸链或竖直尺寸链，先点击构造线确定原点，再点击其他线确定尺寸。</p>\n<p>右击添加到尺寸链，可以再次打开上次的尺寸链继续添加</p>\n<h2 id=\"尺寸圆弧条件修改\"><a class=\"anchor\" href=\"#尺寸圆弧条件修改\">#</a> 尺寸圆弧条件修改</h2>\n<p>先点击圆弧尺寸，左侧属性栏选择第二栏「 引线 」，在下方修改圆弧条件即可</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/07/02/202307022133282.png\" alt=\"\" /></p>\n<h2 id=\"鼠标笔势由-4-笔势改为-8-笔势\"><a class=\"anchor\" href=\"#鼠标笔势由-4-笔势改为-8-笔势\">#</a> 鼠标笔势由 4 笔势改为 8 笔势</h2>\n<p>点击「 工具 」-&gt; 「 自定义 」-&gt;「 鼠标笔势 」即可切换 4 笔势或 8 笔势，左侧功能列表直接拖拽到右侧即可自定义笔势功能。</p>\n<h2 id=\"制作草图块\"><a class=\"anchor\" href=\"#制作草图块\">#</a> 制作草图块</h2>\n<p>点击「 工具 」-&gt;「 块 」-&gt;「 制作 」，将草图线段框选，即可做成草图块。按住 Ctrl 键拖动块，即可复制一份块</p>\n<h2 id=\"给草图块添加颜色\"><a class=\"anchor\" href=\"#给草图块添加颜色\">#</a> 给草图块添加颜色</h2>\n<p>点击「 编辑 」-&gt;「 外观 」-&gt;「 草图 / 曲线颜色 」</p>\n<h2 id=\"快速完成定义草图\"><a class=\"anchor\" href=\"#快速完成定义草图\">#</a> 快速完成定义草图</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/07/02/202307022134230.png\" alt=\"\" /></p>\n<h2 id=\"分割零件并另存为\"><a class=\"anchor\" href=\"#分割零件并另存为\">#</a> 分割零件并另存为</h2>\n<p>点击「 插入 」-&gt;「 特征 」-&gt;「 分割 」，选择切割线，点击被切割的两个实体，确认即可</p>\n<p>在实体上右击，选择「 删除 / 保留实体 」，对两个零件进行另存为</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/07/02/202307022134252.png\" alt=\"\" /></p>\n<h2 id=\"装配体插入零件时的固定与浮动\"><a class=\"anchor\" href=\"#装配体插入零件时的固定与浮动\">#</a> 装配体插入零件时的固定与浮动</h2>\n<p>插入第一个零件时，直接点击确定键，这样可以使第一个零件的坐标系与装配体坐标系一致，零件会被固定且无法移动</p>\n<p>插入第二个零件直接选中零件再拖动到装配体视窗中，这样插入的零件就是浮动的，即可以被拖动</p>\n<p>持续更新中...</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "杂七杂八",
                "SolidWorks"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/tools/20230523/",
            "url": "https://blog.aayu.today/skill/tools/20230523/",
            "title": "Docker部署chatgpt_academic",
            "date_published": "2023-05-23T14:26:38.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>如果你是一个搞学术的人，相信你一定会爱上这款大杀器～</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一键润色</td>\n<td>支持一键润色、一键查找论文语法错误</td>\n</tr>\n<tr>\n<td>一键中英互译</td>\n<td>一键中英互译</td>\n</tr>\n<tr>\n<td>一键代码解释</td>\n<td>显示代码、解释代码、生成代码、给代码加注释</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTRzNHkxRTdqTg==\">自定义快捷键</span></td>\n<td>支持自定义快捷键</td>\n</tr>\n<tr>\n<td>模块化设计</td>\n<td>支持自定义强大的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3RyZWUvbWFzdGVyL2NyYXp5X2Z1bmN0aW9ucw==\">函数插件</span>，插件支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3dpa2kvJUU1JTg3JUJEJUU2JTk1JUIwJUU2JThGJTkyJUU0JUJCJUI2JUU2JThDJTg3JUU1JThEJTk3\">热更新</span></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNqNDExQTdWVw==\">自我程序剖析</span></td>\n<td>[函数插件] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3dpa2kvY2hhdGdwdC1hY2FkZW1pYyVFOSVBMSVCOSVFNyU5QiVBRSVFOCU4NyVBQSVFOCVBRiU5MSVFOCVBNyVBMyVFNiU4QSVBNSVFNSU5MSU4QQ==\">一键读懂</span>本项目的源代码</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNqNDExQTdWVw==\">程序剖析</span></td>\n<td>[函数插件] 一键可以剖析其他 Python/C/C++/Java/Lua/... 项目树</td>\n</tr>\n<tr>\n<td>读论文、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtUNDExeDdXbg==\">翻译</span>论文</td>\n<td>[函数插件] 一键解读 latex/pdf 论文全文并生成摘要</td>\n</tr>\n<tr>\n<td>Latex 全文<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW5rNHkxWTdKcy8=\">翻译</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZUNDExSDdjNS8=\">润色</span></td>\n<td>[函数插件] 一键翻译或润色 latex 论文</td>\n</tr>\n<tr>\n<td>批量注释生成</td>\n<td>[函数插件] 一键批量生成函数注释</td>\n</tr>\n<tr>\n<td>Markdown<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlvNHkxNTdqVi8=\"> 中英互译</span></td>\n<td>[函数插件] 看到上面 5 种语言的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL2Jsb2IvbWFzdGVyL2RvY3MvUkVBRE1FX0VOLm1k\"> README</span> 了吗？</td>\n</tr>\n<tr>\n<td>chat 分析报告生成</td>\n<td>[函数插件] 运行后自动生成总结汇报</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtUNDExeDdXbg==\">PDF 论文全文翻译功能</span></td>\n<td>[函数插件] PDF 论文提取题目 &amp; 摘要 + 翻译全文（多线程）</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxNNHkxMjc5WA==\">Arxiv 小助手</span></td>\n<td>[函数插件] 输入 arxiv 文章 url 即可一键翻译摘要 + 下载 PDF</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTlMNDExVTdpYQ==\">谷歌学术统合小助手</span></td>\n<td>[函数插件] 给定任意谷歌学术搜索页面 URL，让 gpt 帮你<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUdQNDExVTdBei8=\">写 relatedworks</span></td>\n</tr>\n<tr>\n<td>互联网信息聚合 + GPT</td>\n<td>[函数插件] 一键<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW9tNHkxMjdjaw==\">让 GPT 先从互联网获取信息</span>，再回答问题，让信息永不过时</td>\n</tr>\n<tr>\n<td>公式 / 图片 / 表格显示</td>\n<td>可以同时显示公式的<span class=\"exturl\" data-url=\"aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vOTYxOTIxOTkvMjMwNTk4ODQyLTFkN2ZjZGRkLTgxNWQtNDBlZS1hZjYwLWJhZjQ4OGExOTlkZi5wbmc=\"> tex 形式和渲染形式</span>，支持公式、代码高亮</td>\n</tr>\n<tr>\n<td>多线程函数插件支持</td>\n<td>支持多线调用 chatgpt，一键处理<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZUNDExSDdjNS8=\">海量文本</span>或程序</td>\n</tr>\n<tr>\n<td>启动暗色 gradio<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL2lzc3Vlcy8xNzM=\"> 主题</span></td>\n<td>在浏览器 url 后面添加 <code>/?__theme=dark</code>  可以切换 dark 主题</td>\n</tr>\n</tbody>\n</table>\n<p>详细介绍参见官方仓库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWM=\">binary-husky/chatgpt_academic</span></p>\n<h2 id=\"极空间部署\"><a class=\"anchor\" href=\"#极空间部署\">#</a> 极空间部署</h2>\n<h3 id=\"下载镜像\"><a class=\"anchor\" href=\"#下载镜像\">#</a> 下载镜像</h3>\n<p>在仓库中搜索我的用户名 <code>ylsislove</code> ，选择 <code>gpt_academic</code> ，下载最新版本即可</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232159957.png\" alt=\"\" /></p>\n<h3 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h3>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232200256.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232201849.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232202385.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232203871.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232205799.png\" alt=\"\" /></p>\n<ul>\n<li><code>API_EKY</code> ：你的 OpenAI API Key，可同时填写多个 API-KEY，用英文逗号分割，例如 sk-openaikey1,sk-openaikey2,fkxxxx-api2dkey1,fkxxxx-api2dkey2</li>\n<li><code>DEFAULT_WORKER_NUM</code> ：多线程函数插件中，默认允许多少路线程同时访问 OpenAI。Free trial users 的限制是每分钟 3 次，Pay-as-you-go users 的限制是每分钟 3500 次。一言以蔽之：免费用户填 3，OpenAI 绑了信用卡的用户可以填 16 或者更高。提高限制请查询：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JhdGUtbGltaXRzL292ZXJ2aWV3\">https://platform.openai.com/docs/guides/rate-limits/overview</span></li>\n<li><code>LAYOUT</code> ：LEFT-RIGHT（左右布局）TOP-DOWN（上下布局）</li>\n<li><code>WEB_PORT</code> ：网页的端口，注意要和端口配置里的容器端口相同</li>\n<li><code>AUTHENTICATION</code> ：设置用户名和密码，例如 <code>[(&quot;root&quot;, &quot;123456&quot;)]</code> ，可配置多个</li>\n<li https:api.openai.comv1chatcompletions:在这里填写重定向的api.openai.com的URL=\"\"><code>API_URL_REDIRECT</code> ：重新 URL 重新定向，实现更换 API_URL 的作用。例如：</li>\n</ul>\n<p>更多参数配置参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWMvYmxvYi9tYXN0ZXIvY29uZmlnLnB5\">gpt_academic/config.py</span></p>\n<p>例如，如果你有自己的网络代理，那么就可以不用配置 <code>API_URL_REDIRECT</code> ，直接配置 <code>USE_PROXY</code>  为 <code>True</code> ，然后配置 <code>proxies</code>  为你的代理地址即可，如 <code>&#123; &quot;http&quot;: &quot;socks5h://localhost:10880&quot;, &quot;https&quot;: &quot;socks5h://localhost:10880&quot;, &#125;</code> ，参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWMvYmxvYi9tYXN0ZXIvZG9ja2VyLWNvbXBvc2UueW1s\">gpt_academic/docker-compose.yml</span></p>\n<p>完成以上配置后，直接点击运行即可～</p>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<p>在浏览器输入 <code>http://极空间IP地址:28890</code> ，出现如下界面，配置成功～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232217181.png\" alt=\"\" /></p>\n<p>输入配置的用户名和密码，即可进入主界面，试用下 <code>[插件demo] 历史上的今天</code> ，完美运行～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/05/23/202305232220615.png\" alt=\"\" /></p>\n<p>接下来愉快的玩耍吧～</p>\n<h2 id=\"局限性\"><a class=\"anchor\" href=\"#局限性\">#</a> 局限性</h2>\n<p>Docker 部署因为没有高性能显卡的支持，所以只能使用 <code>chatgpt</code> ， <code>newbing</code>  等远程服务，不支持官方仓库里的 <code>ChatGLM</code> 、 <code>LLAMA</code> 、 <code>盘古</code> 、 <code>RWKV</code>  等本地模型。</p>\n<h2 id=\"致谢\"><a class=\"anchor\" href=\"#致谢\">#</a> 致谢</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWM=\">gpt_academic</span></li>\n</ul>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "工具篇",
                "ChatGPT"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-7/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-7/",
            "title": "思源笔记源码解析之kernel篇（十）model",
            "date_published": "2023-04-06T13:28:36.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p>SiYuan 是一款知识管理笔记软件，用户可以使用它来制作 Markdown 笔记、管理知识图谱以及进行 OCR 扫描等操作。系统通过分块、分组等方式实现了一些特色功能，如闪卡复习、块级内联属性、虚拟引用等，同时支持多端同步（包括云同步和局域网同步）。</p>\n<p>以下是 model 目录下各个文件的功能列表：</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ai.go</td>\n<td>识别文字中的自然语言问题，并返回问题答案</td>\n</tr>\n<tr>\n<td>appearance.go</td>\n<td>更新程序外观</td>\n</tr>\n<tr>\n<td>assets.go</td>\n<td>删除未使用的图片资源</td>\n</tr>\n<tr>\n<td>assets_watcher.go</td>\n<td>启动监听资源文件夹的 Goroutine</td>\n</tr>\n<tr>\n<td>assets_watcher_darwin.go</td>\n<td>Darwin 平台上资源文件夹的监听器</td>\n</tr>\n<tr>\n<td>attribute_view.go</td>\n<td>处理属性视图</td>\n</tr>\n<tr>\n<td>backlink.go</td>\n<td>实现笔记本和笔记的链接、反链、提及等功能</td>\n</tr>\n<tr>\n<td>bazzar.go</td>\n<td>集成程序的更新和发布等管理功能</td>\n</tr>\n<tr>\n<td>block.go</td>\n<td>处理文本块相关逻辑</td>\n</tr>\n<tr>\n<td>blockial.go</td>\n<td>处理块级内联属性</td>\n</tr>\n<tr>\n<td>blockinfo.go</td>\n<td>处理块的信息</td>\n</tr>\n<tr>\n<td>bookmark.go</td>\n<td>处理书签相关逻辑</td>\n</tr>\n<tr>\n<td>box.go</td>\n<td>实现笔记本的相关功能</td>\n</tr>\n<tr>\n<td>conf.go</td>\n<td>程序配置相关的函数和结构体</td>\n</tr>\n<tr>\n<td>css.go</td>\n<td>用于管理 CSS 相关处理</td>\n</tr>\n<tr>\n<td>export.go</td>\n<td>处理笔记数据的导出</td>\n</tr>\n<tr>\n<td>export_katex.go</td>\n<td>处理数学公式的导出</td>\n</tr>\n<tr>\n<td>export_merge.go</td>\n<td>合并导出文档</td>\n</tr>\n<tr>\n<td>file.go</td>\n<td>对文档的计数</td>\n</tr>\n<tr>\n<td>flashcard.go</td>\n<td>处理闪卡复习相关逻辑</td>\n</tr>\n<tr>\n<td>format.go</td>\n<td>处理笔记数据的格式化</td>\n</tr>\n<tr>\n<td>graph.go</td>\n<td>绘制笔记之间的关系图</td>\n</tr>\n<tr>\n<td>heading.go</td>\n<td>标题块和文档块相互转换</td>\n</tr>\n<tr>\n<td>history.go</td>\n<td>处理笔记数据的历史记录</td>\n</tr>\n<tr>\n<td>import.go</td>\n<td>数据导入处理逻辑</td>\n</tr>\n<tr>\n<td>index.go</td>\n<td>处理笔记文档的检索</td>\n</tr>\n<tr>\n<td>index_fix.go</td>\n<td>订正索引</td>\n</tr>\n<tr>\n<td>liandi.go</td>\n<td>处理 Liandi 同步相关逻辑</td>\n</tr>\n<tr>\n<td>listitem.go</td>\n<td>将列表项转化为文档</td>\n</tr>\n<tr>\n<td>mount.go</td>\n<td>处理笔记本的一些基本操作</td>\n</tr>\n<tr>\n<td>ocr.go</td>\n<td>处理 OCR 相关功能</td>\n</tr>\n<tr>\n<td>outline.go</td>\n<td>处理文档的大纲模式</td>\n</tr>\n<tr>\n<td>path.go</td>\n<td>处理文件路径相关的操作</td>\n</tr>\n<tr>\n<td>process.go</td>\n<td>处理运行时进程的相关信息</td>\n</tr>\n<tr>\n<td>render.go</td>\n<td>将块中的块引用和嵌入 SQL 查询转换为 Markdown 字符串</td>\n</tr>\n<tr>\n<td>repository.go</td>\n<td>处理笔记相关的快照、数据同步、快照恢复</td>\n</tr>\n<tr>\n<td>search.go</td>\n<td>处理块节点树</td>\n</tr>\n<tr>\n<td>session.go</td>\n<td>处理用户登录相关逻辑</td>\n</tr>\n<tr>\n<td>snippet.go</td>\n<td>处理片段相关逻辑</td>\n</tr>\n<tr>\n<td>storage.go</td>\n<td>线程安全的本地存储逻辑</td>\n</tr>\n<tr>\n<td>sync.go</td>\n<td>处理同步相关逻辑</td>\n</tr>\n<tr>\n<td>tag.go</td>\n<td>处理标签相关逻辑</td>\n</tr>\n<tr>\n<td>template.go</td>\n<td>添加块级内联属性节点</td>\n</tr>\n<tr>\n<td>transaction.go</td>\n<td>实现事务处理</td>\n</tr>\n<tr>\n<td>tree.go</td>\n<td>处理笔记本树形结构相关逻辑</td>\n</tr>\n<tr>\n<td>updater.go</td>\n<td>处理程序更新相关逻辑</td>\n</tr>\n<tr>\n<td>upload.go</td>\n<td>用于请求中解析 multipart 表单，接收键值对或具有一个或多个文件的部分</td>\n</tr>\n<tr>\n<td>virtualref.go</td>\n<td>实现虚拟引用</td>\n</tr>\n<tr>\n<td>widget.go</td>\n<td>处理块级小部件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"049-aigo\"><a class=\"anchor\" href=\"#049-aigo\">#</a> [0/49] ai.go</h2>\n<p>该程序文件实现了 model 包中的 ChatGPT 和 ChatGPTWithAction 函数，这两个函数用于调用 GPT 模型来进行对话。ChatGPT 函数用于一般情况的对话，ChatGPTWithAction 函数用于针对某个动作的对话。</p>\n<p>程序中还定义了一个 ChatGPTContinueWrite 函数，用于依次发送多次请求，最终得到所有生成文字的整合结果。在具体实现上，程序通过判断是否开启了 GPT 的 API，来决定是否进行对话。</p>\n<p>如果开启了 GPT 的 API，程序接着根据消息和前几次对话内容，调用 GPT 模型得到生成文字。另外还包括了一些辅助函数，用于从给定的区块 ID 中获取对应区块的内容，并将其转换为标准化的 Markdown 文本。</p>\n<h2 id=\"149-appearancego\"><a class=\"anchor\" href=\"#149-appearancego\">#</a> [1/49] appearance.go</h2>\n<p>该文件是 SiYuan 笔记的一个模块，用于程序外观的管理和初始化。程序在初始化时，会创建必要的外观相关文件夹，并将资源文件等拷贝到这些文件夹下。</p>\n<p>程序还会加载已经存在的主题（包括 UI 和图标），并启动文件监测。如果检测到主题或 UI 有变动，程序会重新加载相应的主题或 UI 文件，并刷新程序外观。</p>\n<h2 id=\"249-assetsgo\"><a class=\"anchor\" href=\"#249-assetsgo\">#</a> [2/49] assets.go</h2>\n<p>该文件定义了一系列与 SiYuan 笔记的图片资源处理相关的函数，主要包括将网络图片转换为本地图片、搜索图片资源、获取图片的绝对路径等等。其中</p>\n<ul>\n<li><code>NetImg2LocalAssets</code>  函数用于将指定笔记的网络图片转换为本地图片，并将转换后的图片的链接在笔记中进行替换。</li>\n<li><code>DocImageAssets</code>  函数用于从指定笔记中获取所有的图片资源的链接。</li>\n<li><code>GetAssetAbsPath</code>  函数用于获取指定图片资源的绝对路径。</li>\n<li><code>UploadAssets2Cloud</code>  函数用于将指定笔记中的所有图片资源上传至云端图床。</li>\n<li><code>RemoveUnusedAssets</code>  函数用于删除未使用的图片资源。</li>\n</ul>\n<h2 id=\"349-assets_watchergo\"><a class=\"anchor\" href=\"#349-assets_watchergo\">#</a> [3/49] assets_watcher.go</h2>\n<p>该程序文件是一个 Go 语言的代码文件，文件名为  <code>assets_watcher.go</code> ，位于  <code>model.zip.extract\\model</code>  目录下。</p>\n<p>该文件实现了  <code>model</code>  包中的  <code>WatchAssets()</code>  函数和  <code>CloseWatchAssets()</code>  函数，用于监控系统中的资源文件夹的变化并进行处理。具体包括以下内容：</p>\n<ol>\n<li>\n<p>该文件使用了  <code>fsnotify</code>  包，创建了一个  <code>fsnotify.Watcher</code>  实例，用于监听系统中资源文件夹的变化。如果监听出错，会打印日志。</p>\n</li>\n<li>\n<p>通过  <code>watchAssets()</code>  函数开启一个 goroutine 来监听资源文件夹的变化。具体包括以下内容：</p>\n<ol>\n<li>创建  <code>timer</code>  实例和  <code>lastEvent</code>  变量。</li>\n<li>通过  <code>select</code>  语句监听事件和错误的 channel，实现事件和错误的处理。</li>\n<li>当接收到事件时，通过  <code>timer</code>  延迟 100ms 再处理事件。如果在延迟期间又接收到新事件，会重新计时。</li>\n<li>如果事件的操作类型为  <code>fsnotify.Write</code> ，说明有文件被修改了，则调用  <code>IncSync()</code>  函数将修改添加到云端同步。</li>\n<li>重新缓存资源文件，以便使用  <code>/资源</code>  搜索。</li>\n</ol>\n</li>\n<li>\n<p><code>WatchAssets()</code>  函数用于启动监听资源文件夹的 goroutine。</p>\n</li>\n<li>\n<p><code>CloseWatchAssets()</code>  函数用于关闭资源文件夹的监听器。</p>\n</li>\n</ol>\n<h2 id=\"449-assets_watcher_darwingo\"><a class=\"anchor\" href=\"#449-assets_watcher_darwingo\">#</a> [4/49] assets_watcher_darwin.go</h2>\n<p>该程序文件名为 assets_watcher_darwin.go，属于 Go 语言编写的 SiYuan 笔记的资产监视器模块。</p>\n<p>它通过使用观察器实现对 SiYuan 笔记资产目录（assets）的监视，当文件发生更改时自动进行同步，同时重新缓存资源文件，以便使用 / 资源 搜索。</p>\n<p>该模块通过使用 watcher 包和 filepath 包实现对资产目录的监视，启动和关闭资产监视器等相关操作。 该模块只对 Darwin 系统版本（如 macOS）有效，因此包含了  <code>//go:build darwin</code>  编译指令。</p>\n<h2 id=\"549-attribute_viewgo\"><a class=\"anchor\" href=\"#549-attribute_viewgo\">#</a> [5/49] attribute_view.go</h2>\n<p>该程序文件主要实现了一个笔记应用中的属性视图相关功能。其中涉及到的函数包括：</p>\n<ol>\n<li>RenderAttributeView：渲染属性视图，返回对应的 DOM 结构。</li>\n<li>doInsertAttrViewBlock：向属性视图中添加块。</li>\n<li>doRemoveAttrViewBlock：从属性视图中删除块。</li>\n<li>doAddAttrViewColumn：向属性视图中添加属性列。</li>\n<li>doRemoveAttrViewColumn：从属性视图中删除属性列。</li>\n<li>addAttributeViewColumn：向属性视图中添加指定类型的属性列。</li>\n<li>removeAttributeViewColumn：从属性视图中删除指定属性列。</li>\n<li>removeAttributeViewBlock：从属性视图中删除指定块。</li>\n<li>addAttributeViewBlock：向属性视图中添加指定块，并为块添加属性。</li>\n</ol>\n<p>其中的 av 包提供了属性视图的解析、序列化和持久化等功能。文件中还引用了其他的包和库，如 lute、parse、treenode、sql 等。</p>\n<p>总的来说，该程序文件实现了属性视图相关的操作，为笔记应用提供了可供使用的功能。</p>\n<h2 id=\"649-backlinkgo\"><a class=\"anchor\" href=\"#649-backlinkgo\">#</a> [6/49] backlink.go</h2>\n<p>该程序文件为 siyuan-note 中的一个后端代码文件，主要包含 RefreshBacklink、GetBackmentionDoc、GetBacklinkDoc、GetBacklink2 和 GetBacklink 等函数。</p>\n<p>其中，RefreshBacklink 主要用于更新引用关系，GetBackmentionDoc 和 GetBacklinkDoc 函数用于获取提及关系和引用关系，GetBacklink2 和 GetBacklink 函数用于获取链接和反链关系。这些函数都涉及到 sql 操作和解析树操作，主要是用于在 siyuan-note 中实现笔记本和笔记的链接、反链、提及等功能。</p>\n<h2 id=\"749-bazzargo\"><a class=\"anchor\" href=\"#749-bazzargo\">#</a> [7/49] bazzar.go</h2>\n<p>该程序文件是一个实现了一系列从社区中心获取插件的功能函数集合，函数包括获取插件 README、获取插件组件、安装插件组件、卸载插件组件等。</p>\n<p>其中调用了一些已有的函数库以实现具体功能。同时，该程序文件基于开源协议发布。</p>\n<h2 id=\"849-blockgo\"><a class=\"anchor\" href=\"#849-blockgo\">#</a> [8/49] block.go</h2>\n<p>该文件实现了一个名为  <code>Block</code>  的结构体和这个结构体的一些操作函数。这个结构体描述了一个特定  <code>content block</code> （即 siyuan 笔记中的一个块）。它有许多字段，包括路径、id、名字、别名、内容和子结构等。</p>\n<p>同时，这个文件还实现了一些函数，如  <code>RecentUpdatedBlocks()</code> ，它可以返回最近更新的 30 个块的信息，可以用来供笔记首页的构建； <code>GetBlock(id string, tree *parse.Tree)</code> ，它可以根据一个块的 id 来导出这个块的具体内容和信息。</p>\n<h2 id=\"949-blockialgo\"><a class=\"anchor\" href=\"#949-blockialgo\">#</a> [9/49] blockial.go</h2>\n<p>该程序文件是在 model 目录下，文件名为 blockial.go。它实现了处理 SiYuan 笔记块属性的相关函数，包括设置和获取笔记块的属性、清除笔记块的属性等，其中还包括处理笔记块提醒事件的函数等。具体实现过程中，该文件引入了多个第三方库和其他模块中的函数。</p>\n<h2 id=\"1049-blockinfogo\"><a class=\"anchor\" href=\"#1049-blockinfogo\">#</a> [10/49] blockinfo.go</h2>\n<p>该程序文件是一个 Go 语言编写的模块，它定义了 BlockInfo 结构体，用于存储块的元信息。它还定义了若干个函数用于获取块信息、块路径信息等。</p>\n<p>其中获取块信息的函数是 GetDocInfo，它调用 loadTreeByBlockID 方法获取给定 ID 的块的 Tree，然后从 Tree 中取得块的相应属性（如 Name、RefCount、SubFileCount、RefIDs 等）并构造 BlockInfo 结构体。</p>\n<p>其他函数则都是从给定的块或节点信息中提取块的相关信息，例如 GetBlockRefText 用于获取块的引用文本，GetBlockIndex 用于获取块在文档中的索引位置，BuildBlockBreadcrumb 用于构造块的面包屑路径。</p>\n<h2 id=\"1149-bookmarkgo\"><a class=\"anchor\" href=\"#1149-bookmarkgo\">#</a> [11/49] bookmark.go</h2>\n<p>该文件是一个 Go 语言编写的模型文件，主要包含了关于标签的数据操作，如删除标签、修改标签、获取标签等。</p>\n<p>其中包含了多个函数，如  <code>RemoveBookmark</code>  用于删除标签，  <code>RenameBookmark</code>  用于修改标签， <code>BookmarkLabels</code>  用于获取现有的标签， <code>BuildBookmark</code>  用于构建标签。该文件还引用了其他 Go 语言库，如  <code>github.com/88250/lute/parse</code>  和  <code>github.com/siyuan-note/siyuan/kernel/cache</code>  等。</p>\n<h2 id=\"1249-boxgo\"><a class=\"anchor\" href=\"#1249-boxgo\">#</a> [12/49] box.go</h2>\n<p>这是一个 Go 语言程序文件，名为 box.go，位于 model 文件夹下。该文件实现了笔记本 Box 的各种操作，如获取笔记本列表、获取或保存笔记本配置、列出或操作笔记本中的文件等。实现了 StatJob 函数用于自动记录笔记本的统计信息，如笔记数、块数、数据大小和资产大小，并推送桌面端可用磁盘空间不足的警告消息。</p>\n<p>同时，程序中也实现了一些工具函数用于处理树形结构。</p>\n<h2 id=\"1349-confgo\"><a class=\"anchor\" href=\"#1349-confgo\">#</a> [13/49] conf.go</h2>\n<p>该程序文件是一个 Go 语言源文件，文件名为 conf.go，位于 model 目录下。程序定义了一个名为 AppConf 的结构体类型，用于存储应用程序的各种配置选项。其中包括日志级别、界面语言列表、文件树、标签、编辑器、导出、关系图、界面布局等。</p>\n<p>程序在初始化时从配置文件中读取这些选项的值，并进行一些修正和初始化工作，最终将 AppConf 对象输出。程序的初始化过程中还进行了语言初始化、本地 IP 获取、网络代理设置等操作。程序依赖于一些第三方库，包括 gulu、lute、locale 等。</p>\n<h2 id=\"1449-cssgo\"><a class=\"anchor\" href=\"#1449-cssgo\">#</a> [14/49] css.go</h2>\n<p>该程序文件是一个模型文件，可以在处理和获取自定义 CSS 颜色方案时使用。代码将自定义颜色方案值写入到全局变量中，以便在其他地方使用。</p>\n<p>主要包含一些读取和写入 CSS 的功能，以及一些与颜色有关的函数等。文件中定义了许多常量和变量，包括颜色的数组以及一个颜色映射。</p>\n<p>该文件主要用于处理主题中的颜色设置，以及在输出 HTML 页面等情况下使用 CSS 策略的基础代码。</p>\n<h2 id=\"1549-exportgo\"><a class=\"anchor\" href=\"#1549-exportgo\">#</a> [15/49] export.go</h2>\n<p>该程序文件是 Go 语言编写的代码，名称为 export.go。包含了 Siyuan 的导出相关功能。</p>\n<p>其中 ExportData () 函数用于将数据导出并压缩成.zip 文件，Export2Liandi () 函数用于将当前文档导出到 Liandi 笔记中，ExportSY (id string)<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zaXF1aGoxaGthNTFiejM5YjdiMjg4YW1tcHlnYTcxMWF3bjViLlNZ\"> 函数用于将当前文档导出为.SY</span> 文件并压缩成.zip 文件，ExportDocx (id, savePath string, removeAssets, merge bool) 函数用于将当前文档导出为 Word 文档，Preview (id string) 函数用于预览当前文档的 HTML 输出。</p>\n<p>此外，文件还包含了其他导出相关的函数。</p>\n<h2 id=\"1649-export_katexgo\"><a class=\"anchor\" href=\"#1649-export_katexgo\">#</a> [16/49] export_katex.go</h2>\n<p>该程序文件是一个 Go 语言编写的 Katex 导出函数。函数主要做的是提取数学表达式中使用的宏，并将其替换为一些占位符。</p>\n<p>此外，该程序还定义了一个字符串切片数组，该数组包含 Katex 支持的函数和操作符列表。函数和操作符列表主要用于判断和处理数学表达式中的函数和操作符。</p>\n<h2 id=\"1749-export_mergego\"><a class=\"anchor\" href=\"#1749-export_mergego\">#</a> [17/49] export_merge.go</h2>\n<p>该程序文件是 Siyuan 笔记应用的一个模块，主要实现了将多个子文档合并成一个文档的功能。</p>\n<p>首先根据根结点生成一个 Block（即文档），然后遍历 Block 的所有子节点，将每个子节点代表的子文档加载成一棵 parse.Tree，然后将子文档中的所有节点插入到根结点指定的插入点之后。</p>\n<p>其中涉及到了 Lute 引擎的使用，以及对文件系统中文档的读取，文档节点的创建和插入等操作。</p>\n<h2 id=\"1849-filego\"><a class=\"anchor\" href=\"#1849-filego\">#</a> [18/49] file.go</h2>\n<p>该程序文件是 siyuan-note 应用的 model 包下的 file.go 文件。该文件实现了一些与文件相关操作的函数，包括获取文件列表、获取文件详情信息、统计文件内容等。</p>\n<p>其中，ListDocTree 函数可以列出指定目录下的所有文档，ContentStat 函数可以统计指定文档的字符数、单词数、图片数、链接数和引用数，BlocksWordCount 函数可以统计指定文档块的字符数、单词数、图片数、链接数和引用数，StatTree 函数可以统计指定文档树的字符数、单词数、图片数、链接数和引用数。</p>\n<h2 id=\"1949-flashcardgo\"><a class=\"anchor\" href=\"#1949-flashcardgo\">#</a> [19/49] flashcard.go</h2>\n<p>该程序文件是 Siyuan 的卡片记忆功能相关代码，主要功能包括卡包的增删改查、卡片的复习、跳过和显示等。</p>\n<p>其中，程序中维护了一个 Decks 变量，它包含了所有卡包，每个卡包有自己的 ID，包含了它所管理的卡片的信息。</p>\n<p>GetNotebookFlashcards 获取某个笔记本中的所有笔记的闪卡记录，GetTreeFlashcards 获取一棵子树中的所有闪卡，GetFlashcards 获取全部卡包中的所有闪卡信息。</p>\n<p>ReviewFlashcard 对应闪卡复习功能，SkipReviewFlashcard 则是记录卡片跳过操作的函数。GetDueFlashcards 函数用于获取所有未复习的卡片，RemoveFlashcardsByCardIDs 用于移除指定卡包中的指定卡片的闪卡历史记录。</p>\n<h2 id=\"2049-formatgo\"><a class=\"anchor\" href=\"#2049-formatgo\">#</a> [20/49] format.go</h2>\n<p>该文件是 SiYuan 笔记应用程序的一部分，文件名为 format.go。</p>\n<p>该文件提供了一个函数用于自动添加空格。它引用了一些来自其他库的函数、变量和结构体，如 Github 上的 gulu、lute 和 render 等。</p>\n<p>具体来说，该文件可以读取一棵树的 JSON 表示，然后合并相邻的同类行级节点，并使用 Lute 引擎将树渲染成 Markdown 格式。然后它启用自动空格，然后使用 Lute 引擎重新格式化树，并将结果保存在一个 JSON 文件中。该代码还实现了一个函数，用于生成历史记录。</p>\n<h2 id=\"2149-graphgo\"><a class=\"anchor\" href=\"#2149-graphgo\">#</a> [21/49] graph.go</h2>\n<p>该文件是 SiYuan 笔记应用程序的一部分。该程序使用 golang 语言编写，主要负责建立笔记关系图。笔记是通过树形结构来管理的，每个节点都表示一个笔记块。</p>\n<p>该程序使用从 SQL 中检索的块数据构建笔记关系图，并链接相关笔记。在此过程中使用了多个结构体，如 “GraphNode”，“GraphLink” 等，它们表示了笔记关系图中的节点和连接线。</p>\n<p>此文件中的函数将 SQL 块数据转换为相应的结构体，并在处理过程中调用其他函数来构建笔记关系图。</p>\n<h2 id=\"2249-headinggo\"><a class=\"anchor\" href=\"#2249-headinggo\">#</a> [22/49] heading.go</h2>\n<p>该程序文件是一个 Go 语言编写的模块，文件名为 heading.go，包含了从标题折叠到文档块之间的转换函数，以及一些与标题、文档块相关的函数。</p>\n<p>文件中包含函数  <code>doFoldHeading</code>  和  <code>doUnfoldHeading</code>  分别用于折叠和展开标题。还包含了函数  <code>Doc2Heading</code>  用于将文档块转换为标题块，函数  <code>Heading2Doc</code>  用于将标题块转换为文档块，以及一些辅助函数。</p>\n<p>这个程序文件实现了标题块与文档块的相互转换。</p>\n<h2 id=\"2349-historygo\"><a class=\"anchor\" href=\"#2349-historygo\">#</a> [23/49] history.go</h2>\n<p>本程序文件主要实现了 siyuan 中文笔记软件中文档历史记录相关的功能，包括自动生成文档历史记录、获取文档历史记录内容、文档历史记录回滚等功能。</p>\n<p>其中，AutoGenerateDocHistory 函数实现了自动生成文档历史记录的功能，该函数会在一定的时间间隔内自动调用 generateDocHistory 函数，对打开的文档生成历史记录。</p>\n<p>generateDocHistory 函数则实现了生成文档历史记录的具体逻辑，包括清除过期的历史记录、对文档生成历史记录并保存到本地等。其他函数则实现了获取与回滚文档历史记录的相关功能。</p>\n<h2 id=\"2449-importgo\"><a class=\"anchor\" href=\"#2449-importgo\">#</a> [24/49] import.go</h2>\n<p>该程序文件主要实现了一些 SiYuan 笔记系统中的数据导入处理逻辑，包含了以下函数：</p>\n<ul>\n<li>HTML2Markdown：将 HTML 字符串转换为 Markdown 字符串。</li>\n<li>ImportSY：将 SiYuan 笔记系统.SY.zip 文件导入到指定位置。</li>\n<li>ImportData：将 SiYuan 笔记系统.Data.zip 文件导入到默认位置。</li>\n</ul>\n<p>其中，ImportSY 函数主要实现处理 .sy.zip 文件导入的逻辑，具体如下：</p>\n<ul>\n<li>解压 zip 文件到一个临时目录；</li>\n<li>读取临时目录下的所有 .sy 文件，解析出它们所对应的树结构，并重新生成每个节点的 ID；</li>\n<li>修改导入后各个 .sy 文件中引用和嵌入的节点 ID；</li>\n<li>重命名临时目录下的 .sy 文件到指定的目标路径，并拷贝其中所包含的资源文件到 data/assets/ 目录下；</li>\n<li>读取 sort.json 文件，合并其中的排序规则，并将其写回到 .siyuan/sort.json 中；</li>\n<li>拷贝所有解析出的 .sy 文件到指定位置，并上传到 SQL 中。</li>\n</ul>\n<p>总的来说，该文件实现了 SiYuan 笔记系统的数据导入处理逻辑。</p>\n<h2 id=\"2549-indexgo\"><a class=\"anchor\" href=\"#2549-indexgo\">#</a> [25/49] index.go</h2>\n<p>该程序文件是 SiYuan 笔记软件的一部分，其中包含了若干函数用于处理笔记的索引和查询。文件中的函数包括：</p>\n<ol>\n<li>Unindex ()：从数据库中删除当前笔记盒的相关索引。</li>\n<li>Index ()：为当前笔记盒创建索引。</li>\n<li>index (boxID string)：实现 Index () 函数的具体过程，从笔记盒中读取所有的 .sy 文件，对每一个文件进行解析，得到笔记树，并对笔记树建立相关索引。</li>\n<li>IndexRefs ()：对笔记牌中所有的引用节点进行处理，创建相应的引用索引。</li>\n<li>IndexEmbedBlockJob ()：对所有的嵌入块进行处理，为嵌入块的查询结果建立相应的索引。</li>\n<li>autoIndexEmbedBlock (embedBlocks []*sql.Block)：实现 IndexEmbedBlockJob () 的具体过程，遍历所有的嵌入块，执行嵌入块的查询操作，并将查询结果建立索引。</li>\n<li>updateEmbedBlockContent (embedBlockID string, queryResultBlocks []*EmbedBlock)：更新嵌入块的内容。</li>\n<li>init ()：订阅一些事件，用于显示程序运行状态。</li>\n</ol>\n<h2 id=\"2649-index_fixgo\"><a class=\"anchor\" href=\"#2649-index_fixgo\">#</a> [26/49] index_fix.go</h2>\n<p>该程序文件主要实现了自动校验数据库索引的功能。包含以下函数：</p>\n<ul>\n<li>FixIndexJob：自动校验与订正数据库索引的入口函数。</li>\n<li>removeDuplicateDatabaseIndex：删除重复的数据库索引。</li>\n<li>resetDuplicateBlocksOnFileSys：重置重复 ID 的块。</li>\n<li>fixBlockTreeByFileSys：通过文件系统订正块树。</li>\n<li>fixDatabaseIndexByBlockTree：通过块树订正数据库索引。</li>\n<li>reindexTreeByUpdated：根据更新时间，重新索引笔记本块树。</li>\n<li>reindexTreeByPath：根据文件 .sy 文件路径，重新索引笔记本块树。</li>\n<li>reindexTree：根据块树 ID，重新索引笔记本块树。</li>\n</ul>\n<p>主要流程是先删除重复的数据库索引，然后通过文件系统订正块树，再通过块树订正数据库索引。通过  <code>reindexTreeByUpdated</code> 、 <code>reindexTreeByPath</code> 、 <code>reindexTree</code>  函数，实现读取块树文件并订正索引的功能。</p>\n<h2 id=\"2749-liandigo\"><a class=\"anchor\" href=\"#2749-liandigo\">#</a> [27/49] liandi.go</h2>\n<p>该程序文件名为 liandi.go，位于 model 文件夹下。该程序提供了与云端相关的一些操作，包括调用机器人进行对话、开始试用、设置云端提醒等等，其中部分涉及到网络请求。</p>\n<p>同时，该程序文件中还包含一些变量的定义、判断是否是订阅用户、获取基础用户信息等功能。</p>\n<h2 id=\"2849-listitemgo\"><a class=\"anchor\" href=\"#2849-listitemgo\">#</a> [28/49] listitem.go</h2>\n<p>该程序文件是一个 Go 语言程序文件，文件名为 listitem.go，位于 model 包下。</p>\n<p>程序导入了一些库文件，例如  <code>path</code> 、 <code>github.com</code>  等。程序定义了一个函数  <code>ListItem2Doc</code> ，该函数会将一个列表项转化为文档，具体实现过程如下：</p>\n<ul>\n<li><code>loadTreeByBlockID</code>  函数用于加载指定的  <code>srcListItemID</code>  所在的文档树。</li>\n<li><code>treenode.GetNodeInTree</code>  函数用于获取指定节点 ID（在此为 srcListItemID）在文档树中的节点对象。</li>\n<li>根据传递进来的  <code>targetBoxID</code>  和  <code>targetPath</code> ，确定目标位置。如果  <code>targetPath</code>  等于  <code>/</code> ，则将列表项移动到目标文件夹的根目录下，否则将列表项移动到所在目标文件夹的指定目录下。</li>\n<li>将列表项中的子节点全部分离出来，并按顺序添加到新文档树上。如果列表项中没有子节点，则添加一个新段落节点。</li>\n<li>设置新文档树的一些属性，例如根节点的 IAL 属性，路径等。</li>\n<li>设置源列表项节点的一些 IAL 属性，例如节点类型为文档、ID、标题等，移除  <code>fold</code>  属性，并且设置 Kramdown IAL（Informal Attributes Language）。</li>\n<li>将源列表项节点从原文档树中删除，并删除其父节点，如果其父节点已没有子节点。</li>\n<li>根据源文档树和新文档树的各自 ID、路径等属性设置其它相关属性，然后写入更新队列。</li>\n<li>对文档树进行索引，并存放到数据库中。</li>\n<li>调用  <code>RefreshBacklink</code>  函数刷新其它相关的链接关系。</li>\n</ul>\n<p>总之，该程序实现了将一个列表项转化为文档的功能，通过分离子节点、设置节点的 IAL 属性等步骤，将列表项转化为具备文档特性的节点，并最终存储于数据库中。</p>\n<h2 id=\"2949-mountgo\"><a class=\"anchor\" href=\"#2949-mountgo\">#</a> [29/49] mount.go</h2>\n<p>该文件是 Siyuan 笔记的一个 Go 程序，主要包含了许多操作笔记本的函数，例如创建笔记本、重命名笔记本、删除笔记本、挂载和卸载笔记本等。</p>\n<p>其中的函数实现了对笔记本的各种操作，具体包括所涉及到的函数有：CreateBox、RenameBox、RemoveBox、Unmount、unmount0、Mount、IsUserGuide 等。它们的作用分别是：创建一个新的笔记本，重命名一个笔记本，删除一个笔记本，卸载某个笔记本以及挂载某个笔记本，判断是否为用户指南。</p>\n<p>文件中的函数还涉及到一些 Go 开发的基础知识，比如字符串处理、目录管理、文件的读写和操作等。</p>\n<p>例如，函数中用到了操作系统的 path/filepath 包，处理文件路径；使用了 Go 自带的 errors 包，生成了错误信息；使用了 gulu 库处理字符串，以及监听器监听某些事件等。</p>\n<p>该文件是 Siyuan 笔记的一个重要组成部分，负责笔记本本身的相关功能。它所提供的各个函数能够帮助用户更加方便、精准地管理和处理笔记本。</p>\n<h2 id=\"3049-ocrgo\"><a class=\"anchor\" href=\"#3049-ocrgo\">#</a> [30/49] ocr.go</h2>\n<p>该文件是一个 Go 语言的程序文件，文件名为 ocr.go。</p>\n<p>该文件声明了一些函数用于 OCR（Optical Character Recognition，光学字符识别）相关的操作，包括对图像进行 OCR 处理、将 OCR 处理结果存储到缓存中，以及从缓存中读取 OCR 处理结果等。其中，autoOCRAssets () 函数是一个主要的函数，用于自动对未处理的图像进行 OCR 处理并将结果存储到缓存中。</p>\n<p>此外，还包括其它一些函数，如 cleanNotExistAssetsTexts ()、FlushAssetsTextsJob ()、LoadAssetsTexts ()、SaveAssetsTexts () 等，用于一些 OCR 处理相关的后续工作。</p>\n<h2 id=\"3149-outlinego\"><a class=\"anchor\" href=\"#3149-outlinego\">#</a> [31/49] outline.go</h2>\n<p>该程序文件是一个 Go 语言编写的模块，文件名是 outline.go。其主要实现了一个名为 Outline 的函数，该函数被调用时，会传入一个 rootID 作为参数。</p>\n<p>函数主要作用是在树形结构中提取出标题节点，然后将这些标题节点拼接成为一个平铺的树形结构。</p>\n<p>在该函数中，会首先调用 loadTreeByBlockID 函数加载树形结构。然后使用 ast.Walk 遍历该树节点，提取出标题节点，并将这些节点组成一个块，每个块包含了标题节点的详细信息。然后使用 linkedliststack.New 实现堆栈的操作，将相同深度的标题块放入到子块的列表中。最终，使用 toFlatTree 将其组装为一个平铺的树形结构后返回。</p>\n<h2 id=\"3249-pathgo\"><a class=\"anchor\" href=\"#3249-pathgo\">#</a> [32/49] path.go</h2>\n<p>该文件是 SiYuan 笔记应用的模型包，实现了笔记的增删改查等功能。主要包含以下函数：</p>\n<ul>\n<li>createDocsByHPath：根据传入的 boxID、hPath 和 content 创建一个文档。</li>\n<li>toFlatTree：构造传入的列表中子块的树结构，并返回生成的树形结构。</li>\n<li>toSubTree：根据关键字构造子树。</li>\n<li>getBlockIn：在传入的 blocks 列表中根据 id 查找是否存在一个 Block 对象。</li>\n</ul>\n<p>其中，每个函数的内部实现复杂度各自不同。</p>\n<h2 id=\"3349-processgo\"><a class=\"anchor\" href=\"#3349-processgo\">#</a> [33/49] process.go</h2>\n<p>该文件为 process.go，主要实现了处理信号和钩子桌面 UI 进程的功能。</p>\n<p>函数 HandleSignal 用于接收系统相关的信号（如中断、退出等），并在接收到信号时关闭相关的进程。</p>\n<p>函数 HookDesktopUIProcJob 用于挂钩桌面 UI 进程的作业，并在发现 UI 进程没有活动时退出。该函数首先检查是否存在活动的会话，如果存在则说明 UI 进程仍在运行，如果不存在则检测已经附加的 UI 进程数，如果大于 0，则说明 UI 进程仍在运行，如果等于 0，则检测所有进程中的 UI 进程数，如果大于 0，则说明 UI 进程仍在运行，否则退出。</p>\n<p>变量 uiProcNames 定义了 UI 进程的名称列表。函数 getAttachedUIProcCount 用于获取已经附加的 UI 进程数，函数 getUIProcCount 用于获取 UI 进程数。</p>\n<h2 id=\"3449-rendergo\"><a class=\"anchor\" href=\"#3449-rendergo\">#</a> [34/49] render.go</h2>\n<p>该文件为 SiYuan（思源笔记）中的一个 Go 语言源代码文件，包含多个函数用于渲染编辑器中的笔记内容。其中涉及到 Lute、ast、parse、html、render 等 Go 语言包，以及 SiYuan 自身定义的一些包和类型。具体函数如下：</p>\n<ol>\n<li>renderOutline 函数：渲染大纲面板，将指定的 ast.Node 转换成大纲字符串。</li>\n<li>renderBlockText 函数：将指定的 ast.Node 转换为一个字符串，该字符串包含了块中所有文本内容。</li>\n<li>renderBlockDOMByNodes 函数：将指定的多个 ast.Node 转换为 HTML 字符创，这些 ast.Node 可以是同一个文档中的不同块。</li>\n<li>renderBlockContentByNodes 函数：将指定的多个 ast.Node 转换为一个字符串，该字符串包含了这些 ast.Node 中所有文本内容。</li>\n<li>renderBlockMarkdownR 函数：在渲染指定 ID 对应的块时，将该块中的块引用和嵌入 SQL 查询转换为对应的 Markdown 字符串，以便明文存储和分享。</li>\n</ol>\n<h2 id=\"3549-repositorygo\"><a class=\"anchor\" href=\"#3549-repositorygo\">#</a> [35/49] repository.go</h2>\n<p>该程序文件是 model 的子模块文件夹 model 中的 repository.go 文件，代码如下：</p>\n<p>函数代码包括：</p>\n<ol>\n<li>OpenRepoSnapshotDoc；</li>\n<li>LeftRightDiff 和 DiffFile；</li>\n<li>parseTitleInSnapshot、parseTreeInSnapshot 和 buildSnapshots；</li>\n<li>ImportRepoKey 和 ResetRepo；</li>\n<li>InitRepoKeyFromPassphrase 和 InitRepoKey；</li>\n<li>CheckoutRepo。</li>\n</ol>\n<p>该文件中定义了许多的子函数，包括存储快照、数据同步、快照恢复，同时还有其他一些与快照或数据同步相关的函数。</p>\n<h2 id=\"3649-searchgo\"><a class=\"anchor\" href=\"#3649-searchgo\">#</a> [36/49] search.go</h2>\n<p>本文介绍了程序文件  <code>search.go</code>  的作用。该文件定义了搜索相关的功能函数，包括全文搜索、查询语法、SQL 以及正则表达式等方法。</p>\n<p>同时，还实现了嵌入块的搜索和替换功能，以及查找与引用块相关的块。本文件还包含处理块节点树的一些函数。</p>\n<h2 id=\"3749-sessiongo\"><a class=\"anchor\" href=\"#3749-sessiongo\">#</a> [37/49] session.go</h2>\n<p>该文件为 SiYuan（私远笔记）的认证授权模块，定义了包括登出、登录、验证码、接口访问授权等功能函数。其中</p>\n<ul>\n<li>LoginAuth 函数为登录认证核心函数，对输入的验证码、认证码进行验证，若通过则将认证码写入 Session 并返回成功信息；</li>\n<li>LogoutAuth 函数为登出函数，从 Session 中移除 WorkspaceSession 信息；</li>\n<li>GetCaptcha 函数为生成验证码函数，生成验证码并将其存入 WorkspaceSession；</li>\n<li>CheckAuth 和 CheckReadonly 为接口访问授权和只读状态检查，分别需要登录认证和只读状态为 false 才可访问 API。</li>\n</ul>\n<p>函数中还用到了第三方库 gin 和 steambap/captcha 等。</p>\n<h2 id=\"3849-snippetgo\"><a class=\"anchor\" href=\"#3849-snippetgo\">#</a> [38/49] snippet.go</h2>\n<p>该程序文件实现了在思源笔记中加载、保存、删除代码片段的功能。其中，代码片段保存在 conf.json 文件中，并且实现了线程锁保证多个线程同时访问时的线程安全。</p>\n<p>程序使用了 gulu、Lute、filelock、logging 等库来实现文件读写、日志输出、锁机制等操作。本文件遵循 GNU Affero General Public License 许可证。</p>\n<h2 id=\"3949-storagego\"><a class=\"anchor\" href=\"#3949-storagego\">#</a> [39/49] storage.go</h2>\n<p>该程序文件是 SiYuan 笔记的模型模块的源代码。程序的主要作用是提供 SiYuan 笔记程序的模型方法，完成 SiYuan 笔记程序的搜索、文档编辑等功能。</p>\n<p>具体方法包括：管理最近文档、文档搜索条件筛选、本地存储、读取。方法实现中使用了 sync 包实现了对最近文档、搜索条件、本地存储的互斥锁，保证数据的线程安全。</p>\n<h2 id=\"4049-syncgo\"><a class=\"anchor\" href=\"#4049-syncgo\">#</a> [40/49] sync.go</h2>\n<p>该程序文件名为 sync.go，用于实现 SiYuan 的同步功能。程序实现了同步 SiYuan 笔记数据到云端和从云端同步数据到本地的功能，并提供了手动同步功能和自动同步功能。</p>\n<p>实现手动同步需要在 UI 上进行操作，而自动同步功能可定时同步或在打开软件时进行同步操作。同时该程序还实现了删除云同步目录、创建云同步目录、列表云同步目录等一些对同步功能的基本操作。</p>\n<h2 id=\"4149-taggo\"><a class=\"anchor\" href=\"#4149-taggo\">#</a> [41/49] tag.go</h2>\n<p>该程序文件名为 tag.go，主要包含了标签相关的功能函数。其中：</p>\n<ul>\n<li>RemoveTag (): 删除标签功能函数，会将所有该标签相关的文档和块中的标签删除。</li>\n<li>RenameTag (): 重命名标签功能函数，会将所有该标签相关的文档和块中的标签修改为新标签名称。</li>\n<li>BuildTags (): 构建所有标签树，返回一个 *Tags 类型的指针，用来表示最外层的所有标签。</li>\n<li>SearchTags (): 根据传入的关键字搜索标签，返回符合关键字的标签名称。</li>\n<li>labelBlocksByKeyword (): 根据关键字搜索所有包含该关键字的文档块，提取其中包含的标签，返回一个 map 类型，键为标签名称，值为包含该标签的所有文档块。</li>\n<li>labelTags (): 提取所有存在的标签名称，返回一个 map 类型，键为标签名称，值为空的 []*Tag 类型。</li>\n<li>sortTags (): 对标签进行排序。</li>\n<li>appendTagChildren () 和 appendChildren0 (): 用来将所有标签按照层级关系组织成树形结构。</li>\n</ul>\n<p>该程序文件主要实现了标签的增删改查等常见功能，并能够将所有标签组织成树形结构以方便用户查看和管理标签。</p>\n<h2 id=\"4249-templatego\"><a class=\"anchor\" href=\"#4249-templatego\">#</a> [42/49] template.go</h2>\n<p>文件名为 template.go，该程序文件包含了处理模板相关的函数和方法。其中</p>\n<ul>\n<li>RenderGoTemplate 函数用于渲染 Go 模板，</li>\n<li>RemoveTemplate 函数用于删除模板，</li>\n<li>SearchTemplate 函数用于搜索模板，</li>\n<li>DocSaveAsTemplate 函数用于将文档保存为模板，</li>\n<li>RenderTemplate 函数用于渲染模板，</li>\n<li>addBlockIALNodes 函数用于添加块级内联属性节点。</li>\n</ul>\n<h2 id=\"4349-transactiongo\"><a class=\"anchor\" href=\"#4349-transactiongo\">#</a> [43/49] transaction.go</h2>\n<p>该程序文件是一个 Go 语言编写的模块，包含了 SiYuan 笔记系统的事务处理相关功能。</p>\n<p>该模块主要负责实现 SiYuan 笔记系统中各种操作的事务处理，在每个操作执行之前，会将操作记录到队列中，随后统一进行事务提交。</p>\n<p>其中的  <code>FlushTxJob</code>  函数用于触发事务提交任务，程序模块的主要函数包括  <code>PerformTransactions</code>  、 <code>doMove</code>  等一系列操作执行函数，这些函数主要用于操作的执行与相应的记录与撤销。此程序文件还包含了一些扩展功能的辅助函数，如函数  <code>IsFoldHeading</code>  用于判断操作是否为对折叠标题的操作，函数  <code>waitforWritingFiles</code>  用于等待文件写入操作完成等。</p>\n<p>总之，该程序文件是 SiYuan 笔记系统的事务处理核心模块。</p>\n<h2 id=\"4449-treego\"><a class=\"anchor\" href=\"#4449-treego\">#</a> [44/49] tree.go</h2>\n<p>该程序文件是一个 Go 语言编写的包 model，主要提供了加载笔记树内容、重置笔记树内容、对多个笔记进行分页等功能。其中</p>\n<ul>\n<li>LoadTreeByID 函数可以通过笔记树的 ID 来加载笔记树内容，如果找不到笔记树则返回 ErrTreeNotFound 错误，如果正在进行索引则返回 ErrIndexing 错误；</li>\n<li>loadTreeByBlockID 函数可以通过文档块的 ID 来加载笔记树，如果未找到文档块则返回 ErrBlockNotFound 错误。</li>\n<li>resetTree 函数可以重置笔记树的一些属性，如标题和路径，并重置块 ID 和内部引用。</li>\n<li>pagedPaths 函数可以对指定路径下的多个笔记进行分页。</li>\n</ul>\n<h2 id=\"4549-updatergo\"><a class=\"anchor\" href=\"#4549-updatergo\">#</a> [45/49] updater.go</h2>\n<p>该文件名为 updater.go，位于 model 文件夹下。该程序主要实现了软件更新相关的功能，包括下载、安装、校验更新包等，实现了软件自动更新的功能。程序包含一些函数，主要包括：</p>\n<ol>\n<li>execNewVerInstallPkg：执行下载的新版本安装包进行安装。</li>\n<li>getNewVerInstallPkgPath：获取新版本安装包的路径。</li>\n<li>checkDownloadInstallPkg：检查下载的安装包并进行下载安装。</li>\n<li>getUpdatePkg：获取更新包的下载链接和 checksum 值。</li>\n<li>downloadInstallPkg：下载并保存更新包。</li>\n<li>sha256Hash：计算文件的 checksum 值。</li>\n<li>Announcement 结构体：包含更新通知的 id、title 和 url 属性。</li>\n<li>GetAnnouncements：获取更新通知。</li>\n<li>CheckUpdate：检查更新并进行提示。</li>\n</ol>\n<h2 id=\"4649-uploadgo\"><a class=\"anchor\" href=\"#4649-uploadgo\">#</a> [46/49] upload.go</h2>\n<p>该文件名为 upload.go，是一个 Go 语言的程序文件。该文件主要分为两个部分：</p>\n<ol>\n<li>函数 InsertLocalAssets</li>\n</ol>\n<p>该函数的作用是将本地 assets 插入到该节点对应的目录下。函数的输入参数包括 id、assetPaths、isUpload。其中 id 代表节点 id，assetPaths 代表本地的 assets 路径，isUpload 代表是否是一个文件上传。该函数的输出参数包括 succMap，表示本次上传成功的文件列表，以及错误 err。</p>\n<ol start=\"2\">\n<li>函数 Upload</li>\n</ol>\n<p>该函数的作用是上传文件。同时，如果有 id 参数，该函数将上传文件存储到该节点的目录下。如果没有 id 参数，则直接将文件存储到默认的 assets 目录下。该函数的输入参数包括 gin.Context 实例 c。该函数的输出参数包括 ret，表示该次上传的结果。</p>\n<h2 id=\"4749-virutalrefgo\"><a class=\"anchor\" href=\"#4749-virutalrefgo\">#</a> [47/49] virutalref.go</h2>\n<p>该程序文件是一个 Go 语言编写的 SiYuan 文档编辑器中的模块，主要实现了处理虚拟引用的相关功能。具体包含以下功能模块：</p>\n<ul>\n<li>getBlockVirtualRefKeywords：获取块与虚拟引用有关的关键字，用于改进打开虚拟引用后加载文档的性能。</li>\n<li>putBlockVirtualRefKeywords：将虚拟引用关键字与块 ID 绑定，缓存到 virtualBlockRefCache 中。</li>\n<li>CacheVirtualBlockRefJob：缓存虚拟引用关键字到 virtualBlockRefCache 中，用于 globalSearch 中对虚拟引用的搜索。</li>\n<li>ResetVirtualBlockRefCache：清除 virtualBlockRefCache 中的缓存并重新缓存虚拟引用关键字。</li>\n<li>processVirtualRef：处理虚拟引用，将虚拟引用标记为可以替换的位置，并在需要的时候将其替换为实际的内容。</li>\n<li>getVirtualRefKeywords：获取虚拟引用的关键字，用于在 globalSearch 中对虚拟引用的搜索。</li>\n<li>prepareMarkKeywords：将给定的关键字列表进行去重、排序、标记处理。</li>\n</ul>\n<p>总体来说，该程序文件是 SiYuan 文档编辑器中虚拟引用功能的一个实现，通过缓存与预处理等优化手段，提升了虚拟引用功能的性能表现。</p>\n<h2 id=\"4849-widgetgo\"><a class=\"anchor\" href=\"#4849-widgetgo\">#</a> [48/49] widget.go</h2>\n<p>该文件名是  <code>widget.go</code> ，属于  <code>model</code>  包，里面定义了一个  <code>SearchWidget</code>  函数，用于搜索 widget 相关信息。</p>\n<p>该函数接收一个  <code>keyword</code>  字符串作为参数，返回一个  <code>Block</code>  类型的切片。函数首先通过  <code>filepath.Join</code>  函数获取到 widget 目录的路径，然后通过  <code>os.ReadDir</code>  函数读取该目录下的所有文件和目录。接下来循环遍历所有的条目，如果该条目不是目录，则跳过，否则遍历该目录下的所有条目，如果不是目录且名称为  <code>widget.json</code> ，则将  <code>isWidgetDir</code>  设为  <code>true</code> ，表明该目录为 widget 目录。</p>\n<p>然后将该目录名转为小写，并判断是否包含关键字，如果包含，则创建一个新的  <code>Block</code>  对象，将该目录名作为  <code>Content</code>  属性值，并加入到返回的切片中。最后返回所有匹配的  <code>Block</code>  切片。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-6/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-6/",
            "title": "思源笔记源码解析之kernel篇（九）mobile",
            "date_published": "2023-04-06T12:02:50.000Z",
            "content_html": "<h2 id=\"01-kernelgo\"><a class=\"anchor\" href=\"#01-kernelgo\">#</a> [0/1] kernel.go</h2>\n<p>该文件是 mobile 工程的一部分，主要涉及启动 kernel 和相关的一些操作。具体来说：</p>\n<ul>\n<li>import 了一些库和包，包括了 kernel/cache、kernel/job、kernel/model、kernel/server、kernel/sql 和 <span class=\"exturl\" data-url=\"aHR0cDovL2dvbGFuZy5vcmcveC9tb2JpbGUvYmluZCVFMyU4MCU4Mg==\">golang.org/x/mobile/bind。</span></li>\n<li>定义了两个函数 StartKernelFast 和 StartKernel，前者不做任何操作，后者是启动 kernel 的入口。</li>\n<li>实现了一些辅助函数。</li>\n<li>Language 接受一个整数，返回对应的语言字符串。</li>\n<li>ShowMsg 推送一个消息。</li>\n<li>IsHttpServing 返回是否正在提供 HTTP 服务。</li>\n<li>SetTimezone 设置时间区域。</li>\n</ul>\n<p>注释中还提到了该程序基于 GNU Affero General Public License 发布。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-5/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-5/",
            "title": "思源笔记源码解析之kernel篇（八）job",
            "date_published": "2023-04-06T11:51:58.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<table>\n<thead>\n<tr>\n<th>文件名或函数名</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cron.go</td>\n<td>实现定时任务的启动和执行功能，启动多个协程去执行不同的定时任务</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"01-crongo\"><a class=\"anchor\" href=\"#01-crongo\">#</a> [0/1] cron.go</h2>\n<p>这个程序文件是 job 包中的 cron.go，它是一个定时任务的启动文件。主要实现了 StartCron 函数和 every 函数。</p>\n<p>StartCron 函数用来创建多个协程去执行不同的定时任务，其中每个任务的执行时间间隔都不同。每个定时任务的具体内容可以在函数名后面的注释中找到。</p>\n<p>every 函数用来执行给定函数 f，并在执行完后等待一定时间间隔，然后再次执行。该程序依赖于其他包中的模块和工具函数，其中包括模型、SQL、任务和树节点等。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-4/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-4/",
            "title": "思源笔记源码解析之kernel篇（七）filesys",
            "date_published": "2023-04-06T11:47:12.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<h3 id=\"程序整体功能和构架概述\"><a class=\"anchor\" href=\"#程序整体功能和构架概述\">#</a> 程序整体功能和构架概述</h3>\n<p>该程序为一个文件系统模块，提供了文件树的结构和相关操作，主要包括两个子模块：文件树模块和 JSON 解析模块。</p>\n<p>文件树模块包括  <code>tree.go ​</code> ，提供了文件树的加载、存储以及一些辅助函数，通过读写磁盘、解析 JSON 数据等方式来构建和维护文件树的结构和属性。</p>\n<p>JSON 解析模块包括  <code>json_parser.go ​</code> ，提供了将 JSON 解析成  <code>parse.Tree</code>  数据结构的功能，同时能处理一些历史数据并做修正。</p>\n<h3 id=\"模块功能概述\"><a class=\"anchor\" href=\"#模块功能概述\">#</a> 模块功能概述</h3>\n<table>\n<thead>\n<tr>\n<th>模块名称</th>\n<th>文件路径</th>\n<th>模块功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>文件树模块</td>\n<td>filesys\\tree.go</td>\n<td>提供文件树的加载、存储以及一些辅助函数。</td>\n</tr>\n<tr>\n<td>JSON 解析模块</td>\n<td>filesys\\json_parser.go</td>\n<td>提供将 JSON 解析成 parse.Tree 数据结构的功能，同时能处理一些历史数据并做修正。</td>\n</tr>\n</tbody>\n</table>\n<p>注：parse.Tree 是一个内部数据结构，表示 Markdown 的语法树。</p>\n<h2 id=\"02-json_parsergo\"><a class=\"anchor\" href=\"#02-json_parsergo\">#</a> [0/2] json_parser.go</h2>\n<p>该文件是一个与 JSON 相关的解析器，主要提供了两个函数  <code>ParseJSONWithoutFix</code>  和  <code>ParseJSON</code>  ，用于将 JSON 解析成 parse.Tree 数据结构，其中  <code>ParseJSON</code>  函数还能解析一些历史数据并做修正。具体来说：</p>\n<ul>\n<li><code>ParseJSONWithoutFix</code>  函数接收 JSON 字符串  <code>jsonData</code>  和解析选项  <code>options</code> ，使用  <code>goccy/go-json</code>  的库将 JSON 转成  <code>ast.Node</code> ，随后递归遍历  <code>ast.Node</code>  构建  <code>parse.Tree</code> 。该函数不做历史数据修正。</li>\n<li><code>ParseJSON</code>  函数的功能基本与  <code>ParseJSONWithoutFix</code>  相同，只是多了一些历史数据修正的功能。对于某些历史数据，该函数将对一些不规范的格式和空内容的节点做修正，同时如果发现数据版本是小于 1.5.0 的，会标记需要将数据迁移至版本 1.5.0 及以上才能正常解析。</li>\n</ul>\n<p>除了以上两个函数外，还提供了  <code>genTreeByJSON</code>  和  <code>fixLegacyData</code>  两个辅助函数。其中  <code>genTreeByJSON</code>  函数实现了递归遍历  <code>ast.Node</code>  后生成  <code>parse.Tree</code>  的过程，同时在递归的过程中如果遇到需要修正的节点，则委托  <code>fixLegacyData</code>  函数处理该节点。而  <code>fixLegacyData</code>  则是一个历史数据修正的函数，主要处理块的 ID、块尾软换行、空列表、空引述、空公式等问题。</p>\n<h2 id=\"12-treego\"><a class=\"anchor\" href=\"#12-treego\">#</a> [1/2] tree.go</h2>\n<p>该程序文件为文件系统模块的一个子模块，主要实现了文件树的加载、存储以及一些辅助函数。函数主要包括：</p>\n<ul>\n<li><code>LoadTree</code> ：从指定路径加载文件树。</li>\n<li><code>LoadTreeByData</code> ：从数据中加载文件树。</li>\n<li><code>WriteTreeWithoutChangeTime</code>  和  <code>WriteTree</code> ：将文件树数据写入磁盘。</li>\n<li><code>prepareWriteTree</code> ：准备将文件树写入磁盘前的操作。</li>\n<li><code>afterWriteTree</code> ：文件树写入磁盘后更新缓存的相关操作。</li>\n<li><code>parseJSON2Tree</code> ：将 JSON 数据解析为文件树的操作。</li>\n<li><code>ReadDocIAL</code> ：读取文件中的属性集合。</li>\n</ul>\n<p>该程序文件主要是文件树模块中的核心操作，它们通过读写磁盘、解析 JSON 数据等方式来构建和维护文件树的结构和属性。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-3/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-3/",
            "title": "思源笔记源码解析之kernel篇（六）conf",
            "date_published": "2023-04-06T11:45:07.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p>该程序是一个开源的笔记应用，可以允许用户创建、编辑和存储笔记。程序主要分为以下几个模块：</p>\n<ul>\n<li>界面：提供了一种用户友好的界面，允许用户浏览笔记和进行一些操作。</li>\n<li>后端：维护笔记和标签的数据，并提供数据更新和存储的功能。</li>\n<li>云同步：将笔记存储到云端，实现笔记的同步和备份，同时可以允许多个设备之间的数据访问和共享。</li>\n</ul>\n<p>下表列出了每个程序文件及其对程序功能的贡献：</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>account.go</td>\n<td>用户账户的设置及管理</td>\n</tr>\n<tr>\n<td>ai.go</td>\n<td>AI 平台数据访问响应</td>\n</tr>\n<tr>\n<td>api.go</td>\n<td>网络请求响应</td>\n</tr>\n<tr>\n<td>appearance.go</td>\n<td>界面的外表设置及管理</td>\n</tr>\n<tr>\n<td>box.go</td>\n<td>“FileTree” 的设置，其中包括笔记数据的组织结构</td>\n</tr>\n<tr>\n<td>editor.go</td>\n<td>笔记的编辑器设置，用于创建、编辑、格式化和保存笔记</td>\n</tr>\n<tr>\n<td>export.go</td>\n<td>笔记导出的设置</td>\n</tr>\n<tr>\n<td>filetree.go</td>\n<td>“FileTree” 的实现，包括笔记和标签列表的管理</td>\n</tr>\n<tr>\n<td>flashcard.go</td>\n<td>用于设置和管理闪存卡</td>\n</tr>\n<tr>\n<td>graph.go</td>\n<td>功能图的设置与管理</td>\n</tr>\n<tr>\n<td>lang.go</td>\n<td>语言设置和管理</td>\n</tr>\n<tr>\n<td>layout.go</td>\n<td>界面布局的设置和管理</td>\n</tr>\n<tr>\n<td>Repo.go</td>\n<td>仓库路径的设置和管理</td>\n</tr>\n<tr>\n<td>search.go</td>\n<td>搜索功能及搜索结果显示设置</td>\n</tr>\n<tr>\n<td>snippet.go</td>\n<td>快捷方式的设置和管理</td>\n</tr>\n<tr>\n<td>stat.go</td>\n<td>统计功能的设置和管理</td>\n</tr>\n<tr>\n<td>sync.go</td>\n<td>笔记同步的设置、管理和实现</td>\n</tr>\n<tr>\n<td>system.go</td>\n<td>系统设置</td>\n</tr>\n<tr>\n<td>tag.go</td>\n<td>标签的设置及管理</td>\n</tr>\n<tr>\n<td>user.go</td>\n<td>用户账户管理相关功能的实现</td>\n</tr>\n</tbody>\n</table>\n<p>总体而言，这些程序文件的功能都是为了组成一个完整的笔记应用。它们负责不同的功能，通过互相协作实现最终的目标：提供一个高效、可靠的笔记应用程序。</p>\n<h2 id=\"020-accountgo\"><a class=\"anchor\" href=\"#020-accountgo\">#</a> [0/20] account.go</h2>\n<p>该文件是 SiYuan 工程中的配置文件 account.go，主要定义了一个结构体 Account 和一个 NewAccount 函数。Account 结构体中包含了两个布尔类型的属性：DisplayTitle 和 DisplayVIP，并且使用 json 标签来指定了它们在 json 格式中的名字。NewAccount 函数用于创建一个新的 Account 结构体，并初始化其中的属性值。</p>\n<h2 id=\"120-aigo\"><a class=\"anchor\" href=\"#120-aigo\">#</a> [1/20] ai.go</h2>\n<p>该文件名是 ai.go，代表着这是一个 Go 语言程序文件。该程序中定义了两个结构体类型 AI 和 OpenAI。结构体类型 OpenAI 里定义了若干字段，用于保存与 OpenAI 接口相关的参数。函数 NewAI 返回了一个指向 AI 结构体的指针，其中包含一个指向 OpenAI 结构体的指针，并从环境变量中读取用于与 OpenAI 平台交互的相关数据的值。同时，该程序遵循 GNU Affero 通用公共许可证协议。</p>\n<h2 id=\"220-apigo\"><a class=\"anchor\" href=\"#220-apigo\">#</a> [2/20] api.go</h2>\n<p>该程序文件是 api.go，它实现了一个名为 API 的结构体和 NewAPI () 函数。结构体 API 包含一个字符串类型的 Token 字段，表示一个 API 的访问令牌。NewAPI () 函数返回一个 API 类型的指针，该函数会生成 16 位随机字符串并将其赋值给 API 的 Token 字段。该程序文件截取自一个名为 SiYuan 的开源项目，它是一个数字花园构建工具并使用 GNU Affero General Public License 许可证。</p>\n<h2 id=\"320-appearancego\"><a class=\"anchor\" href=\"#320-appearancego\">#</a> [3/20] appearance.go</h2>\n<p>该程序文件是 conf 目录下的一个名为 appearance.go 的 Go 语言源代码文件。</p>\n<p>该文件定义了一个名为 Appearance 的结构体，该结构体包含多个属性字段，用于表示 SiYuan 笔记软件中的用户界面外观设置，例如黑暗模式、主题、图标、代码块主题等。其中还有一些附加属性，如界面语言、自定义 CSS 等。</p>\n<p>代码的最后定义了一个名为 NewAppearance 的函数，用于创建一个新的 Appearance 结构体实例。默认情况下，所有属性字段都有默认值。</p>\n<p>该文件还包含了 GNU Affero 通用公共许可证的版权声明和许可条款。</p>\n<h2 id=\"420-boxgo\"><a class=\"anchor\" href=\"#420-boxgo\">#</a> [4/20] box.go</h2>\n<p>该程序文件名为 “box.go”，归属于 “conf” 软件包。程序代码定义了一个 “BoxConf” 类型，该类型维护了 “.siyuan/conf.json” 笔记本配置的各种参数，例如笔记本名称、排序方式、图标等。该程序文件还定义了一个 “NewBoxConf ()” 函数，用于初始化配置参数，设置默认值。该程序文件依赖于 “util” 软件包，并使用了该软件包中的 “SortModeFileTree” 变量。程序代码还包括一些注释信息，介绍了该程序的版权及开源协议信息。</p>\n<h2 id=\"520-editorgo\"><a class=\"anchor\" href=\"#520-editorgo\">#</a> [5/20] editor.go</h2>\n<p>该程序文件为一个 Go 语言程序的配置文件 editor.go，主要定义了一个名为 Editor 的 struct 类型，包括了编辑器的各种配置参数，如字体大小、字体、代码块是否显示行号、代码块中 Tab 转换空格数等。同时，该文件还定义了一个名为 NewEditor 的函数，返回一个 Editor 类型的指针，用来初始化一个编辑器实例。</p>\n<h2 id=\"620-exportgo\"><a class=\"anchor\" href=\"#620-exportgo\">#</a> [6/20] export.go</h2>\n<p>这是一个 Go 语言编写的程序文件，文件名为 export.go，属于 conf 包。该文件定义了一个 Export 结构体及其构造函数 NewExport ()，其中 Export 结构体包含了文档导出时的一些设置选项，如段落开头的空格、是否添加标题、内容块引用导出模式等等。同时，该文件还定义了 Export 结构体的默认值，其中大部分设置都是使用默认值。这些设置可以通过导出的功能进行修改。</p>\n<h2 id=\"720-filetreego\"><a class=\"anchor\" href=\"#720-filetreego\">#</a> [7/20] filetree.go</h2>\n<p>该程序文件名为 filetree.go，其代码定义了一个名为 FileTree 的结构体类型，并声明了与该结构相关的变量和函数。所该结构体的字段具有不同的类型，包括 bool，string 和 int 等，而且它们的含义是关于文档管理器的一些布尔值或设置，例如是否总是在打开的文件中自动选择，是否在当前页签打开文件，打开文件时列出的最大数量等。此外，该程序文件中包含了一个名为 NewFileTree 的函数，该函数返回一个新的 FileTree 结构体，并将其字段初始化为预定义的值。</p>\n<h2 id=\"820-flashcardgo\"><a class=\"anchor\" href=\"#820-flashcardgo\">#</a> [8/20] flashcard.go</h2>\n<p>该文件名为 flashcard.go，它实现了一个名为 Flashcard 的结构体以及一个名为 NewFlashcard () 的函数。</p>\n<p>Flashcard 结构体定义了以下五个字段：</p>\n<ul>\n<li>NewCardLimit：新卡的上限</li>\n<li>ReviewCardLimit：复习卡的上限</li>\n<li>Mark：标记制卡的启用状态</li>\n<li>List：列表块制卡的启用状态</li>\n<li>SuperBlock：超级块制卡的启用状态</li>\n<li>Deck：卡包制卡的启用状态</li>\n</ul>\n<p>NewFlashcard () 函数返回一个指向 Flashcard 结构体的指针，其中指定了每个字段的初始值。</p>\n<h2 id=\"920-graphgo\"><a class=\"anchor\" href=\"#920-graphgo\">#</a> [9/20] graph.go</h2>\n<p>该程序文件为 Go 语言编写的一个配置文件，用于设置图形显示参数。其中，定义了 Graph、LocalGraph 和 GlobalGraph 三个结构体用于区分不同的图形参数，如局部图、全局图等。同时，也定义了 TypeFilter 和 D3 两个结构体用于设置图形显示的具体参数，如节点大小、连线粗细等。 该程序文件包含了构造函数 NewGraph、NewLocalGraph 和 NewGlobalGraph 以及 newD3 函数，用于生成各结构体的实例。同时，还定义了一些不同参数的默认值。</p>\n<h2 id=\"1020-langgo\"><a class=\"anchor\" href=\"#1020-langgo\">#</a> [10/20] lang.go</h2>\n<p>该程序文件名为  <code>lang.go</code> ，属于  <code>conf</code>  包下的一个 Go 程序文件。这个文件定义了一个名为  <code>Lang</code>  的结构体类型，该结构体包括两个字段： <code>Label</code>  和  <code>Name</code> ，分别表示语言的名称和标签。同时，该结构体还包含了对应的 JSON 字段标签。该程序文件没有导入任何包。也提供了版权声明和 GNU Affero 通用公共许可证文件注释。</p>\n<h2 id=\"1120-layoutgo\"><a class=\"anchor\" href=\"#1120-layoutgo\">#</a> [11/20] layout.go</h2>\n<p>该程序文件名为 layout.go，位于 conf 文件夹下，实现了两个类型定义：UILayout 和 Keymap。UILayout 是一个由字符串作为键，任何值作为值的映射类型，用于描述用户界面的布局。Keymap 是一个由字符串作为键，任何值作为值的映射类型，用于描述键盘快捷键的映射。这些类型定义可能会被程序的其他部分引用并使用。该程序还包含了版权声明和 GNU Affero General Public License 许可证。</p>\n<h2 id=\"1220-repogo\"><a class=\"anchor\" href=\"#1220-repogo\">#</a> [12/20] Repo.go</h2>\n<p>该程序文件是 conf 目录下的 Repo.go 文件。该文件定义了一个名为 “Repo” 的结构体，包含一个 byte 类型的 “Key” 属性，用于存储 AES 密钥。此外，该文件还定义了一个 “NewRepo” 函数，用于创建新的 “Repo” 实例。还有一个名为 “GetSaveDir” 的函数，用于返回保存仓库的路径，该路径由 “WorkspaceDir” 和 “repo” 目录组成。</p>\n<h2 id=\"1320-searchgo\"><a class=\"anchor\" href=\"#1320-searchgo\">#</a> [13/20] search.go</h2>\n<p>该文件是一段用 Go 语言编写的程序代码，命名为 &quot;search.go&quot;，属于 &quot;conf&quot; 路径下的文件。该程序声明了一个名为 &quot;Search&quot; 的结构体，该结构体定义了一些搜索相关的属性和方法。它包括类型筛选器、名称、别名、简介和指向外部文档的虚拟参考、回链注名、别名、锚点和文档等。还定义了 NAMFilter 方法用于在名称、别名和简介中过滤关键字，并返回匹配结果，以及 TypeFilter 方法用于通过所选类型筛选器来过滤匹配结果。该程序还包含一个 NewSearch 函数，该函数返回一个默认的 Search 结构体。</p>\n<h2 id=\"1420-snippetgo\"><a class=\"anchor\" href=\"#1420-snippetgo\">#</a> [14/20] snippet.go</h2>\n<p>该程序文件名为 snippet.go，属于 conf 包下的。程序定义了 Snippet 结构体，包含一些 Snippet 实例变量。Snippet 结构体的实例变量包括 ID、Name、Memo、Type、Enabled 和 Content。其中，ID、Name、Memo、Type、Enabled 都是字符串类型，Content 是 Snippet 内容。这个程序文件可能在一个项目中被调用，提供配置信息的存储和读取等功能。</p>\n<h2 id=\"1520-statgo\"><a class=\"anchor\" href=\"#1520-statgo\">#</a> [15/20] stat.go</h2>\n<p>该程序文件是一个 Go 语言的代码文件，文件名为 stat.go，位于 conf 文件夹下，是与配置相关的统计信息结构体定义文件。它定义了 Stat 结构体类型，包含了数目、大小等统计信息的属性，有一个方法 NewStat () 返回一个指向该结构体类型的指针。此外，文件开头有版权声明和使用 GNU Affero 通用公共许可协议的声明。</p>\n<h2 id=\"1620-syncgo\"><a class=\"anchor\" href=\"#1620-syncgo\">#</a> [16/20] sync.go</h2>\n<p>该程序文件是 conf 目录下的 sync.go 文件。该文件定义了两个结构体：Sync 和两个 Sync 结构体的内嵌结构体 ——S3 和 WebDAV。其中，Sync 结构体是同步配置相关的结构体，包括云端同步目录名称、是否开启同步、同步模式等信息；S3 结构体是存储于 S3 对象存储服务相关的信息；WebDAV 结构体则是存储于 WebDAV 服务相关的信息。该程序文件中还定义了一些常量和函数，例如：ProviderSiYuan、ProviderS3、ProviderWebDAV，以及 NewSyncProviderCheckURL () 函数等。</p>\n<h2 id=\"1720-systemgo\"><a class=\"anchor\" href=\"#1720-systemgo\">#</a> [17/20] system.go</h2>\n<p>该程序文件名称为 system.go，位于 conf 文件夹下。该程序定义了一个 System 结构体和一个 NetworkProxy 结构体。System 结构体包含了 SiYuan 系统的各种属性，包括 ID、内核版本、操作系统、容器、文件夹路径等，还包括一些功能属性，如是否启用网络服务、是否上传错误日志等。NetworkProxy 结构体用于表示网络代理的信息，其中包括协议、主机和端口号。程序还提供了一个 NewSystem () 函数，用于向外部提供一个新的 System 结构体实例。</p>\n<h2 id=\"1820-taggo\"><a class=\"anchor\" href=\"#1820-taggo\">#</a> [18/20] tag.go</h2>\n<p>该文件是 SiYuan 软件中的配置文件之一，文件名为 tag.go。程序定义了一个名为 Tag 的结构体，该结构体包含一个名为 Sort 的属性，表示排序方式，并通过 json 标签将其序列化为 JSON 格式。 NewTag 函数返回一个新的初始化 Tag 结构体的指针。程序使用了 SiYuan 软件内部的 util 包中的 SortModeAlphanumASC 常量来表示标签排序方式。程序中还包含 GNU Affero 通用公共许可证的授权声明。</p>\n<h2 id=\"1920-usergo\"><a class=\"anchor\" href=\"#1920-usergo\">#</a> [19/20] user.go</h2>\n<p>该文件是一个 Go 语言程序文件，文件名为 “user.go”，定义了一个 “User” 结构体以及一个 “UserTitle” 结构体。</p>\n<p>“User” 结构体包括了用户的各种信息，如 “userId”、“userName”、“userAvatarURL” 等，其中部分字段为浮点数类型。</p>\n<p>“UserTitle” 结构体包括了用户称号的相关信息，如名称 “name”、“描述”、“图标” 等。</p>\n<p>此外，“User” 结构体还定义了一个名为 “GetCloudRepoAvailableSize” 的方法，返回用户云端仓库可用空间大小。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-2/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406-2/",
            "title": "思源笔记源码解析之kernel篇（五）cmd",
            "date_published": "2023-04-06T11:09:38.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p>该程序是一个使用 Go 语言编写的命令行交互式程序，提供了多个命令以供用户使用。程序使用 WebSocket 技术实现了网络通信，用户可以通过命令行界面将自己的消息发送给服务器，服务器会将消息发送到其他在线用户上。同时，程序还实现了一个简单的聊天机器人，用户可以通过命令行向聊天机器人提问，机器人会给出相应的回答。</p>\n<ol>\n<li>可以通过 WebSockets 建立客户端与服务器之间的通信；</li>\n<li>可以指定频道进行聊天，同时可以传输图片；</li>\n<li>提供了命令行界面对服务器进行操作，例如关闭某个用户的 WebSocket 连接、查询服务器性能数据等；</li>\n</ol>\n<p>程序整体架构如下：</p>\n<ol>\n<li><code>kernel</code> ：该包提供了一些 WebSocket 与协程相关的函数</li>\n<li><code>model</code> ：该包提供了一些具体的数据结构</li>\n<li><code>chat</code> ：该包提供了聊天机器人的具体实现</li>\n<li><code>cmd</code> ：该包提供命令行命令的处理及具体实现</li>\n<li><code>main</code> ：该包提供程序的启动入口</li>\n</ol>\n<p>该程序主要由以下几个文件构成：</p>\n<table>\n<thead>\n<tr>\n<th>文件名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>closews.go</td>\n<td>关闭 WebSocket 连接的命令文件</td>\n</tr>\n<tr>\n<td>cmd.go</td>\n<td>命令行工具包文件，包括命令行接口的定义和各个命令的实现</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"02-closewsgo\"><a class=\"anchor\" href=\"#02-closewsgo\">#</a> [0/2] closews.go</h2>\n<p>该文件是一个 Golang 语言编写的命令行程序文件，文件名为 closews.go。该文件是整个工程中的一个子模块，属于 cmd 包中的一部分。该文件定义了一个 closews 结构体类型，其中包含三个方法：Exec ()、Name () 和 IsRead ()。</p>\n<ul>\n<li>Exec () 方法通过获取当前会话的 ID 值，并调用封装在 kernel/util 模块中的 ClosePushChan () 函数来关闭指定用户的 WebSocket 连接。同时，该方法调用了该结构体类型的 Push () 方法来进行消息推送。</li>\n<li>Name () 方法返回一个字符串 “closews”，表示该命令的名称为 “closews”。</li>\n<li>IsRead () 方法返回一个布尔值 true，表示该命令是一个只读命令。</li>\n</ul>\n<h2 id=\"12-cmdgo\"><a class=\"anchor\" href=\"#12-cmdgo\">#</a> [1/2] cmd.go</h2>\n<p>该文件是一个 Go 语言编写的程序文件，主要包括以下几个部分：</p>\n<ol>\n<li>版权声明和许可证，表示该程序使用 GNU Affero General Public License 作为许可证；</li>\n<li>引用了两个第三方库： <code>github.com/olahol/melody</code>  和  <code>github.com/siyuan-note/logging</code> ；</li>\n<li>定义了一个  <code>Cmd</code>  接口及其方法， <code>Cmd</code>  是一个命令的抽象接口；</li>\n<li>定义了一个  <code>BaseCmd</code>  结构体及其方法， <code>BaseCmd</code>  实现了  <code>Cmd</code>  接口，包括执行命令和推送命令结果等方法；</li>\n<li>定义了一个函数  <code>NewCommand</code> ，该函数根据传入的命令字符串、命令 ID、参数和会话信息创建一个对应的  <code>Cmd</code>  对象，并初始化  <code>PushPayload</code>  属性；</li>\n<li>定义了一个函数  <code>Exec</code> ，该函数接收一个  <code>Cmd</code>  对象，用 goroutine 异步执行命令。</li>\n</ol>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230406/",
            "title": "思源笔记源码解析之kernel篇（四）cache",
            "date_published": "2023-04-06T11:02:57.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<h3 id=\"程序概述\"><a class=\"anchor\" href=\"#程序概述\">#</a> 程序概述</h3>\n<p>该程序是一个缓存工具，用于加速数据文件读取，具体实现中使用了 Golang ristretto 缓存库。主要功能是加载所有的数据文件，并将文件信息存入到缓存中，方便快速查找和读取。</p>\n<h3 id=\"程序构架\"><a class=\"anchor\" href=\"#程序构架\">#</a> 程序构架</h3>\n<ul>\n<li>数据文件加载：通过  <code>LoadAssets()</code>  函数，读取项目中所有的数据文件，提取文件路径和文件信息，并将其存入到  <code>assetsCache</code>  中；</li>\n<li>缓存操作：通过定义的  <code>docIALCache</code>  和  <code>blockIALCache</code>  两个缓存变量，实现缓存数据的快速读取、修改、删除等操作；</li>\n<li>互斥锁保护：由于多个协程可能同时访问缓存，需要使用  <code>assetsLock</code>  互斥锁来保护并发读写的安全性。</li>\n</ul>\n<p>文件功能</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>asset.go</td>\n<td>实现对所有数据文件的缓存处理，以便快速地获取和查询数据文件的信息和所在路径。</td>\n</tr>\n<tr>\n<td>ial.go</td>\n<td>定义了两个缓存变量：docIALCache 和 blockIALCache，用于缓存文档和块的 IAL（内部属性列表），提供了增删改查等公共方法供缓存操作。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"02-assetgo\"><a class=\"anchor\" href=\"#02-assetgo\">#</a> [0/2] asset.go</h2>\n<p>该文件是  <code>siyuan-note</code>  项目中的缓存处理相关的代码文件  <code>asset.go</code> ，包含以下主要功能：</p>\n<ol>\n<li>定义了一个  <code>Asset</code>  的结构体，用于表示文件的相关信息；</li>\n<li>定义了一个名为  <code>assetsCache</code>  的全局变量用于保存所有的  <code>Asset</code>  对象；</li>\n<li>定义了名为  <code>assetsLock</code>  的互斥锁，用于保证多协程安全的访问；</li>\n<li>实现了  <code>GetAssets()</code>  函数用于返回缓存中所有  <code>Asset</code>  对象；</li>\n<li>实现了  <code>RemoveAsset()</code>  函数用于移除缓存中指定的  <code>Asset</code>  对象；</li>\n<li>实现了  <code>LoadAssets()</code>  函数用于加载所有项目中的数据文件，并将文件的相关信息存入到  <code>assetsCache</code>  中。</li>\n</ol>\n<p>该文件的主要作用是实现对所有数据文件的缓存处理，以便快速地获取和查询数据文件的信息和所在路径。</p>\n<h2 id=\"12-ialgo\"><a class=\"anchor\" href=\"#12-ialgo\">#</a> [1/2] ial.go</h2>\n<p>此文件为 Golang 编写的 “缓存” 程序包中的一个文件，文件名为 ial.go。其中定义了两个缓存变量：docIALCache 和 blockIALCache，用于缓存文档和块的 IAL（内部属性列表）。</p>\n<p>此文件定义了以下公共方法：PutDocIAL、GetDocIAL、RemoveDocIAL、ClearDocsIAL、PutBlockIAL、GetBlockIAL 和 RemoveBlockIAL，用于操作这些缓存。</p>\n<p>在具体实现中，使用了 ristretto 缓存库。此程序在 GNU Affero 通用公共许可证下发布，用于构建一个数字园。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230404/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230404/",
            "title": "思源笔记源码解析之kernel篇（三）bazaar",
            "date_published": "2023-04-04T19:05:56.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p><strong>程序概括：</strong></p>\n<p>该程序实现了思源笔记的插件化扩展功能，其中主要包括图标包、主题包、模板包、Widget 包的管理和安装。程序使用 Go 语言编写，通过 HTTP 协议访问名为 &quot;Bazaar&quot; 的仓库服务器上的数据，并对用户定义的配置目录进行安装和管理。</p>\n<p><strong>程序文件功能表格：</strong></p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>主要功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>icon.go</td>\n<td>实现了 Icon 结构体，封装了每个图标包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用图标包、获取已安装图标包、下载安装图标包、卸载图标包。</td>\n</tr>\n<tr>\n<td>package.go</td>\n<td>主要包含处理 bazaar 包的函数，如获取包的 README、下载安装包、安装包等。同时还包括了一些读取 icon、theme、widget、template 等信息的函数。在定义了一些结构体来保存这些包的信息。</td>\n</tr>\n<tr>\n<td>template.go</td>\n<td>实现了 Template 结构体，封装了每个模板包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用模板包、获取已安装模板包、下载安装模板包、卸载模板包。</td>\n</tr>\n<tr>\n<td>theme.go</td>\n<td>实现了 Theme 结构体，封装了每个主题包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用主题包、获取已安装主题包、下载安装主题包、卸载主题包。</td>\n</tr>\n<tr>\n<td>widget.go</td>\n<td>实现了 Widget 结构体，封装了每个 Widget 包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用 Widget 包、获取已安装 Widget 包、下载安装 Widget 包、卸载 Widget 包。</td>\n</tr>\n</tbody>\n</table>\n<p>总体概括：该程序可以根据用户需要对思源笔记进行定制化扩展，增加不同的图标、主题、模板、Widget 等，丰富了用户的使用体验。</p>\n<h2 id=\"05-icongo\"><a class=\"anchor\" href=\"#05-icongo\">#</a> [0/5] icon.go</h2>\n<p>该文件是 bazaar 工程中的一个 Go 语言源程序文件，用于实现与图标 / 图标包相关的功能。程序中定义了 Icon 结构体，表示一个图标，包括图标的元数据信息和图标文件的路径等。程序还定义了一系列函数，主要包括以下几个方面的功能：</p>\n<ol>\n<li><code>Icons</code>  函数：该函数通过网络访问 bazaar-server 获取所有可用的图标包的元数据，每个图标包的元数据包括其所在的仓库 URL、预览图片 URL、更新时间、星级、下载次数等信息，并将这些元数据封装成 Icon 对象，并将所有 Icon 对象返回，排序方式为按更新时间倒序。</li>\n<li><code>InstalledIcons</code>  函数：该函数遍历用户本地已安装的图标的目录，读取目录中的每个图标包的元数据，并与第一个功能中获取的图标包元数据进行匹配，根据匹配结果将本地已安装的图标包封装成 Icon 对象，以数组的形式返回。</li>\n<li><code>InstallIcon</code>  函数：该函数用于从 bazaar-server 下载已有的图标包并安装到本地。</li>\n<li><code>UninstallIcon</code>  函数：该函数用于从用户本地卸载指定的图标包。</li>\n<li>其他函数：包括 isBuiltInIcon 函数，用于判断指定的目录名称是否为默认提供的图标包；IconJSON 函数，用于解析指定目录中存储的图标包元数据信息；formatUpdated 函数，用于格式化日期字符串表示的时间信息；isOutdatedIcon 函数，用于判断本地已安装的图标包是否需要更新等。</li>\n</ol>\n<h2 id=\"15-packagego\"><a class=\"anchor\" href=\"#15-packagego\">#</a> [1/5] package.go</h2>\n<p>这是一个 Go 语言编写的 bazaar 包，其中包含了一些处理 bazaar 包的函数，如获取包的 README、下载安装包、安装包等。同时还包括了一些读取 icon、theme、widget、template 等信息的函数。</p>\n<p>在定义了一些结构体来保存这些包的信息，如 Package、Icon、Widget、Template 等。</p>\n<p>函数主要的实现思路是从 bazaar 服务器上下载以 zip 压缩包为形式的安装包，再解压到指定的目录中。同时还包括了一些处理数据的函数，如格式化日期、获取 bazaar index 等。</p>\n<h2 id=\"25-templatego\"><a class=\"anchor\" href=\"#25-templatego\">#</a> [2/5] template.go</h2>\n<p>该文件是 template.go，是一个 Go 语言编写的程序文件，主要包含以下函数和数据结构：</p>\n<p>函数：</p>\n<ul>\n<li>Templates ()：获取所有论坛模板的列表，并按更新时间排序。</li>\n<li>InstalledTemplates ()：获取已安装论坛模板的列表。</li>\n<li>InstallTemplate ()：安装指定的论坛模板。</li>\n<li>UninstallTemplate ()：卸载指定的论坛模板。</li>\n</ul>\n<p>数据结构：</p>\n<ul>\n<li>Template：存储论坛模板的基本信息，包括名称、作者、预览图、更新日期、大小等。其中，已安装的论坛模板还包括安装日期、版本号等信息。</li>\n</ul>\n<h2 id=\"35-themego\"><a class=\"anchor\" href=\"#35-themego\">#</a> [3/5] theme.go</h2>\n<p>文件名：theme.go</p>\n<p>该文件是一个 Golang 语言编写的主题管理模块，用于管理笔记软件思源笔记的主题。</p>\n<p>主要功能包括：</p>\n<ul>\n<li>获取所有可用主题</li>\n<li>获取已安装的主题</li>\n<li>安装一个主题</li>\n<li>卸载一个主题</li>\n</ul>\n<p>主题数据来自于一个名为 Bazaar 的思源笔记主题仓库，使用 HTTP 请求向仓库获取主题数据。同时该文件也使用了第三方库 ants 和 go-humanize。</p>\n<h2 id=\"45-widgetgo\"><a class=\"anchor\" href=\"#45-widgetgo\">#</a> [4/5] widget.go</h2>\n<p>该程序文件是 widget.go，是一个 Go 语言编写的文件。该文件实现了一个名为 Widget 的类型，并且该类型包含一些程序所需要的属性。</p>\n<p>其中，函数  <code>Widgets</code>  返回一个包含多个 Widget 的数组，而函数  <code>InstalledWidgets</code>  返回一个已安装 Widget 的数组。函数  <code>InstallWidget</code>  用于安装 Widget，而函数  <code>UninstallWidget</code>  用于卸载 Widget。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230403/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230403/",
            "title": "思源笔记源码解析之kernel篇（二）av",
            "date_published": "2023-04-03T16:39:25.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p>根据以上分析，该程序的整体功能是提供属性视图的相关实现，用于数据的存储、管理和查询。程序的核心结构包括 Cell、Column 和 Row，其中 Cell 表示单元格，Column 表示表的一列，包括列 ID、列名、列类型、关联的属性视图 ID、目标关联列 ID 以及选项列表等信息，Row 表示表的一行，其中包含多个 Cell。</p>\n<p>下表是对每个文件功能的概括和简要说明：</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>功能概述</th>\n<th>主要函数和结构体说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>av.go</td>\n<td>提供属性视图的列名列出、插入列、读取和保存 AttributeView 结构体、删除列和表等功能</td>\n<td>GetColumnNames(), InsertColumn(), ParseAttributeView(), SaveAttributeView(), getAttributeViewDataPath(), dropAttributeViewTableColumn(), addAttributeViewTableColumn(), dropAttributeViewTable(), createAttributeViewTable()</td>\n</tr>\n<tr>\n<td>cell.go</td>\n<td>定义 Cell 结构体，表示属性视图中的单元格，具有两个成员变量 ID 和 Value，并可序列化为 JSON 格式</td>\n<td>Cell 结构体</td>\n</tr>\n<tr>\n<td>column.go</td>\n<td>定义 ColumnType（列类型）、Column（列基础结构）和 ColumnSelectOption（选项列表）等结构体，提供 NewColumn 方法创建新的 Column 对象</td>\n<td>ColumnType 结构体，Column 结构体，ColumnSelectOption 结构体，NewColumn () 方法</td>\n</tr>\n<tr>\n<td>row.go</td>\n<td>定义 Row 结构体，表示属性视图中的一行，具有 ID 和 Cells 两个成员变量，同时提供 NewRow 方法创建一个 Row 结构体指针</td>\n<td>Row 结构体，NewRow () 方法</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"04-avgo\"><a class=\"anchor\" href=\"#04-avgo\">#</a> [0/4] av.go</h2>\n<p>该文件为 SiYuan 笔记应用的属性视图（Attribute View）相关实现代码文件，包含了 AttributeView 以及其相关的结构体和函数实现。该文件的主要实现了以下功能：</p>\n<p>1. 列出属性视图的列名 函数： <code>GetColumnNames()</code></p>\n<p>2. 在指定的位置插入一个 Column 对象 函数： <code>InsertColumn()</code></p>\n<p>3. 读取指定 ID 的属性视图的 JSON 数据并返回其相应结构体 函数： <code>ParseAttributeView()</code></p>\n<p>4. 保存指定的 AttributeView 结构体数据到 JSON 文件中 函数： <code>SaveAttributeView()</code></p>\n<p>5. 获取指定 ID 的 AttributeView 数据的 JSON 文件路径 函数： <code>getAttributeViewDataPath()</code></p>\n<p>6. 在属性视图的数据库表中删除指定的一个列 函数： <code>dropAttributeViewTableColumn()</code></p>\n<p>7. 在属性视图的数据库表中增加指定的一个列 函数： <code>addAttributeViewTableColumn()</code></p>\n<p>8. 删除指定 ID 的属性视图的数据库表 函数： <code>dropAttributeViewTable()</code></p>\n<p>9. 在属性视图的数据库中创建一个指定 ID 的表，建立 id 和指定列的对应关系 函数： <code>createAttributeViewTable()</code></p>\n<h2 id=\"14-cellgo\"><a class=\"anchor\" href=\"#14-cellgo\">#</a> [1/4] cell.go</h2>\n<p>该程序文件名为 cell.go，是一段 Go 语言代码。程序定义了一个名为 Cell 的结构体，该结构体有两个成员，分别是 ID 和 Value，均为字符串类型。其中，结构体的成员都被打上了 json 标记，表明这些成员可以被序列化为 JSON 格式。该程序文件可能是某个软件或系统的一部分，用于对单元格进行数据的存储和管理。</p>\n<h2 id=\"24-columngo\"><a class=\"anchor\" href=\"#24-columngo\">#</a> [2/4] column.go</h2>\n<p>该文件名为 column.go，主要包含了属性视图的基础结构的定义，包括 ColumnType（列类型）、Column（列基础结构）、ColumnSelectOption（选项列表）等。其中，ColumnType 包含了 block、date、number、relation、rollup、select 和 text 这几种列类型，Column 包含了列 ID、列名、列类型、关联的属性视图 ID、目标关联列 ID 以及选项列表等信息，并提供了 NewColumn 方法，用于创建新的 Column 对象。</p>\n<h2 id=\"34-rowgo\"><a class=\"anchor\" href=\"#34-rowgo\">#</a> [3/4] row.go</h2>\n<p>该代码文件为 Go 语言编写的程序，属于 av 目录下的一个名为 &quot;row.go&quot; 的文件。该文件定义了一个名为 &quot;Row&quot; 的结构体，其中包含有一个 &quot;ID&quot; 的 string 类型成员变量以及一个 &quot;Cells&quot; 的指向 &quot;Cell&quot; 结构体的切片类型变量。同时该文件还定义了一个 &quot;NewRow ()&quot; 方法用于返回一个新的 &quot;Row&quot; 结构体指针。该文件依赖于 &quot;ast&quot; 模块，使用了其中的 &quot;NewNodeID ()&quot; 函数。同时，该代码文件还包含着版权声明和 GNU Affero 通用公共许可证的相关信息。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/tools/20230403/",
            "url": "https://blog.aayu.today/skill/tools/20230403/",
            "title": "Docker + ChatGPT + 微信",
            "date_published": "2023-04-02T18:43:28.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>终于捣鼓成功啦，项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lsc2lzbG92ZS93ZWNoYXRib3Q=\">ylsislove/wechatbot</span>，欢迎 star ~</p>\n<div class=\"note warning\">\n<p>最新消息：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMU04SkZicTlFYTI5RXpFOVFxb2NQUQ==\">https://mp.weixin.qq.com/s/1M8JFbq9Ea29EzE9QqocPQ</span><br />\n 如果账号是从第三方手上购买过来的，不要尝试了，OpenAI 最近在封这类账号。以及自己的代理域名也不要分享给他人使用了，像评论里有人评论的，保护好自己的账号最重要～<br />\n 如果是自己亲手注册的，也绑定了信用卡（向 OpenAI 表明自己不是白嫖党 / 滑稽），同时也有一个自己搭建的稳定的代理域名，那么就可以捣鼓一下啦～<br />\n 实在担心的话，就先收藏一下本帖子，等最近风头过去了在尝试吧</p>\n</div>\n<h2 id=\"极空间部署\"><a class=\"anchor\" href=\"#极空间部署\">#</a> 极空间部署</h2>\n<h3 id=\"下载镜像\"><a class=\"anchor\" href=\"#下载镜像\">#</a> 下载镜像</h3>\n<p>在仓库中搜索我的用户名 <code>ylsislove</code> ，选择 <code>wechatbot</code> ，下载最新版本即可</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030227517.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030228047.png\" alt=\"\" /></p>\n<h3 id=\"创建配置文件\"><a class=\"anchor\" href=\"#创建配置文件\">#</a> 创建配置文件</h3>\n<p>找一个位置，新建 <code>config.txt</code> ，内容如下，根据个人信息进行修改</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030230032.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030231212.png\" alt=\"\" /></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"api_key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your api key\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"auto_pass\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"session_timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"max_tokens\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gpt-3.5-turbo\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"temperature\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"reply_prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"来自机器人回复：\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"session_clear_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"清空会话\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"base_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.openai.com/v1/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property\">\"request_timeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参数含义参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lsc2lzbG92ZS93ZWNoYXRib3QjJUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2JUU4JUFGJUI0JUU2JTk4JThF\">配置文件说明</span></p>\n<div class=\"note info\">\n<p>国内用户注意设置好 base_url，base_url 设置稳定再访问，API 账户就不会出问题，我用了很长时间了都还在稳定使用～<br />\nbase_url 可以参考 https://github.com/Ice-Hazymoon/openai-scf-proxy 这个教程，设置一个稳定的代理域名即可。挂到腾讯云香港地区的轻量应用服务器上都行，我用的就是这个</p>\n</div>\n<h3 id=\"创建容器\"><a class=\"anchor\" href=\"#创建容器\">#</a> 创建容器</h3>\n<p>双击刚才下载的镜像，配置极其简单，像网络、端口、别名、环境都不用管，只需配置好 <code>文件夹路径</code> 和 <code>启动命令</code> 即可，如下</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030234539.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030234624.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030236817.png\" alt=\"\" /></p>\n<p>点击应用，bingo~，容器创建成功</p>\n<h3 id=\"扫码登录\"><a class=\"anchor\" href=\"#扫码登录\">#</a> 扫码登录</h3>\n<p>我们可以在容器的日志中看到我们要扫描的二维码，但控制台不好扫描，我们就把日志下载下来即可～</p>\n<p>下载后，用本地的记事本打开，看到二维码清晰的展现在我们面前了，爽～</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030240193.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030238171.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030249151.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030241329.png\" alt=\"\" /></p>\n<p>扫描成功后刷新日志，成功登录，接下来开始愉快的学习吧～</p>\n<h2 id=\"效果展示\"><a class=\"anchor\" href=\"#效果展示\">#</a> 效果展示</h2>\n<p class=\"gallery\" data-height=\"600\"><img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030216436.jpg\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030216410.jpg\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/04/03/202304030216301.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "工具篇",
                "ChatGPT"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/code-analysis/siyuan/20230401/",
            "url": "https://blog.aayu.today/skill/code-analysis/siyuan/20230401/",
            "title": "思源笔记源码解析之kernel篇（一）api",
            "date_published": "2023-04-01T14:06:19.000Z",
            "content_html": "<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能</p>\n<p>根据我的分析，该程序是一个基于 API 的笔记管理系统，使用 Go 语言编写，基于 Gin 框架和 Lute 引擎。它包含了多个文件和模块，用于实现不同的功能，例如：笔记本管理、笔记管理、文本编辑、图表管理、导入 / 导出、同步 / 备份、用户管理等。可以通过 API 接口调用这些功能。以下是每个文件的功能：</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>account.go</td>\n<td>用于处理用户账户相关的 API 请求</td>\n</tr>\n<tr>\n<td>ai.go</td>\n<td>提供 AI 语音合成的 API 接口</td>\n</tr>\n<tr>\n<td>asset.go</td>\n<td>用于上传、查看和下载笔记中使用的资源文件</td>\n</tr>\n<tr>\n<td>attr.go</td>\n<td>提供来源快捷方式操作的 API 接口</td>\n</tr>\n<tr>\n<td>av.go</td>\n<td>提供了音视频播放相关的 API 接口</td>\n</tr>\n<tr>\n<td>bazaar.go</td>\n<td>提供了安装和管理 bazaar 主题插件的 API 接口</td>\n</tr>\n<tr>\n<td>block.go</td>\n<td>处理块的增删改查请求，提供块层级、索引等信息</td>\n</tr>\n<tr>\n<td>block_op.go</td>\n<td>提供文本处理的 API 接口</td>\n</tr>\n<tr>\n<td>bookmark.go</td>\n<td>提供了书签相关的 API 接口</td>\n</tr>\n<tr>\n<td>clipboard.go</td>\n<td>处理剪贴板相关的 API 请求</td>\n</tr>\n<tr>\n<td>export.go</td>\n<td>导出笔记文档的接口</td>\n</tr>\n<tr>\n<td>extension.go</td>\n<td>添加、删除、获取扩展插件的 API 接口</td>\n</tr>\n<tr>\n<td>file.go</td>\n<td>管理笔记文件的 API 接口</td>\n</tr>\n<tr>\n<td>filetree.go</td>\n<td>管理笔记文件树的 API 接口</td>\n</tr>\n<tr>\n<td>format.go</td>\n<td>提供文本格式化相关的 API 接口</td>\n</tr>\n<tr>\n<td>graph.go</td>\n<td>管理图表的 API 接口</td>\n</tr>\n<tr>\n<td>history.go</td>\n<td>提供操作历史记录的 API 接口</td>\n</tr>\n<tr>\n<td>import.go</td>\n<td>导入笔记文档的 API 接口</td>\n</tr>\n<tr>\n<td>inbox.go</td>\n<td>管理收件箱的 API 接口</td>\n</tr>\n<tr>\n<td>lute.go</td>\n<td>提供 markdown 文档渲染相关的 API 接口</td>\n</tr>\n<tr>\n<td>notebook.go</td>\n<td>管理笔记本的 API 接口</td>\n</tr>\n<tr>\n<td>notification.go</td>\n<td>管理通知的 API 接口</td>\n</tr>\n<tr>\n<td>outline.go</td>\n<td>获取文档纲要的 API 接口</td>\n</tr>\n<tr>\n<td>ref.go</td>\n<td>管理快捷方式的 API 接口</td>\n</tr>\n<tr>\n<td>repo.go</td>\n<td>处理仓库相关的 API 请求</td>\n</tr>\n<tr>\n<td>riff.go</td>\n<td>添加、删除和管理卡片包的 API 接口</td>\n</tr>\n<tr>\n<td>router.go</td>\n<td>路由中间件级统一处理入口</td>\n</tr>\n<tr>\n<td>search.go</td>\n<td>管理全文搜索的 API 接口</td>\n</tr>\n<tr>\n<td>setting.go</td>\n<td>管理系统设置的 API 接口</td>\n</tr>\n<tr>\n<td>snippet.go</td>\n<td>管理代码片段的 API 接口</td>\n</tr>\n<tr>\n<td>sql.go</td>\n<td>处理 SQL 查询请求的 API 接口</td>\n</tr>\n<tr>\n<td>storage.go</td>\n<td>管理笔记存储相关的 API 接口</td>\n</tr>\n<tr>\n<td>sync.go</td>\n<td>处理同步 / 备份相关的 API 请求</td>\n</tr>\n<tr>\n<td>system.go</td>\n<td>管理系统功能的 API 接口</td>\n</tr>\n<tr>\n<td>tag.go</td>\n<td>处理标签相关的 API 请求</td>\n</tr>\n<tr>\n<td>template.go</td>\n<td>处理模板渲染相关的 API 请求</td>\n</tr>\n<tr>\n<td>transaction.go</td>\n<td>处理交易请求的 API 接口</td>\n</tr>\n<tr>\n<td>workspace.go</td>\n<td>管理工作空间的 API 接口</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"038accountgo\"><a class=\"anchor\" href=\"#038accountgo\">#</a> [0/38]account.go</h2>\n<p>此文件是 api 服务的账号相关接口实现的 Go 语言代码文件，主要包含了以下几个接口实现：</p>\n<ol>\n<li>开始免费试用（startFreeTrial）</li>\n<li>使用激活码（useActivationcode）</li>\n<li>检查激活码（checkActivationcode）</li>\n<li>注销账号（deactivateUser）</li>\n<li>用户登录（login）</li>\n</ol>\n<p>每个接口都有相应的处理逻辑，并返回对应的结果。在实现过程中，还引用了一些第三方的 Go 语言库，如 gin, gulu 等。</p>\n<h2 id=\"138aigo\"><a class=\"anchor\" href=\"#138aigo\">#</a> [1/38]ai.go</h2>\n<p>本文件名为  <code>api\\ai.go</code> ，是一个 Go 语言编写的应用程序文件，主要是关于人工智能的部分。程序使用了 Gin 框架和一些其他的依赖项库，如 gulu。</p>\n<p>主要包含两个函数：chatGPT 和 chatGPTWithAction。这两个函数的作用是使用模型进行文本聊天，其中 chatGPT 使用模型回答用户提出的问题，而 chatGPTWithAction 使用模型执行动作并更新模型。函数通过 HTTP 响应的方式返回处理结果。</p>\n<p>该程序遵守 GNU Affero 通用公共许可证，即可以自由地共享、使用和修改，但需要带上相应的协议声明和原始代码的许可证。</p>\n<h2 id=\"238assetgo\"><a class=\"anchor\" href=\"#238assetgo\">#</a> [2/38]asset.go</h2>\n<p>该文件是 Golang 编写的 Siyuan 笔记应用程序的一个 API 模块，提供了一系列操作笔记中资源（如图片、附件等）的 HTTP 接口，具有上传、下载、修改、删除等功能。主要函数包括：</p>\n<ul>\n<li>renameAsset: 重命名资源文件</li>\n<li>getDocImageAssets: 获取笔记中图片资源</li>\n<li>setFileAnnotation/getFileAnnotation: 设置和读取资源注释文本</li>\n<li>resolveAssetPath: 解析资源文件相对路径并获取绝对路径</li>\n<li>removeUnusedAsset/removeUnusedAssets/getUnusedAssets: 删除和查询未使用的资源文件</li>\n<li>uploadCloud: 将本地笔记中的资源上传至云存储</li>\n<li>insertLocalAssets: 将本地资源文件插入到笔记中</li>\n</ul>\n<p>此外，代码中还包含了一些错误处理代码（例如当发生错误时返回错误码和错误信息）和依赖库引用代码。</p>\n<h2 id=\"338-attrgo\"><a class=\"anchor\" href=\"#338-attrgo\">#</a> [3/38] attr.go</h2>\n<p>该文件是 SiYuan 笔记应用的 API 包的一部分，包含了若干个函数，实现了获取书签标签、获取块（block）属性、设置块属性、重置块属性等功能。每个函数都是一个 RESTful API 端点，使用 HTTP 协议提供服务。</p>\n<p>其中， <code>getBookmarkLabels</code>  函数用于获取所有的书签标签， <code>getBlockAttrs</code>  函数用于获取指定块的属性值， <code>setBlockAttrs</code>  函数用于设置指定块的属性值， <code>resetBlockAttrs</code>  函数用于将指定块的属性值重置为默认值。</p>\n<p>代码实现了参数校验和错误处理机制，并使用第三方库 Gulu 和 Gin 简化了代码逻辑和响应操作。</p>\n<h2 id=\"438-avgo\"><a class=\"anchor\" href=\"#438-avgo\">#</a> [4/38] av.go</h2>\n<p>该程序文件是 SiYuan 在构建数字花园时使用的一个 API 文件。</p>\n<p>此文件提供了一个 HTTP 处理程序函数（ <code>renderAttributeView</code> ），该函数允许通过 HTTP 请求从服务器获取一个指定的属性视图。该属性视图的 ID 通过 HTTP 请求的 JSON 主体中的 &quot;id&quot; 字段传递。</p>\n<p>此外，该程序文件还引入了其他依赖包，并使用了这些依赖包提供的工具类和函数。</p>\n<h2 id=\"538-bazaargo\"><a class=\"anchor\" href=\"#538-bazaargo\">#</a> [5/38] bazaar.go</h2>\n<p>该程序文件名是  <code>api\\bazaar.go</code> ，代码主要是实现了一个 API 接口，用于处理集市（Bazaar）的相关操作。</p>\n<p>其中包括：</p>\n<ul>\n<li>获取 Bazaar 包的 README 文件</li>\n<li>获取 Bazaar 小部件、获取已安装的小部件、安装 Bazaar 小部件、卸载 Bazaar 小部件</li>\n<li>获取 Bazaar 图标、获取已安装的图标、安装 Bazaar 图标、卸载 Bazaar 图标</li>\n<li>获取 Bazaar 模板、获取已安装的模板、安装 Bazaar 模板、卸载 Bazaar 模板</li>\n<li>以及获取 Bazaar 主题、获取已安装的主题、安装 Bazaar 主题和卸载 Bazaar 主题等操作。</li>\n</ul>\n<p>该程序主要基于 Golang 语言和 Gin 框架实现，其中还引入了其他第三方库进行支持。</p>\n<h2 id=\"638-blockgo\"><a class=\"anchor\" href=\"#638-blockgo\">#</a> [6/38] block.go</h2>\n<p>该文件是 Siyuan 内核中的一个 API 文件，提供了一系列操作块的 RESTful API。</p>\n<p>文件主要定义了一些函数，包括：</p>\n<ul>\n<li>获取标题子级 ID、获取标题子级 DOM、获取标题删除事务、获取标题层级事务</li>\n<li>获取文档信息</li>\n<li>获取内容单词计数、获取树的统计信息、获取块的单词计数</li>\n<li>转移块引用、交换块引用、设置块提醒、检查块是否折叠、检查块是否存在、获取最近更新的块、获取块引用文本、获取块引用 ID、根据文件注释 ID 获取块引用 ID、根据引用文本获取块定义 ID、获取块层级结构、获取块索引、获取块信息、获取块 DOM 和获取块 Kramdown 等。</li>\n</ul>\n<h2 id=\"738-block_opgo\"><a class=\"anchor\" href=\"#738-block_opgo\">#</a> [7/38] block_op.go</h2>\n<p>该程序文件是一个 Go 语言编写的 api 包中的代码文件，文件名为  <code>block_op.go</code> 。</p>\n<p>这个文件实现了一些操作 block（块）的函数，如插入、删除、更新等。</p>\n<p>这些操作将与文件系统交互，并且利用 gin 框架处理 HTTP 请求和响应。</p>\n<p>其中，最重要的依赖是 siyuan-note 项目的模型、文件系统、Lute 引擎和一些公用库。这个文件的主要作用是提供用于块级操作的 API。</p>\n<h2 id=\"838-bookmarkgo\"><a class=\"anchor\" href=\"#838-bookmarkgo\">#</a> [8/38] bookmark.go</h2>\n<p>该程序文件名为  <code>bookmark.go</code> ，位于  <code>api\\</code>  目录下。</p>\n<p>代码为 Go 语言编写的 API 接口，主要实现了获取、删除和重命名书签的功能。</p>\n<p>具体实现使用了  <code>gin</code>  框架提供的 API 开发接口。</p>\n<p>其中获取书签的方法是  <code>getBookmark</code> ，删除书签的方法是  <code>removeBookmark</code> ，重命名书签的方法是  <code>renameBookmark</code> 。该程序文件依赖于  <code>gulu</code>  和  <code>util</code>  两个引入包和  <code>model</code>  模块。</p>\n<h2 id=\"938-clipboardgo\"><a class=\"anchor\" href=\"#938-clipboardgo\">#</a> [9/38] clipboard.go</h2>\n<p>该程序文件是一个 Go 语言编写的 API 接口，文件名为  <code>clipboard.go</code> ，所在目录为 api，主要实现了读取剪贴板中的文件路径的功能。</p>\n<p>该接口使用了第三方库 clipboard 和 gulu，其中 gulu 是作者自己开发的一个工具包。接口将获取到的文件路径作为 JSON 数据返回给请求方，当没有文件路径时返回一个空数组。</p>\n<p>需要注意的是，在 Linux 平台下，不再支持 “粘贴为纯文本” 的操作，因此该接口在 Linux 平台下不会读取剪贴板中的文件路径。</p>\n<p>该程序文件采用 GNU Affero General Public License 开源协议。</p>\n<h2 id=\"1038-exportgo\"><a class=\"anchor\" href=\"#1038-exportgo\">#</a> [10/38] export.go</h2>\n<p>该程序文件名为  <code>api\\export.go</code> ，主要实现了 SiYuan 的导入和导出功能。</p>\n<p>该文件包含了多个函数来导出不同格式的 SiYuan 笔记，包括 Markdown、HTML、PDF 等。其中，每个函数都接收一个参数 c*gin.Context，从中提取需要导出的笔记的 ID、文件名等信息。</p>\n<p>这些函数都通过 model 包提供的接口来访问笔记本数据，将导出的结果返回给客户端。</p>\n<h2 id=\"1138-extensiongo\"><a class=\"anchor\" href=\"#1138-extensiongo\">#</a> [11/38] extension.go</h2>\n<p>该文件名为  <code>api\\extension.go</code>  的程序文件是一个 Go 语言写的 API 接口实现，主要实现了对 SiYuan 软件中的 “拷贝到笔记” 功能的支持，包含了上传文件、解析 HTML、替换图片等功能。具体包含函数 extensionCopy，其中主要包含了以下功能：</p>\n<ul>\n<li>获取参数信息，包括 dom、notebook 等信息。</li>\n<li>组织保存地址，处理文件名，防止文件名冲突。</li>\n<li>读取上传文件数据并保存到指定地址。</li>\n<li>解析 HTML 中的图片地址，将已上传的图片地址替换到 HTML 中。</li>\n<li>将最终处理后的文本信息以 JSON 的格式返回给前端。</li>\n</ul>\n<h2 id=\"1238-filego\"><a class=\"anchor\" href=\"#1238-filego\">#</a> [12/38] file.go</h2>\n<p>该程序实现了一个简单的用于操作文件的 API 接口，其中包括：</p>\n<ul>\n<li><code>copyFile</code> ：将一个文件从源位置复制到目标位置。</li>\n<li><code>getFile</code> ：获取一个文件，并在 HTTP 响应中返回。</li>\n<li><code>readDir</code> ：读取一个目录，并返回其中的所有文件和子目录。</li>\n<li><code>removeFile</code> ：删除指定位置的文件或目录。</li>\n<li><code>putFile</code> ：将一个文件或目录保存到指定位置。</li>\n</ul>\n<p>这些函数实现了基本的 CRUD （创建、读取、更新、删除）操作，可以用于搭建简单的文件服务。除此之外，该文件还依赖了一些第三方库，如  <code>gin</code> 、 <code>filelock</code>  等。</p>\n<h2 id=\"1338-filetreego\"><a class=\"anchor\" href=\"#1338-filetreego\">#</a> [13/38] filetree.go</h2>\n<p>该程序文件名为  <code>filetree.go</code> ，位于 api 文件夹下。</p>\n<p>该文件中定义了一系列接口函数，用以实现对 siyuan 笔记 app 中的文件树的一系列操作，包括获取、移动、删除、重命名笔记等。</p>\n<p>具体实现中涉及到了 siyuan-note/siyuan 项目中的一些模块和库，如文件系统、模板渲染以及 gin web 框架等。</p>\n<h2 id=\"1438-formatgo\"><a class=\"anchor\" href=\"#1438-formatgo\">#</a> [14/38] format.go</h2>\n<p>这个程序文件包含了名为 “api” 的包，它实现了两个名为 “netImg2LocalAssets” 和 “autoSpace” 的 API 端点，使用 gin 框架和 HTTP 协议。</p>\n<p>这些端点是通过处理 HTTP POST 请求来调用 “model” 包中的 “NetImg2LocalAssets” 和 “AutoSpace” 函数。</p>\n<p>这个程序的目的是在 Siyuan 笔记应用中提供这两个功能的 API 接口。</p>\n<h2 id=\"1538-graphgo\"><a class=\"anchor\" href=\"#1538-graphgo\">#</a> [15/38] graph.go</h2>\n<p>此程序文件是一个 Go 语言编写的 API，使用了 Gin 数据库框架以及一些 SiYuan 笔记应用的应用程序接口。</p>\n<p>它包含四个函数：resetGraph、resetLocalGraph、getGraph 和 getLocalGraph，这些函数的主要作用是重置全局或本地图表，获取全局或本地图表的信息。其中，resetGraph 和 resetLocalGraph 用于重置全局或本地图表，getGraph 和 getLocalGraph 用于获取全局或本地图表的信息。</p>\n<p>每个函数都在不同的 URL 上运行，并返回固定格式的 JSON 数据。</p>\n<h2 id=\"1638-historygo\"><a class=\"anchor\" href=\"#1638-historygo\">#</a> [16/38] history.go</h2>\n<p>该文件名是  <code>api\\history.go</code> ，是一个 Go 语言编写的 API 程序文件，提供了与笔记历史相关的功能函数，包括搜索笔记历史、获取历史记录项目、重建历史索引、清空工作区历史、获取文档历史内容、恢复文档历史、恢复资产历史、恢复笔记本历史。</p>\n<p>该程序文件使用了第三方库 gin，以及 suyuan-note/siyuan/kernel/model、suyuan-note/siyuan/kernel/util 等模块。</p>\n<p>程序代码使用了 GNU Affero 通用公共许可证。</p>\n<h2 id=\"1738-importgo\"><a class=\"anchor\" href=\"#1738-importgo\">#</a> [17/38] import.go</h2>\n<p>这是一个 Go 语言编写的 API 程序，包含三个函数： <code>importSY</code> 、 <code>importData</code>  和  <code>importStdMd</code> 。</p>\n<p>其中  <code>importSY</code>  函数用于导入  <code>.sy.zip</code>  格式的笔记， <code>importData</code>  函数用于导入一般数据文件， <code>importStdMd</code>  函数用于导入标准 Markdown 格式的笔记。这些函数都是通过 HTTP POST 方法接收数据，并返回 JSON 类型的结果。</p>\n<p>函数中使用了许多其它 Go 语言包来完成相关任务，如  <code>os</code> 、 <code>io</code> 、 <code>net/http</code> 、 <code>filepath</code>  等标准库，以及  <code>github.com/88250/gulu</code> 、 <code>github.com/gin-gonic/gin</code> 、 <code>github.com/siyuan-note/logging</code> 、 <code>github.com/siyuan-note/siyuan/kernel/model</code> 、 <code>github.com/siyuan-note/siyuan/kernel/util</code>  等第三方库。</p>\n<h2 id=\"1838-inboxgo\"><a class=\"anchor\" href=\"#1838-inboxgo\">#</a> [18/38] inbox.go</h2>\n<p>该程序文件名为 inbox.go，位于 api 目录下。该程序实现了三个 HTTP API 接口，分别为：</p>\n<ol>\n<li>removeShorthands：用于移除云端快捷方式，参数为 ids（待移除的快捷方式 ID 列表），返回值为成功移除的快捷方式数量。</li>\n<li>getShorthand：用于获取云端快捷方式的具体内容，参数为 id（快捷方式 ID），返回值为快捷方式的具体内容。</li>\n<li>getShorthands：用于获取云端快捷方式列表，参数为 page（页码），返回值为指定页码的快捷方式列表。</li>\n</ol>\n<p>这些 API 接口通过 GIN 框架进行封装，通过 HTTP 返回值进行数据传输，使用了 Gulu 和 Siyuan-Note 库的一些函数和方法。</p>\n<h2 id=\"1938-lutego\"><a class=\"anchor\" href=\"#1938-lutego\">#</a> [19/38] lute.go</h2>\n<p>该程序文件是一个 Go 语言编写的 API，文件名为 lute.go，位于 api 目录下。它实现了以下函数：</p>\n<ul>\n<li>copyStdMarkdown：将指定 ID 的脑图导出为标准 Markdown 格式。</li>\n<li>html2BlockDOM：将指定 HTML 转换为块级 DOM 并处理其中带有超链接的图片为本地引用。</li>\n<li>spinBlockDOM：将指定块级 DOM 中的语法转换为另一种语法。</li>\n</ul>\n<p>该程序文件引用了许多其他的库和函数，包括：</p>\n<ul>\n<li>gin-gonic/gin：实现了 HTTP Web 框架。</li>\n<li>88250/gulu：提供了一些 Go 语言工具库的封装。</li>\n<li>88250/lute：一个 Go 语言实现的 Markdown 渲染器。</li>\n<li>siyuan-note/filelock：提供了一种获取并持有文件锁的方法，以防止多个程序同时修改同一个文件。</li>\n</ul>\n<h2 id=\"2038-notebookgo\"><a class=\"anchor\" href=\"#2038-notebookgo\">#</a> [20/38] notebook.go</h2>\n<p>该文件名为  <code>api\\notebook.go</code> ，是一个 Golang 语言的程序文件。</p>\n<p>该文件定义了一系列函数，用于处理有关于笔记本的 API 请求。其中包括设置笔记本图标、修改笔记本的排序、重命名笔记本、删除笔记本、创建笔记本、打开笔记本、关闭笔记本、获取笔记本的配置信息和列出所有笔记本等操作。</p>\n<p>这些函数将在 API 服务的实现中得到调用，用于处理客户端的 API 请求，并返回相应的响应结果。</p>\n<h2 id=\"2138-notificationgo\"><a class=\"anchor\" href=\"#2138-notificationgo\">#</a> [21/38] notification.go</h2>\n<p>该文件是一个 Go 语言编写的与 API 相关的文件，文件路径为  <code>api\\notification.go</code> 。</p>\n<p>该文件的主要作用是为了实现在 SiYuan 系统中发送通知的功能，其中包括推送消息和推送错误消息。该文件主要使用了  <code>gin</code>  框架来处理请求，同时也引入了  <code>gulu</code>  和  <code>util</code>  工具包来辅助实现功能。具体来说，该文件实现了  <code>pushMsg()</code>  和  <code>pushErrMsg()</code>  两个函数，分别用于推送普通消息和错误消息。</p>\n<p>在函数中会根据传入的参数构造一条推送消息，并调用  <code>util</code>  中的函数来将消息推送给相应的接收者。在消息发送成功后，会返回一个包含消息 ID 的 JSON 格式的响应。</p>\n<h2 id=\"2238-outlinego\"><a class=\"anchor\" href=\"#2238-outlinego\">#</a> [22/38] outline.go</h2>\n<p>该程序文件是一个 Golang 语言编写的 API 文件，文件名为  <code>outline.go</code> ，属于 api 目录下。</p>\n<p>它提供了一个函数 getDocOutline，负责从指定的笔记文档中获取文档纲要（outline），并以 JSON 格式返回。该函数使用了 gin 和 gulu 库对 HTTP 请求和 JSON 数据进行处理，同时也引用了 model 和 util 库中的函数来实现所需的功能。</p>\n<p>函数的实现过程中，通过请求参数指定了需要获取纲要的笔记文档的 ID，若参数错误则返回错误信息，若获取过程中出现异常也会返回错误信息。</p>\n<h2 id=\"2338-refgo\"><a class=\"anchor\" href=\"#2338-refgo\">#</a> [23/38] ref.go</h2>\n<p>这是一个名为  <code>ref.go</code>  的 Go 语言程序文件，位于 api\\ 目录下。它实现了 5 个函数：</p>\n<ol>\n<li>refreshBacklink：刷新某个文档的反向链接。</li>\n<li>getBackmentionDoc：获取某个文档被引用的文档列表。</li>\n<li>getBacklinkDoc：获取某个文档引用的文档列表。</li>\n<li>getBacklink2：获取某个文档的反向链接信息，包括反向链接列表、被反向链接的文档列表等。</li>\n<li>getBacklink：获取某个文档的反向链接信息，与 getBacklink2 类似但参数和返回值有所不同。</li>\n</ol>\n<h2 id=\"2438-repogo\"><a class=\"anchor\" href=\"#2438-repogo\">#</a> [24/38] repo.go</h2>\n<p>文件名为  <code>api\\repo.go</code> ，该文件是一个 Go 语言程序，主要提供了一系列操作仓库的 API 接口，包括如下函数：</p>\n<ol>\n<li>func openRepoSnapshotDoc (c *gin.Context)，获取打开快照文档</li>\n<li>func diffRepoSnapshots (c *gin.Context)，对比快照</li>\n<li>func getCloudSpace (c *gin.Context)，获取云空间</li>\n<li>func checkoutRepo (c *gin.Context)，检出仓库</li>\n<li>func downloadCloudSnapshot (c *gin.Context)，下载云快照</li>\n<li>func uploadCloudSnapshot (c *gin.Context)，上传云快照</li>\n<li>func getRepoSnapshots (c *gin.Context)，获取仓库快照</li>\n<li>func getCloudRepoTagSnapshots (c *gin.Context)，获取云仓库标签快照</li>\n<li>func removeCloudRepoTagSnapshot (c *gin.Context)，删除云仓库标签快照</li>\n<li>func getRepoTagSnapshots (c *gin.Context)，获取仓库标签快照</li>\n<li>func removeRepoTagSnapshot (c *gin.Context)，删除仓库标签快照</li>\n<li>func createSnapshot (c *gin.Context)，创建快照</li>\n<li>func tagSnapshot (c *gin.Context)，标记快照</li>\n<li>func importRepoKey (c *gin.Context)，导入仓库密钥</li>\n<li>func initRepoKeyFromPassphrase (c *gin.Context)，从口令初始化仓库密钥</li>\n<li>func initRepoKey (c *gin.Context)，初始化仓库密钥</li>\n<li>func resetRepo (c *gin.Context)，重置仓库</li>\n</ol>\n<p>这些 API 接口的实现依赖于一些 Go 包，如 gin-gonic 和 gulu。</p>\n<h2 id=\"2538-riffgo\"><a class=\"anchor\" href=\"#2538-riffgo\">#</a> [25/38] riff.go</h2>\n<p>此文件为 SiYuan 笔记应用的 API 实现，包含以下功能：</p>\n<ul>\n<li>获取笔记本中的卡片</li>\n<li>获取树状结构中的卡片</li>\n<li>获取卡包中的卡片</li>\n<li>复习卡片</li>\n<li>跳过卡片的复习</li>\n<li>获取笔记本中的待复习卡片</li>\n<li>获取树状结构中的待复习卡片</li>\n<li>获取卡包中的待复习卡片</li>\n<li>删除卡包中的卡片</li>\n<li>添加卡片到卡包</li>\n<li>重命名卡包</li>\n<li>删除卡包</li>\n<li>创建卡包</li>\n<li>获取所有卡包的数据，包括 ID、名称、大小、创建时间、更新时间。</li>\n</ul>\n<h2 id=\"2638-routergo\"><a class=\"anchor\" href=\"#2638-routergo\">#</a> [26/38] router.go</h2>\n<p>该文件是一个 Go 语言编写的 API 路由文件，用于处理各种 HTTP 请求。</p>\n<p>其中，不需要鉴权的请求包括获取系统启动进度、获取系统版本号等；需要鉴权的请求包括设置工作空间、创建笔记本、搜索笔记等。</p>\n<p>文件中主要使用了 Gin 框架来处理 HTTP 请求，同时还调用了其他模块中的函数来完成相应的业务逻辑。</p>\n<h2 id=\"2738-searchgo\"><a class=\"anchor\" href=\"#2738-searchgo\">#</a> [27/38] search.go</h2>\n<p>这是一个 Go 语言的程序文件，文件名为  <code>search.go</code> ，包含了一些用于搜索的 API 函数。</p>\n<p>其中包括：findReplace、searchAsset、searchTag、searchWidget、removeTemplate、searchTemplate、searchEmbedBlock、searchRefBlock、fullTextSearchBlock 等函数。</p>\n<p>这些函数用于查找、替换、删除、搜索各种不同类型的内容，如标签、模板、嵌入块、引用块等。这些搜索功能可以通过 API 调用，以便在程序中方便地使用。</p>\n<h2 id=\"2838-settinggo\"><a class=\"anchor\" href=\"#2838-settinggo\">#</a> [28/38] setting.go</h2>\n<p>该程序文件实现了对 SiYuan 笔记应用的设置，包括 AI、闪卡、账户、编辑器、导出、文件树、搜索、快捷键、外观、云用户、自定义 CSS、表情等设置的修改和获取。</p>\n<p>其中，每个设置对应了一个 HTTP 请求处理函数，通过接收请求中携带的参数来修改相应的配置项，以此实现对 SiYuan 笔记应用的个性化设置。</p>\n<h2 id=\"2938-snippetgo\"><a class=\"anchor\" href=\"#2938-snippetgo\">#</a> [29/38] snippet.go</h2>\n<p>该程序文件是一个 Go 语言编写的 API 文件，文件名为 snippet.go，主要包含四个函数：serveSnippets、getSnippet、setSnippet 和 removeSnippet。</p>\n<p>serveSnippets 函数用于处理访问 /snippets/ 文件路径下的资源，会先从配置文件中读取该资源的内容，如果加载失败则返回 404 错误，并且如果配置文件中匹配到了该资源的名称和类型则返回其配置文件中的内容，其他情况则在文件系统中查找该资源，并返回其内容。</p>\n<p>getSnippet 函数用于读取配置文件中的所有代码片段，可按照类型和是否已禁用进行过滤，并返回查询到的代码片段数组。</p>\n<p>setSnippet 函数用于修改配置文件中的代码片段，会根据请求参数中的 snippets 数组来更新相应的配置项。</p>\n<p>removeSnippet 函数用于删除某个代码片段，并返回删除的代码片段。</p>\n<h2 id=\"3038-sqlgo\"><a class=\"anchor\" href=\"#3038-sqlgo\">#</a> [30/38] sql.go</h2>\n<p>该程序是一个基于 Gin 框架的 API 服务，文件名为  <code>sql.go</code> 。</p>\n<p>它提供了一个名为 SQL 的函数，该函数接收来自 API 请求中的 SQL 语句语句，然后通过调用 Siyuan 的 SQL 内核组件来执行这些语句。如果 SQL 执行成功，则函数将返回查询结果。如果 SQL 执行时发生错误，则函数将返回一个错误代码和错误信息。</p>\n<h2 id=\"3138-storagego\"><a class=\"anchor\" href=\"#3138-storagego\">#</a> [31/38] storage.go</h2>\n<p>本文件为 api 模块中的一个程序文件，文件名为  <code>storage.go</code> ，主要包含了一组存储相关的函数方法。</p>\n<p>其中包括获取最近文档、删除标准、设置标准、获取标准、删除本地存储值、设置本地存储值、设置本地存储、获取本地存储等方法。这些方法主要是通过调用 model 模块中的相关函数，来实现对存储的操作。</p>\n<p>同时，也使用了一些第三方模块和工具函数，如 gin、gulu 和 util 等。最后，返回给调用者的数据都是通过 JSON 格式的数据结构来实现的。</p>\n<h2 id=\"3238-syncgo\"><a class=\"anchor\" href=\"#3238-syncgo\">#</a> [32/38] sync.go</h2>\n<p>该程序是 Go 语言编写的一个用于支持云同步功能的 API 程序文件，文件名为  <code>sync.go</code> ，属于 api 包，主要实现了以下功能：</p>\n<ul>\n<li>查询是否已经进行启动同步（getBootSync）</li>\n<li>执行同步（performSync）</li>\n<li>执行启动同步（performBootSync）</li>\n<li>列出云同步目录（listCloudSyncDir）</li>\n<li>移除云同步目录（removeCloudSyncDir）</li>\n<li>创建云同步目录（createCloudSyncDir）</li>\n<li>设置同步生成冲突文档（setSyncGenerateConflictDoc）</li>\n<li>设置同步启用（setSyncEnable）</li>\n<li>设置同步模式（setSyncMode）</li>\n<li>设置同步提供者（setSyncProvider）</li>\n<li>设置同步提供者为 S3（setSyncProviderS3）&lt;br /&gt;</li>\n<li>设置同步提供者为 WebDAV（setSyncProviderWebDAV）</li>\n<li>设置云同步目录（setCloudSyncDir）</li>\n</ul>\n<h2 id=\"3338-systemgo\"><a class=\"anchor\" href=\"#3338-systemgo\">#</a> [33/38] system.go</h2>\n<p>该程序文件实现了 SiYuan 笔记系统的 API 功能。程序文件共包含多个函数：</p>\n<ul>\n<li>getEmojiConf 函数：获取表情包配置信息。</li>\n<li>checkUpdate 函数：检查系统更新。</li>\n<li>exportLog 函数：导出系统日志。</li>\n<li>getConf 函数：获取系统配置信息。</li>\n<li>setUILayout 函数：设置 UI 布局。</li>\n<li>setAccessAuthCode 函数：设置访问权限代码。</li>\n<li>getSysFonts 函数：获取系统字体。</li>\n<li>version 函数：获取系统版本。</li>\n<li>currentTime 函数：获取当前时间戳。</li>\n<li>bootProgress 函数：获取系统启动进程。</li>\n<li>setAppearanceMode 函数：设置系统外观模式。</li>\n<li>setNetworkServe 函数：设置网络服务。</li>\n<li>setGoogleAnalytics 函数：设置谷歌分析。</li>\n<li>setUploadErrLog 函数：设置上传错误日志。</li>\n<li>setAutoLaunch 函数：设置自动启动。</li>\n<li>setDownloadInstallPkg 函数：设置是否下载安装包。</li>\n<li>setNetworkProxy 函数：设置网络代理。</li>\n<li>addUIProcess 函数：添加 UI 进程。</li>\n<li>exit 函数：退出系统。</li>\n</ul>\n<p>这些函数实现了系统的一些基本功能，例如获取配置信息、修改系统设置、检查系统更新、导出系统日志、退出系统等。</p>\n<h2 id=\"3438-taggo\"><a class=\"anchor\" href=\"#3438-taggo\">#</a> [34/38] tag.go</h2>\n<p>该程序文件名为  <code>tag.go</code> ，位于 api 目录下。程序使用了 Go 语言编写，实现了一些关于标签的 API 接口。</p>\n<p>其中，getTag 函数用于获取所有标签；renameTag 函数用于重命名标签；removeTag 函数用于删除标签。</p>\n<p>程序引用了其他的库，如 gin、gulu、model、util 等。该程序还使用了 GNU Affero General Public License 开源协议。</p>\n<h2 id=\"3538-templatego\"><a class=\"anchor\" href=\"#3538-templatego\">#</a> [35/38] template.go</h2>\n<p>这是一个 Go 语言编写的 API 函数文件，文件名为  <code>template.go</code> ，位于 api 目录下。该文件中包含 3 个处理 HTTP 请求的函数：renderSprig、docSaveAsTemplate 和 renderTemplate。</p>\n<p>renderSprig 函数通过接受一个请求，用给定的模板参数进行渲染，最终将渲染结果作为返回值传递到请求的响应中。</p>\n<p>docSaveAsTemplate 函数接受一个请求，将给定的文档 ID 的内容保存成模板。</p>\n<p>renderTemplate 函数接受一个请求，渲染给定的模板，最终将渲染结果作为响应发送给请求端。其中，请求会传送两个参数：path 和 id，分别为模板路径和对应文档的 ID。</p>\n<p>这些函数对不同的 HTTP 请求提供了不同的处理方式，可以供不同的客户端或应用程序使用。</p>\n<h2 id=\"3638-transactiongo\"><a class=\"anchor\" href=\"#3638-transactiongo\">#</a> [36/38] transaction.go</h2>\n<p>该文件是一个 Go 语言编写的 API 模块，包含了一系列函数用于处理交易请求。该模块在接收到 HTTP 请求后，解析请求的 JSON 数据，将其转换成事务对象，并将该事务的状态与数据提供给 kernel 中的其他函数进行处理，最后将结果以 JSON 格式返回给客户端。其中函数 performTransactions 处理交易请求，函数 pushTransactions 用于将交易结果推送到客户端。</p>\n<h2 id=\"3738-workspacego\"><a class=\"anchor\" href=\"#3738-workspacego\">#</a> [37/38] workspace.go</h2>\n<p>该文件是 SiYuan 组件的一部分，主要实现工作空间相关的 API 功能。程序通过框架 Gin 来提供 Web 服务，提供以下几个 API：</p>\n<ol>\n<li><code>/api/workspace/createWorkspaceDir</code> ：用于创建工作空间文件夹；</li>\n<li><code>/api/workspace/removeWorkspaceDir</code> ：用于删除已有的工作空间；</li>\n<li><code>/api/workspace/getMobileWorkspaces</code> ：用于获取移动设备上的工作空间列表；</li>\n<li><code>/api/workspace/getWorkspaces</code> ：用于获取所有工作空间列表信息；</li>\n<li><code>/api/workspace/setWorkspaceDir</code> ：用于切换工作空间。</li>\n</ol>\n<p>此外，还定义了一个  <code>Workspace</code>  结构体，主要用于展示工作空间信息。在实现各个 API 功能的过程中，还需要使用到其他模块提供的函数，例如： <code>util.ReadWorkspacePaths()</code>  读取工作空间路径列表等。</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "源码解析",
                "思源笔记",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/skill/tools/20230329/",
            "url": "https://blog.aayu.today/skill/tools/20230329/",
            "title": "如何用New Bing进行辅助科研",
            "date_published": "2023-03-29T13:00:51.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>多说无益，直接上图</p>\n<h2 id=\"技巧\"><a class=\"anchor\" href=\"#技巧\">#</a> 技巧</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292102800.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292102843.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292102842.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292102850.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292103596.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292103856.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292104293.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292104472.png\" alt=\"\" /></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292104688.png\" alt=\"\" /></p>\n<p>我是真的被震撼到了，这篇论文中我之前一直有一个点没搞懂，就是如何判断敲击事件的发生的，woc 今天让 new bing 去读，能给我详细的解释清论文的原理，还能给我写出示例代码 😱</p>\n<p>就给人一种感觉就是，有一个导师能给你详细的讲解论文。最后还尝试了下 new bing 能不能读公式，依旧牛逼，虽然公式找错了，但它是真能读懂公式啊</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/29/202303292105534.png\" alt=\"\" /></p>\n<p>最后想感慨就是，限制 new bing 或 chatgpt 的已经不是模型能力问题了，而是我的想象力和提问方式 😑</p>\n",
            "tags": [
                "不看会后悔的实用技巧分享",
                "工具篇",
                "New Bing"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20230311/",
            "url": "https://blog.aayu.today/nas/zspace/20230311/",
            "title": "Docker版思源笔记加ChatGPT的超强搭配使用~",
            "date_published": "2023-03-11T08:16:27.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>前几天捣鼓了<a href=\"https://blog.aayu.today/nas/zspace/20230224/\">自助编译极空间 Z4 思源笔记（siyuan）Docker 项目</a>，思源笔记的开发者 D 大和 V 姐更新真的是太频繁了，几乎每周都会有新的功能和特性，最让我感动的是我凌晨去 GitHub 的 Issues 上给他们提了些<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpeXVhbi1ub3RlL3NpeXVhbi9pc3N1ZXMvNzYxNQ==\">改进意见</span>，结果当天就把功能完善了，所以真的很想让我吹一波🤣</p>\n<p>最新版本的思源笔记已经更新到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpeXVhbi1ub3RlL3NpeXVhbi9yZWxlYXNlcy90YWcvdjIuNy45\"> v2.7.9</span> 了，在该版本中完善了 <code>针对内容块的人工智能辅助支持</code> ，对，就是可以在思源笔记里使用 OpenAI 的 Chat API 对笔记内容：</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 续写</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 翻译</label>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> 中文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> 日文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> 韩文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 英文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_6\"> 西班牙文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_7\"> 法文</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_8\"> 德文</label></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_9\"> 提取摘要</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_10\"> 头脑风暴</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_11\"> 修正语法和拼写</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_12\"> 自定义操作...</label></li>\n</ul>\n<div class=\"note primary\">\n<p>有了这些功能后，我觉得思源笔记已经很适合进行学术论文的归纳和整理了，真的是未来可期啊～</p>\n</div>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<p>我也紧跟思源笔记官方的脚步，从 v2.7.6 开始每个发行版本我都会把它编译成适配于极空间 Z4 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yZXBvc2l0b3J5L2RvY2tlci95bHNpc2xvdmUvc2l5dWFu\"> Docker 镜像</span>，所以如果有小伙伴也用的是极空间 Z4，就可以用我编译好的镜像去尝试一下啦～</p>\n<div class=\"note info\">\n<p>其他的部署环境可以直接用思源笔记官方的 Docker 镜像就行：b3log/siyuan:latest<br />\n 本人编译的镜像只适合极空间 Z4 设备哦</p>\n</div>\n<p>拉取最新的 v2.7.9 镜像版本，容器配置如下</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111602935.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111603901.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111603755.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111604932.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111604137.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111608817.png\" alt=\"\" /></p>\n<div class=\"note info\">\n<p>国内使用 openai api key 是需要点手段的，可以通过配置 <code>SIYUAN_OPENAI_API_BASE_URL</code>  或 <code>SIYUAN_OPENAI_API_PROXY</code>  环境变量来解决，这两个环境变量使用一个就行，不然多层代理后网络响应时间会变长。</p>\n<ul>\n<li>SIYUAN_OPENAI_API_BASE_URL：默认值为 <code>https://api.openai.com/v1</code> ，可以配置成 <code>https://你的代理域名/v1</code></li>\n<li>SIYUAN_OPENAI_API_PROXY：如果自己会挂代理，就可以配置成诸如 <code>socks5://127.0.0.1:10808</code>  的值</li>\n</ul>\n</div>\n<p>以上配置好后，应用容器即可开始愉快的玩耍啦～</p>\n<h2 id=\"体验\"><a class=\"anchor\" href=\"#体验\">#</a> 体验</h2>\n<h3 id=\"续写\"><a class=\"anchor\" href=\"#续写\">#</a> 续写</h3>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111623782.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111624662.png\" alt=\"\" /></p>\n<h3 id=\"翻译和提取摘要\"><a class=\"anchor\" href=\"#翻译和提取摘要\">#</a> 翻译和提取摘要</h3>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111632566.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111634737.png\" alt=\"\" /></p>\n<h3 id=\"头脑风暴\"><a class=\"anchor\" href=\"#头脑风暴\">#</a> 头脑风暴</h3>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111636897.png\" alt=\"\" /></p>\n<h3 id=\"修正语法和拼写\"><a class=\"anchor\" href=\"#修正语法和拼写\">#</a> 修正语法和拼写</h3>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111643940.png\" alt=\"\" /></p>\n<h3 id=\"自定义操作\"><a class=\"anchor\" href=\"#自定义操作\">#</a> 自定义操作</h3>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111644804.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/03/11/202303111645273.png\" alt=\"\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>未来可期～</p>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "极空间",
                "思源笔记"
            ]
        },
        {
            "id": "https://blog.aayu.today/artificial-intelligence/basic/20230208/",
            "url": "https://blog.aayu.today/artificial-intelligence/basic/20230208/",
            "title": "Win11基于WSL2安装CUDA、cuDNN和TensorRT",
            "date_published": "2023-02-28T13:22:51.000Z",
            "content_html": "<h2 id=\"2023-03-06-更新\"><a class=\"anchor\" href=\"#2023-03-06-更新\">#</a> 2023-03-06 更新</h2>\n<div class=\"note info\">\n<p>如果有小伙伴看了 2023-03-05 更新，发现设置环境变量后运行 cuda 代码在链接过程中仍然会有报错问题啥的，那我这里建议，先别管 2023-03-05 更新的内容了，还是按照我博客里的安装步骤一步一步往下安装，用 <code>sudo apt install nvidia-cuda-toolkit</code>  命令去安装 nvcc，也不需要配置环境变量了。因为博客里的安装步骤是我亲自执行过的，在我的 WSL2 环境里是一点问题都没有。</p>\n<p>如果跟着我的博客步骤走，发现在测试 <code>./mnistCUDNN</code>  时有问题，那就再根据我 2023-03-05 更新的内容尝试一下。不过这里我觉得可以先别卸载 <code>nvidia-cuda-toolkit</code> ，先去配置环境变量，然后跑代码看有没有问题，没有问题的话那就最好啦，如果还有问题，那就卸载 <code>nvidia-cuda-toolkit</code> ，配置好环境变量，再重启下，然后再跑下代码看看～</p>\n<p>目前根据小伙伴的反映，就先记录到这里吧，后面有新情况也会继续更新的～</p>\n</div>\n<h2 id=\"2023-03-05-更新\"><a class=\"anchor\" href=\"#2023-03-05-更新\">#</a> 2023-03-05 更新</h2>\n<div class=\"note info\">\n<p>有小伙伴反映，按照 NVIDIA 官网命令安装完 CUDA 后，nvcc 实际上也是被成功安装啦，且 nvcc 的版本和我们选择 CUDA 的版本是保持一致的。但如果再运行 <code>sudo apt install nvidia-cuda-toolkit</code>  命令，就会导致 nvcc 的版本被覆盖为低版本。</p>\n<p>比如，我们选择 CUDA 的版本是 11.8，那安装完 CUDA 后，我们是可以在 <code>/usr/local/cuda/bin</code>  目录下找到 nvcc 可执行文件的，在那个目录下运行 <code>./nvcc -V</code>  就可以看到版本和 CUDA 保持一致，也是 11.8。所以实际上我们 <code>不需要</code> 再运行 <code>sudo apt install nvidia-cuda-toolkit</code>  命令安装 nvcc 啦，只需要再安装完 CUDA 后，配置下环境变量即可，如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CPATH</span><span class=\"token operator\">=</span>/usr/local/cuda-11.8/include:<span class=\"token variable\">$CPATH</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/usr/local/cuda-11.8/lib64:<span class=\"token variable\">$LD_LIBRARY_PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/cuda-11.8/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CUDA_ROOT</span><span class=\"token operator\">=</span>/usr/local/cuda-11.8</pre></td></tr></table></figure><p>当然，如果你运行了 <code>sudo apt install nvidia-cuda-toolkit</code>  命令，从我博客里记录的图片可以看到 nvcc 的版本被覆盖为 10.1 啦，在我的 WSL2 环境里，10.1 的 nvcc 版本并没有什么问题，后面用 <code>./mnistCUDNN</code>  测试也是成功哒～</p>\n<p>但小伙伴测试说会报 <code>CUDA driver version is insufficient for CUDA runtime version</code>  版本不匹配的错误，所以后面的小伙伴可以参考下，先不要运行 <code>sudo apt install nvidia-cuda-toolkit</code>  命令，直接根据 NVIDIA 官网安装完 CUDA，然后配置下环境变量即可～</p>\n<p>如果已经用 <code>sudo apt install nvidia-cuda-toolkit</code>  命令安装完了，测试也真报错了，就卸载掉 nvidia-cuda-toolkit，然后再配置下环境变量，再测试下看看吧～</p>\n</div>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>之前我写了一篇博客：<a href=\"https://blog.aayu.today/artificial-intelligence/basic/20221217/\">Win11 安装 WSL2 和 Nvidia 驱动</a>，记录了在 WSL2 里安装 CUDA，当时我选择了第二种安装方式，即用 WSL2 里的 MiniConda 去安装的 PyTorch 和 CUDA 等相关库，最近在使用中发现了这种方式的不足，即使用 <code>cuda</code>  和 <code>nvcc</code>  等命令时都要切换到 conda 相关环境下才能使用。比如我之前在 <code>py38</code>  环境下安装的，当我进入终端处于 <code>base</code>  环境下，nvcc 命令是不能使用哒</p>\n<p>最近也在跟着恩培老师学 TensorRT，担忧用 MiniConda 安装的 CUDA 等库可能导致 TensorRT 安装失败，所以这次就试试直接在 <code>base</code>  环境下用上一篇博客的第一种方式安装 <code>cuda</code> 、 <code>cudnn</code>  和 <code>tensorrt</code>  吧～</p>\n<p>结果也是很顺利的安装成功啦，便在此记录下来哈哈～</p>\n<h2 id=\"tensorrt介绍\"><a class=\"anchor\" href=\"#tensorrt介绍\">#</a> TensorRT 介绍</h2>\n<ul>\n<li>NVIDIA® TensorRT™是一个用于高性能深度学习的推理框架，能够在 NVIDIA GPU 上实现低延迟、高吞吐量的部署</li>\n<li>TensorRT 包含用于训练好的模型的优化器，以及用于执行推理的 runtime</li>\n<li>它可以与 TensorFlow、PyTorch 和 MXNet 等训练框架相辅相成地工作</li>\n</ul>\n<h2 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<h3 id=\"cuda-driver\"><a class=\"anchor\" href=\"#cuda-driver\">#</a> CUDA Driver</h3>\n<p>使用 CUDA 前，要求 GPU 驱动与 <code>cuda</code>  的版本要匹配，匹配关系如下：</p>\n<blockquote>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vY3VkYS9jdWRhLXRvb2xraXQtcmVsZWFzZS1ub3Rlcy9pbmRleC5odG1sI2N1ZGEtbWFqb3ItY29tcG9uZW50LXZlcnNpb25zX190YWJsZS1jdWRhLXRvb2xraXQtZHJpdmVyLXZlcnNpb25z\">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#cuda-major-component-versions__table-cuda-toolkit-driver-versions</span></p>\n</blockquote>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012238954.png\" alt=\"\" width=\"800px\" /></p>\n<p>安装可以参考我之前的 WSL2 博客吖：<a href=\"https://blog.aayu.today/artificial-intelligence/basic/20221217/\">Win11 安装 WSL2 和 Nvidia 驱动</a></p>\n<h4 id=\"检查安装\"><a class=\"anchor\" href=\"#检查安装\">#</a> 检查安装</h4>\n<p>输入 <code>nvidia-smi</code>  命令，查看 GPU 驱动版本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> aayu@AayuComputer-Pro:~$ nvidia-smi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Tue Feb <span class=\"token number\">28</span> 00:58:02 <span class=\"token number\">2023</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-----------------------------------------------------------------------------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span> NVIDIA-SMI <span class=\"token number\">525.65</span>       Driver Version: <span class=\"token number\">527.56</span>       CUDA Version: <span class=\"token number\">12.0</span>     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>-------------------------------+----------------------+----------------------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> GPU  Name        Persistence-M<span class=\"token operator\">|</span> Bus-Id        Disp.A <span class=\"token operator\">|</span> Volatile Uncorr. ECC <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> Fan  Temp  Perf  Pwr:Usage/Cap<span class=\"token operator\">|</span>         Memory-Usage <span class=\"token operator\">|</span> GPU-Util  Compute M. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>               MIG M. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">0</span>  NVIDIA GeForce <span class=\"token punctuation\">..</span>.  On   <span class=\"token operator\">|</span> 00000000:01:00.0  On <span class=\"token operator\">|</span>                  N/A <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> N/A   40C    P8    13W / 139W <span class=\"token operator\">|</span>   1668MiB /  6144MiB <span class=\"token operator\">|</span>      <span class=\"token number\">6</span>%      Default <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>                               <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>                  N/A <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+-------------------------------+----------------------+----------------------+</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+-----------------------------------------------------------------------------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span> Processes:                                                                  <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>  GPU   GI   CI        PID   Type   Process name                  GPU Memory <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span>        ID   ID                                                   Usage      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">|</span>    <span class=\"token number\">0</span>   N/A  N/A        <span class=\"token number\">23</span>      G   /Xwayland                       N/A      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>+-----------------------------------------------------------------------------+</pre></td></tr></table></figure><p>可以看到当前安装的驱动版本是 <code>527.56</code> ，后面的 <code>CUDA Version: 12.0</code>  是指当前驱动支持的最高 CUDA 版本～</p>\n<h3 id=\"安装cuda\"><a class=\"anchor\" href=\"#安装cuda\">#</a> 安装 CUDA</h3>\n<p>在 Nvidia 官网选择对应版本：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLXRvb2xraXQtYXJjaGl2ZQ==\">https://developer.nvidia.com/cuda-toolkit-archive</span></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012249965.png\" alt=\"\" width=\"800px\" /></p>\n<p>比如我选择的是 <code>11.8</code>  版本，选择 <code>Linux</code> ， <code>x86_64</code> ， <code>WSL-Ubuntu</code> ， <code>2.0</code> ， <code>deb(local)</code> ，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012249980.png\" alt=\"\" width=\"800px\" /></p>\n<p>安装命令已经给出啦，如下，直接在 WSL2 终端执行就好～</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wget</span> https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> dpkg -i cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /var/cuda-repo-wsl-ubuntu-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span> cuda</pre></td></tr></table></figure><p>成功安装如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012250963.png\" alt=\"\" width=\"800px\" /></p>\n<h3 id=\"安装nvcc\"><a class=\"anchor\" href=\"#安装nvcc\">#</a> 安装 nvcc</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nvidia-cuda-toolkit</pre></td></tr></table></figure><p>安装完后重启电脑，检查安装结果，成功如下图～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012251060.png\" alt=\"\" /></p>\n<h3 id=\"安装cudnn\"><a class=\"anchor\" href=\"#安装cudnn\">#</a> 安装 cuDNN</h3>\n<p>下载安装包：访问：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS96aC1jbi9jdWRubiVFRiVCQyU4QyVFOSU4MCU4OSVFNiU4QiVBOSVFNSVBRiVCOSVFNSVCQSU5NCVFNyU5QSU4NCVFNyU4OSU4OCVFNiU5QyVBQyVFRiVCQyU4QyVFNCVCOCU4QiVFOCVCRCVCRCVFNSVBRiVCOSVFNSVCQSU5NCVFNyU5QSU4NCVFNSVBRSU4OSVFOCVBMyU4NSVFNSU4QyU4NSVFRiVCQyU4OCVFNSVCQiVCQSVFOCVBRSVBRSVFNCVCRCVCRiVFNyU5NCVBOERlYmlhbiVFNSU4QyU4NSVFNSVBRSU4OSVFOCVBMyU4NSVFRiVCQyU4OQ==\">https://developer.nvidia.com/zh-cn/cudnn，选择对应的版本，下载对应的安装包（建议使用 Debian 包安装）</span></p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012252029.png\" alt=\"\" /></p>\n<p>比如我下载的是：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9kb3dubG9hZHMvYzExOC1jdWRubi1sb2NhbC1yZXBvLXVidW50dTIwMDQtODcwODQxMC0xYW1kNjRkZWI=\">Local Installer for Ubuntu20.04 x86_64 (Deb)</span>，下载后的文件名为 <code>cudnn-local-repo-ubuntu2004-8.7.0.84_1.0-1_amd64.deb</code></p>\n<h4 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h4>\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZGVlcGxlYXJuaW5nL2N1ZG5uL2luc3RhbGwtZ3VpZGUvaW5kZXguaHRtbA==\">https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html</span></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注意，运行下面的命令前，将下面的 X.Y 和 v8.x.x.x 替换成自己具体的 CUDA 和 cuDNN 版本，如我的 CUDA 版本是 11.8，cuDNN 版本是 8.7.0.84</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Enable the local repository.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> dpkg -i cudnn-local-repo-<span class=\"token variable\">$&#123;OS&#125;</span>-8.x.x.x_1.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 我的：sudo dpkg -i cudnn-local-repo-ubuntu2004-8.7.0.84_1.0-1_amd64.deb</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Import the CUDA GPG key.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /var/cudnn-local-repo-*/cudnn-local-*-keyring.gpg /usr/share/keyrings/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Refresh the repository metadata.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># Install the runtime library.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">libcudnn8</span><span class=\"token operator\">=</span><span class=\"token number\">8</span>.x.x.x-1+cudaX.Y</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 我的：sudo apt-get install libcudnn8=8.7.0.84-1+cuda11.8</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># Install the developer library.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libcudnn8-dev<span class=\"token operator\">=</span><span class=\"token number\">8</span>.x.x.x-1+cudaX.Y</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 我的：sudo apt-get install libcudnn8-dev=8.7.0.84-1+cuda11.8</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># Install the code samples and the cuDNN library documentation.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libcudnn8-samples<span class=\"token operator\">=</span><span class=\"token number\">8</span>.x.x.x-1+cudaX.Y</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 我的：sudo apt-get install libcudnn8-samples=8.7.0.84-1+cuda11.8</span></pre></td></tr></table></figure><h4 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 复制文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> -r /usr/src/cudnn_samples_v8/ <span class=\"token environment constant\">$HOME</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span>  <span class=\"token environment constant\">$HOME</span>/cudnn_samples_v8/mnistCUDNN</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span> clean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./mnistCUDNN</pre></td></tr></table></figure><blockquote>\n<p>可能报错：test.c:1:10: fatal error: FreeImage.h: No such file or directory</p>\n<p>解决办法：sudo apt-get install libfreeimage3 libfreeimage-dev</p>\n</blockquote>\n<p>成功验证如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012253057.png\" alt=\"\" /></p>\n<h3 id=\"安装tensorrt\"><a class=\"anchor\" href=\"#安装tensorrt\">#</a> 安装 TensorRT</h3>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9udmlkaWEtdGVuc29ycnQtOHgtZG93bmxvYWQ=\">https://developer.nvidia.com/nvidia-tensorrt-8x-download</span> 下载对应版本的 TensorRT</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012254209.png\" alt=\"\" /></p>\n<p>比如我选择的是 8.5.3 版本，下载完文件名为： <code>nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb</code></p>\n<h4 id=\"安装-2\"><a class=\"anchor\" href=\"#安装-2\">#</a> 安装</h4>\n<blockquote>\n<p>参考地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZGVlcGxlYXJuaW5nL3RlbnNvcnJ0L2luc3RhbGwtZ3VpZGUvaW5kZXguaHRtbCNpbnN0YWxsaW5nLWRlYmlhbg==\">https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing-debian</span></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 替换成自己的 OS 和版本信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">os</span><span class=\"token operator\">=</span><span class=\"token string\">\"ubuntuxx04\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">tag</span><span class=\"token operator\">=</span><span class=\"token string\">\"8.x.x-cuda-x.x\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> dpkg -i nv-tensorrt-local-repo-<span class=\"token variable\">$&#123;os&#125;</span>-<span class=\"token variable\">$&#123;tag&#125;</span>_1.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 我的：sudo dpkg -i nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /var/nv-tensorrt-local-repo-<span class=\"token variable\">$&#123;os&#125;</span>-<span class=\"token variable\">$&#123;tag&#125;</span>/*-keyring.gpg /usr/share/keyrings/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 我的：sudo cp /var/nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8/*-keyring.gpg/usr/share/keyrings/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tensorrt</pre></td></tr></table></figure><h4 id=\"验证-2\"><a class=\"anchor\" href=\"#验证-2\">#</a> 验证</h4>\n<p>输入 <code>dpkg -l | grep TensorRT</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> aayu@HPSCIL:~/tensorrt_install$ dpkg -l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> TensorRT</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ii  libnvinfer-bin                                    <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT binaries</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ii  libnvinfer-dev                                    <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT development libraries and headers</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ii  libnvinfer-plugin-dev                             <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT plugin libraries</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ii  libnvinfer-plugin8                                <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT plugin libraries</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ii  libnvinfer-samples                                <span class=\"token number\">8.5</span>.3-1+cuda11.8                  all          TensorRT samples</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ii  libnvinfer8                                       <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT runtime libraries</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ii  libnvonnxparsers-dev                              <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT ONNX libraries</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ii  libnvonnxparsers8                                 <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT ONNX libraries</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ii  libnvparsers-dev                                  <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT parsers libraries</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ii  libnvparsers8                                     <span class=\"token number\">8.5</span>.3-1+cuda11.8                  amd64        TensorRT parsers libraries</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ii  tensorrt                                          <span class=\"token number\">8.5</span>.3.1-1+cuda11.8                amd64        Meta package <span class=\"token keyword\">for</span> TensorRT</pre></td></tr></table></figure><blockquote>\n<p>如果遇到 <code>unmet dependencies</code>  的问题，一般是 cuda cudnn 没有安装好。TensorRT 的 <code>INCLUDE</code>  路径是  <code>/usr/include/x86_64-linux-gnu/</code> ,  <code>LIB</code>  路径是 <code>/usr/lib/x86_64-linux-gnu/</code> ,Sample code 在 <code>/usr/src/tensorrt/samples</code> ,  <code>trtexec</code>  在 <code>/usr/src/tensorrt/bin</code>  下。</p>\n</blockquote>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012254945.png\" alt=\"\" /></p>\n",
            "tags": [
                "人工智能",
                "基础知识",
                "win11",
                "wsl",
                "nvidia",
                "cuda",
                "cudnn",
                "tensorrt"
            ]
        },
        {
            "id": "https://blog.aayu.today/artificial-intelligence/basic/20230207/",
            "url": "https://blog.aayu.today/artificial-intelligence/basic/20230207/",
            "title": "WSL2通过OpenCV调用并展示本机摄像头的RTSP视频流",
            "date_published": "2023-02-27T13:22:51.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012127332.png\" alt=\"\" /></p>\n<p>本篇博客的由来如上图哈哈，WSL2 相关安装教程可以参考我之前的博客：<a href=\"https://blog.aayu.today/artificial-intelligence/basic/20221217/\">Win11 安装 WSL2 和 Nvidia 驱动</a></p>\n<h2 id=\"安装-cmake\"><a class=\"anchor\" href=\"#安装-cmake\">#</a> 安装 CMake</h2>\n<p>ubuntu 上请执行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> cmake -y</pre></td></tr></table></figure><p>或者编译安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 以 v3.25.1 版本为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone -b v3.25.1 https://github.com/Kitware/CMake.git </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> CMake</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你使用 `--prefix` 来指定安装路径，或者去掉 `--prefix`, 安装在默认路径。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./bootstrap --prefix<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>安装路径<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 验证</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cmake --version</pre></td></tr></table></figure><p>如果报错 <code>Could NOT find OpenSSL</code> ，安装如下依赖即可解决</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libssl-dev</pre></td></tr></table></figure><h2 id=\"安装-opencv-和-ffmpeg\"><a class=\"anchor\" href=\"#安装-opencv-和-ffmpeg\">#</a> 安装 OpenCV 和 FFmpeg</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libopencv-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> ffmpeg</pre></td></tr></table></figure><h2 id=\"启动-windows-本机的-rtsp-视频流\"><a class=\"anchor\" href=\"#启动-windows-本机的-rtsp-视频流\">#</a> 启动 Windows 本机的 RTSP 视频流</h2>\n<h3 id=\"下载解压-easydarwin\"><a class=\"anchor\" href=\"#下载解压-easydarwin\">#</a> 下载解压 EasyDarwin</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Vhc3lEYXJ3aW4vRWFzeURhcndpbg==\">Easydarwin</span> 是国内团队开发的开源流媒体框架。它是基于 Go 语言研发，从 2012 年 12 月创建并发展至今，从原有的单服务的流媒体服务器形式，扩展成现在的云平台架构开源项目，属于高性能开源 RTSP 流媒体服务器，在 Github 上受到广大欢迎。</p>\n<p>特点：RTSP 推模式转发、RTSP 拉模式转发、录像、检索、回放、关键帧缓存、秒开画面、RESTful 接口、WEB 后台管理、分布式负载均衡。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Vhc3lEYXJ3aW4vRWFzeURhcndpbi9yZWxlYXNlcw==\">下载解压 release 包</span></p>\n<p>直接运行 EasyDarwin.exe</p>\n<p>以 Ctrl + C 停止服务。打开浏览器输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDoxMDAwOA==\">http://localhost:10008</span>, 进入控制页面，默认用户名密码是 admin/admin</p>\n<h3 id=\"查看本机摄像头设备\"><a class=\"anchor\" href=\"#查看本机摄像头设备\">#</a> 查看本机摄像头设备</h3>\n<p>Windows 本机安装 ffmpeg 这里不再赘述啦，网上教程很多～</p>\n<p>查看本机摄像头设备命令如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ffmpeg -list_devices <span class=\"token boolean\">true</span> -f dshow -i dummy</pre></td></tr></table></figure><p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012138041.png\" alt=\"\" width=\"800px\" /></p>\n<h3 id=\"开始推流\"><a class=\"anchor\" href=\"#开始推流\">#</a> 开始推流</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ffmpeg -f dshow -i <span class=\"token assign-left variable\">video</span><span class=\"token operator\">=</span><span class=\"token string\">\"USB2.0 Camera\"</span> -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -rtsp_transport tcp -f rtsp rtsp://192.168.1.101/test</pre></td></tr></table></figure><p>参数解释</p>\n<ul>\n<li><code>-f dshow -i video=&quot;摄像头名称&quot;</code>  指定从本地摄像头中读取视频流。将 “摄像头名称” 替换为您的摄像头名称，例如 “USB2.0 Camera”。</li>\n<li><code>-vcodec libx264</code>  指定使用 x264 编码器进行视频编码。</li>\n<li><code>-preset ultrafast</code>  设置编码速度。这里使用的是最快的编码速度，但可能会导致视频质量下降。</li>\n<li><code>-tune zerolatency</code>  设置编码器以实现零延迟。</li>\n<li><code>-f rtsp</code>  指定输出流的格式为 RTSP。</li>\n<li><code>rtsp://&lt;IP地址&gt;/&lt;路径&gt;</code>  指定 RTSP 流的目标地址。请将  <code>&lt;IP地址&gt;</code>  替换为 Windows 本机 IP 地址，将  <code>&lt;路径&gt;</code>  替换为您想要为流指定的路径。</li>\n</ul>\n<p>成功推流如下，注意保持控制台的运行</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012139056.png\" alt=\"\" width=\"800px\" /></p>\n<h2 id=\"开放本机防火墙可选\"><a class=\"anchor\" href=\"#开放本机防火墙可选\">#</a> 开放本机防火墙（可选）</h2>\n<p>因为我们要在 WSL2 里访问本机的 RTSP 视频流，所以需要打开本机的防火墙，如下图</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012140033.png\" alt=\"\" width=\"800px\" /></p>\n<p>关闭专用网络和公用网络即可</p>\n<h2 id=\"用-opencv-接收视频流\"><a class=\"anchor\" href=\"#用-opencv-接收视频流\">#</a> 用 OpenCV 接收视频流</h2>\n<p>代码如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;opencv2/opencv.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Ubuntu 安装 ffmpeg：sudo apt-get install ffmpeg</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//rtsp 地址，模拟四路视频流进行展示</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string rtsp1 <span class=\"token operator\">=</span> <span class=\"token string\">\"rtsp://172.27.148.34/test\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string rtsp2 <span class=\"token operator\">=</span> rtsp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string rtsp3 <span class=\"token operator\">=</span> rtsp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string rtsp4 <span class=\"token operator\">=</span> rtsp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// CAP_FFMPEG：使用 ffmpeg 解码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>VideoCapture stream1 <span class=\"token operator\">=</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoCapture</span><span class=\"token punctuation\">(</span>rtsp1<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>CAP_FFMPEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>VideoCapture stream2 <span class=\"token operator\">=</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoCapture</span><span class=\"token punctuation\">(</span>rtsp2<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>CAP_FFMPEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>VideoCapture stream3 <span class=\"token operator\">=</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoCapture</span><span class=\"token punctuation\">(</span>rtsp3<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>CAP_FFMPEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>VideoCapture stream4 <span class=\"token operator\">=</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">VideoCapture</span><span class=\"token punctuation\">(</span>rtsp4<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>CAP_FFMPEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stream1<span class=\"token punctuation\">.</span><span class=\"token function\">isOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream2<span class=\"token punctuation\">.</span><span class=\"token function\">isOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream3<span class=\"token punctuation\">.</span><span class=\"token function\">isOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream4<span class=\"token punctuation\">.</span><span class=\"token function\">isOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有视频流未打开\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat frame1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat frame2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat frame3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat frame4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span>Mat H1<span class=\"token punctuation\">,</span> H2<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> blur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 使用 namedWindow 创建窗口，WINDOW_AUTOSIZE：自动调整窗口大小</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">namedWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rtsp_demo\"</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>WINDOW_AUTOSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stream1<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>frame1<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream2<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>frame2<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream3<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>frame3<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stream4<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>frame4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有视频流未读取\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 缩放等处理</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame1<span class=\"token punctuation\">,</span> frame1<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame2<span class=\"token punctuation\">,</span> frame2<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>frame2<span class=\"token punctuation\">,</span> frame2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame3<span class=\"token punctuation\">,</span> frame3<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>frame1<span class=\"token punctuation\">,</span> frame1<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>frame1<span class=\"token punctuation\">,</span> frame1<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>COLOR_GRAY2BGR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frame4<span class=\"token punctuation\">,</span> frame4<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">putText</span><span class=\"token punctuation\">(</span>frame4<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTSP demo\"</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span>FONT_ITALIC<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 拼接</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hconcat</span><span class=\"token punctuation\">(</span>frame1<span class=\"token punctuation\">,</span> frame2<span class=\"token punctuation\">,</span> H1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">hconcat</span><span class=\"token punctuation\">(</span>frame3<span class=\"token punctuation\">,</span> frame4<span class=\"token punctuation\">,</span> H2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">vconcat</span><span class=\"token punctuation\">(</span>H1<span class=\"token punctuation\">,</span> H2<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 高斯模糊一下</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GaussianBlur</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">,</span> blur<span class=\"token punctuation\">,</span> cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rtsp_demo\"</span><span class=\"token punctuation\">,</span> blur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cv<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>CMakeLists.txt 内容如下</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 最低版本要求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 项目信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>rtsp_demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 添加 opencv 库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>OpenCV REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 添加头文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span>OpenCV_INCLUDE_DIRS<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 添加库文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">link_libraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span>OpenCV_LIBS<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 添加可执行程序</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>rtsp_demo src/main.cpp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>启动 cmake 配置并构建</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmake -S <span class=\"token builtin class-name\">.</span> -B build </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmake --build build</pre></td></tr></table></figure><p>运行可执行程序</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./build/rtsp_demo</pre></td></tr></table></figure><h2 id=\"结果展示\"><a class=\"anchor\" href=\"#结果展示\">#</a> 结果展示</h2>\n<p>成功用 WSL2 展示出四路 RTSP 视频流～</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/03/01/202303012141053.png\" alt=\"\" width=\"800px\" /></p>\n",
            "tags": [
                "人工智能",
                "基础知识",
                "win11",
                "wsl",
                "nvidia"
            ]
        },
        {
            "id": "https://blog.aayu.today/nas/zspace/20230224/",
            "url": "https://blog.aayu.today/nas/zspace/20230224/",
            "title": "自助编译极空间Z4思源笔记（siyuan）Docker项目",
            "date_published": "2023-02-23T18:55:49.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>最近入了思源笔记的坑，想好好的捣鼓捣鼓。去年在自己的极空间 NAS 上部署了思源笔记的 Docker 版，但版本已经跟不上了（D 大和 V 姐的更新太频繁了🤣），借助极空间论坛里大佬的帮助，我们自己也可以编译适配极空间 Z4 的最新版思源笔记 Docker 镜像了，于是在此记录下编译的过程～</p>\n<h2 id=\"编译环境\"><a class=\"anchor\" href=\"#编译环境\">#</a> 编译环境</h2>\n<ul>\n<li>Ubuntu：Ubuntu 20.04.4 LTS x86_64</li>\n<li>Docker</li>\n<li>Git</li>\n</ul>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<h3 id=\"拉取思源笔记最新源码\"><a class=\"anchor\" href=\"#拉取思源笔记最新源码\">#</a> 拉取思源笔记最新源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/siyuan-note/siyuan.git</pre></td></tr></table></figure><h3 id=\"拉取大佬的zsource仓库\"><a class=\"anchor\" href=\"#拉取大佬的zsource仓库\">#</a> 拉取大佬的 zsource 仓库</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zs0urce/zsource.git</pre></td></tr></table></figure><p>浏览了下大佬的 <code>Dockerfile.z4</code>  文件，发现大佬主要是将 <code>addgroup --gid 1000 siyuan &amp;&amp; adduser --uid 1000 --ingroup siyuan --disabled-password siyuan</code>  这个创建普通用户的命令去掉了，然后将 <code>USER siyuan</code>  这个指定用户的命令也去掉了，这样就可以使用 root 用户了，从而解决极空间 Z4 上的权限问题了</p>\n<h3 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h3>\n<p>拷贝大佬项目中 siyuan 目录下的所有文件到思源笔记仓库代码目录中</p>\n<div class=\"note info\">\n<p>国内的网络环境真的是太恶劣了，为了解决环境问题，深夜踩坑了一晚上，在更改了下 <code>Dockerfile.z4</code>  文件后，终于解决了，欣慰啊<br />\n文件中需要更改的地方我都已经高亮标出了～</p>\n</div>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"><span>Dockerfile.z4</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:16 <span class=\"token keyword\">as</span> NODE_BUILD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /go/src/github.com/siyuan-note/siyuan/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> . /go/src/github.com/siyuan-note/siyuan/</span></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> cd app &amp;&amp; npm install -g pnpm &amp;&amp; ELECTRON_MIRROR=https://cnpmjs.org/mirrors/electron/ pnpm install electron@21.4.2 -D &amp;&amp; pnpm install &amp;&amp; pnpm run build</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> golang:1.19-alpine <span class=\"token keyword\">as</span> GO_BUILD</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /go/src/github.com/siyuan-note/siyuan/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">NODE_BUILD</span></span> /go/src/github.com/siyuan-note/siyuan/ /go/src/github.com/siyuan-note/siyuan/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> GO111MODULE=on</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> CGO_ENABLED=1</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> GOPROXY=https://goproxy.cn,direct</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --no-cache gcc musl-dev git &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>    git config --global http.https://github.com.proxy socks5://192.168.1.101:10808 &amp;&amp; git config --global https.https://github.com.proxy socks5://192.168.1.101:10808 &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cd kernel &amp;&amp; go build --tags fts5 -v -ldflags <span class=\"token string\">\"-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod\"</span> &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mkdir /opt/siyuan/ &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    mv /go/src/github.com/siyuan-note/siyuan/app/appearance/ /opt/siyuan/ &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    mv /go/src/github.com/siyuan-note/siyuan/app/stage/ /opt/siyuan/ &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    mv /go/src/github.com/siyuan-note/siyuan/app/guide/ /opt/siyuan/ &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    mv /go/src/github.com/siyuan-note/siyuan/kernel/kernel /opt/siyuan/ &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    find /opt/siyuan/ -name .git | xargs rm -rf</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ghcr.io/linuxserver/baseimage-alpine:3.16</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> maintainer=<span class=\"token string\">\"wangyu&lt;wangyu0814@foxmail.com>\"</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /opt/siyuan/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">GO_BUILD</span></span> /opt/siyuan/ /opt/siyuan/</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  apk add --no-cache <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ca-certificates <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    tzdata &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  echo <span class=\"token string\">\"**** cleanup ****\"</span> &amp;&amp; <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  rm -rf <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      /root/.cache <span class=\"token operator\">\\</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      /tmp/* </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># copy local files</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> root/ /</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> TZ=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> WORKSPACE=/siyuan/workspace/</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> ACCESSAUTHCODE=</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PUID=0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PGID=0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> /siyuan/workspace/</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 6806</span></pre></td></tr></table></figure><h3 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> ./build_z4.sh</pre></td></tr></table></figure><p>成功之后，就可以参考我之前的文章【<a href=\"https://blog.aayu.today/nas/zspace/20220902/\">极空间上常用 Docker 应用推荐 - 可玩性 +++</a>】进行部署啦，bingo~</p>\n<p>在此放一张编译成功，以及成功部署后的图吧，镇帖 (๑・̀ㅂ・́)و✧</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/02/24/202302240658460.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/24/202302240659155.png\" alt=\"\" /></p>\n",
            "tags": [
                "我的NAS捣鼓笔记",
                "极空间",
                "NAS",
                "极空间"
            ]
        },
        {
            "id": "https://blog.aayu.today/android/20230207/",
            "url": "https://blog.aayu.today/android/20230207/",
            "title": "Android Studio和Unity3D联合开发环境配置",
            "date_published": "2023-02-06T17:27:40.000Z",
            "content_html": "<h2 id=\"android-studio安装\"><a class=\"anchor\" href=\"#android-studio安装\">#</a> Android Studio 安装</h2>\n<p>这里我使用的版本是 2021.2.1.15。放个百度网盘链接，需要的自取</p>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUxGcEhXUXRRM1JCWXNZeHpMZ1FFd3c=\">https://pan.baidu.com/s/1LFpHWQtQ3RBYsYxzLgQEww</span><br />\n 提取码：wfjq</p>\n<h2 id=\"android-sdk配置\"><a class=\"anchor\" href=\"#android-sdk配置\">#</a> Android SDK 配置</h2>\n<div class=\"note info\">\n<p>如果发现自己 Android SDK 无法刷新出新的东西，表明自己的网络可能不太行。推荐大家去「 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tNGdxNjJmNTJnZHNzLmNvbS8jL3JlZ2lzdGVyP2NvZGU9RHlkSkJ1dlc=\">一元机场</span> 」平台订阅，每月 500G 流量月均 0.9 元，性价比拉满～</p>\n</div>\n<p>代理配置的过程，可以根据平台教程配置好「 Clash for Windows 」，配置好主程序默认端口，如下图，然后在 Android Studio 上配置好代理，如下图，即可～</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070143758.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070146621.png\" alt=\"\" /></p>\n<p>可以点击 Check connection 测试下 <code>https://dl.google.com/android/repository/repository2-3.xml</code>  能否访问成功，可以的话就表示代理没问题～</p>\n<p>确认自己手机的 Android 版本，例如，手机的 Android 版本是 10，就勾选这几项<br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070130739.png\" alt=\"\" width=\"800px\" /></p>\n<div class=\"note warning\">\n<p>注意，默认安装的 Android SDK（例如 Android SDK Platform 33）不能删除，否则可能会有未知 Bug</p>\n</div>\n<p>然后在 SDK Tools，安装如下几项，可保后面与 Unity3D 联调不出奇奇怪怪的 Bug~</p>\n<p class=\"gallery\" data-height=\"240\"><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070137372.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070139356.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070413902.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070140863.png\" alt=\"\" /></p>\n<p>创建一个空项目，当下方进度条的 Gradle 显示 Successful，表明 Android Studio 的配置可以初告一个段落了～</p>\n<p>哦补充一个，在下图这里记得设置 JDK 为 8</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070336910.png\" alt=\"\" width=\"800px\" /></p>\n<h2 id=\"unity3d配置\"><a class=\"anchor\" href=\"#unity3d配置\">#</a> Unity3D 配置</h2>\n<p>以安装 2021 最新稳定版为例，在 Unity Hub 上安装如下</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070203190.png\" alt=\"\" width=\"800px\" /></p>\n<p>创建一个新项目，首先在「 File -&gt; Build Settings -&gt; Player Settings 」里设置下公司名和项目名，如下，unity 会自动组合成包名</p>\n<p class=\"gallery\" data-height=\"300\"><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070217872.png\" alt=\"\" /><br />\n<img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070218601.png\" alt=\"\" /></p>\n<p>然后在「 Editor -&gt; Preference 」里正确设置 JDK，Android SDK 和 NDK，然后打开下 Gradle 的路径，记住 Unity 的 Gradle 的版本是多少，后面 Android Studio 联调时，需要和 Unity 保持一致</p>\n<p><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070221586.png\" alt=\"\" width=\"800px\" /></p>\n<h2 id=\"创建android密钥文件\"><a class=\"anchor\" href=\"#创建android密钥文件\">#</a> 创建 Android 密钥文件</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool -genkey -alias 密钥库名称 -keyalg RSA -validity 有效时间 -keystore 密钥库文件名</pre></td></tr></table></figure><p><img data-src=\"https://image.aayu.today/uploads/2023/02/07/202302070238825.png\" alt=\"\" /></p>\n<p>密钥文件将生成在运行命令的所在目录下～</p>\n",
            "tags": [
                "Android",
                "Android Studio",
                "Unity3D"
            ]
        },
        {
            "id": "https://blog.aayu.today/front-end/basic/vue3+vite+ts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://blog.aayu.today/front-end/basic/vue3+vite+ts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "vue3+vite+ts学习笔记",
            "date_published": "2023-01-17T09:21:44.000Z",
            "content_html": "<h2 id=\"初始化一个前端项目\"><a class=\"anchor\" href=\"#初始化一个前端项目\">#</a> 初始化一个前端项目</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> init vite@latest</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># npm init vue@latest</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i</pre></td></tr></table></figure><h2 id=\"初始化一个nodejs服务端项目\"><a class=\"anchor\" href=\"#初始化一个nodejs服务端项目\">#</a> 初始化一个 NodeJS 服务端项目</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> ts-node -g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> init -y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/node -D</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express -S</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/express -D</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios -S</pre></td></tr></table></figure><p>正在学习中...</p>\n<h2 id=\"学习链接\"><a class=\"anchor\" href=\"#学习链接\">#</a> 学习链接</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWRTNHkxeTd2ZA==\">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron（82/111）</span></label></li>\n</ul>\n",
            "tags": [
                "前端系列",
                "Vue",
                "vue3",
                "vite",
                "typescript"
            ]
        }
    ]
}