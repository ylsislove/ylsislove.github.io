<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.aayu.today</id>
    <title>学无止境</title>
    <subtitle>世界上大部分事，都没太大意义。真理与热爱除外</subtitle>
    <icon>https://blog.aayu.today/images/favicon.ico</icon>
    <link href="https://blog.aayu.today" />
    <author>
      <name>宇凌喵</name>
    </author>
    <updated>2023-07-17T07:47:29.000Z</updated>
    <category term="HoloLens" />
    <category term=" NAS" />
    <entry>
        <id>https://blog.aayu.today/artificial-intelligence/pytorch/20230717/</id>
        <title>PyTorch学习笔记（2）</title>
        <link rel="alternate" href="https://blog.aayu.today/artificial-intelligence/pytorch/20230717/"/>
        <content type="html">&lt;h1 id=&#34;broadcasting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#broadcasting&#34;&gt;#&lt;/a&gt; Broadcasting&lt;/h1&gt;
&lt;p&gt;自动扩展维度语法糖&lt;/p&gt;
&lt;h2 id=&#34;关键点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键点&#34;&gt;#&lt;/a&gt; 关键点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A 和 B 张量做 broadcasting，如果 B 前面缺失一个维度，则自动在前面插入一个维度&lt;/li&gt;
&lt;li&gt;插入的维度大小为 1，接下来会自动将其维度大小为 1 的维度扩张到和 A 张量相同位置维度一样的大小&lt;/li&gt;
&lt;li&gt;例子：Bias [32, 1, 1] -&amp;gt; [1, 32, 1, 1] -&amp;gt; [4, 32, 14, 14]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以 broadcasting 的本质就是 unsqueeze + expand&lt;/p&gt;
&lt;h2 id=&#34;案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for actual demanding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[class, students, scores]&lt;/li&gt;
&lt;li&gt;Add bias for every students: +5 score&lt;/li&gt;
&lt;li&gt;[4, 32, 8] + [4, 32, 8]&lt;/li&gt;
&lt;li&gt;[4, 32, 8] + [5.0]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boardcasting 会自动完成：[5.0].unsqueeze (0).unsqueeze (0).expand (A) 这个操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适用情况&#34;&gt;#&lt;/a&gt; 适用情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Match from &lt;strong&gt;&lt;mark&gt;Last&lt;/mark&gt;&lt;/strong&gt; dim!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If current dim = 1, expand to same&lt;/li&gt;
&lt;li&gt;If either has no dim, insert one dim and expand to same&lt;/li&gt;
&lt;li&gt;otherwise, NOT broadcasting-able&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：[4, 32, 14, 14] + [2, 32, 14, 14] 不可以进行，因为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dim 0 has dim, can NOT insert and expand to same&lt;/li&gt;
&lt;li&gt;Dim 0 has distinct dim, NOT size 1&lt;/li&gt;
&lt;li&gt;So NOT broadcasting-able&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解&#34;&gt;#&lt;/a&gt; 理解&lt;/h2&gt;
&lt;p&gt;从最后一个维度开始匹配 match from last dim&lt;/p&gt;
&lt;p&gt;因为人们相信高维的东西都是相同的，只有低维的才会针对不同的情况有不同的数据&lt;/p&gt;
&lt;p&gt;例如对于 [4, 3, 32, 32] +&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[32, 32]，表示在所有照片，所有通道上都叠加一个相同的 Map&lt;/li&gt;
&lt;li&gt;[3, 1, 1]，表示在所有照片，不同通道上叠加设定的值，例如 R 通道上都加 0.5，G 通道上都加 0.4，B 通道上都加 0.3&lt;/li&gt;
&lt;li&gt;[1]，表示在所有照片，所有通道，所有像素点上都叠加一个相同的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;合并与分割&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并与分割&#34;&gt;#&lt;/a&gt; 合并与分割&lt;/h1&gt;
&lt;h2 id=&#34;cat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cat&#34;&gt;#&lt;/a&gt; cat&lt;/h2&gt;
&lt;p&gt;例如 a 是 [class1-4, students, scores]，b 是 [class5-9, students, scores]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717015120-74ho2j1.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717015658-396h6ii.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;stack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stack&#34;&gt;#&lt;/a&gt; stack&lt;/h2&gt;
&lt;p&gt;stack 和 cat 的区别是 stack 会创建一个新的维度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717015906-ymafbbd.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717020037-tdezmc6.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;split&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#split&#34;&gt;#&lt;/a&gt; split&lt;/h2&gt;
&lt;p&gt;按长度进行拆分，用 List 作为参数的话，可以指定拆分后的张量在指定维度的长度，不用 List 的话就表示根据参数进行均分&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717020251-rssnn7h.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;chunk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chunk&#34;&gt;#&lt;/a&gt; chunk&lt;/h2&gt;
&lt;p&gt;按数量进行拆分，上面报错的例子，如果用 chunk 就不会报错，因为 chunk 里面的参数 2 指定了要拆分成两个块，而 split 里面的 2 指定了用长度为 2 进行拆分，而维度 0 一共就 2 个，所以用 split 指定 2 拆分后，就只能得到一个张量，不能用 aa, bb 两个张量进行接收，而用 chunk 就不会有这个问题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717020910-aq9tpxs.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;数学运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数学运算&#34;&gt;#&lt;/a&gt; 数学运算&lt;/h1&gt;
&lt;h2 id=&#34;加减乘除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加减乘除&#34;&gt;#&lt;/a&gt; 加减乘除&lt;/h2&gt;
&lt;p&gt;这里就用到了前面所讲的 broadcasting&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717021145-azg8c61.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;矩阵乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵乘法&#34;&gt;#&lt;/a&gt; 矩阵乘法&lt;/h2&gt;
&lt;p&gt;有三种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1RvcmNoLm1t&#34;&gt;Torch.mm&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只适用于二维张量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Torch.matmul&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717021920-ev4ouy3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717021518-vx4vtw9.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;高维矩阵乘法实际上也是对最后两维进行矩阵乘法运算，本质就是支持多个矩阵对并行相乘&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717022145-waqr7bm.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意，broadcasting 也在其中发挥了作用&lt;/p&gt;
&lt;h2 id=&#34;次方运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#次方运算&#34;&gt;#&lt;/a&gt; 次方运算&lt;/h2&gt;
&lt;p&gt;log 运算默认以 e 为底，使用 log2 或 log10 进行其他底数的运算&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717022412-yb0lhtz.png&#34; alt=&#34;image&#34; /&gt;&lt;img data-src=&#34;assets/image-20230717022516-g1j0bpe.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;取近似运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#取近似运算&#34;&gt;#&lt;/a&gt; 取近似运算&lt;/h2&gt;
&lt;p&gt;floor 往下走，ceil 往上走，trunc 取整数部分，frac 取小数部分，round 四舍五入&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717022745-t69lqyh.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;裁剪运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#裁剪运算&#34;&gt;#&lt;/a&gt; 裁剪运算&lt;/h2&gt;
&lt;p&gt;一个参数表示小于设定参数的变为设定参数，两个参数表示（min，max），不在这个区间的设置为参数值，如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717023119-5ankhqd.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;属性统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性统计&#34;&gt;#&lt;/a&gt; 属性统计&lt;/h1&gt;
&lt;h2 id=&#34;范数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#范数&#34;&gt;#&lt;/a&gt; 范数&lt;/h2&gt;
&lt;h3 id=&#34;vector-norm-vs-matrix-norm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vector-norm-vs-matrix-norm&#34;&gt;#&lt;/a&gt; vector norm vs. matrix norm&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717023809-miekd8n.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;norm-运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#norm-运算&#34;&gt;#&lt;/a&gt; norm 运算&lt;/h3&gt;
&lt;p&gt;对哪个维度计算范式，就会消掉哪个维度哦&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717023712-z8aez4q.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;min-max-sum-mean-prod&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#min-max-sum-mean-prod&#34;&gt;#&lt;/a&gt; min / max / sum / mean / prod&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717024404-2jmiohm.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;argmin-argmax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#argmin-argmax&#34;&gt;#&lt;/a&gt; argmin / argmax&lt;/h2&gt;
&lt;p&gt;注意，它会默认把所有维度都打平，如果不想被打平，需要指定 dim&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717024704-5rmdmq8.png&#34; alt=&#34;image&#34; /&gt;&lt;img data-src=&#34;assets/image-20230717024715-v4dy7bf.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;dim-和-keepdim&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dim-和-keepdim&#34;&gt;#&lt;/a&gt; dim 和 keepdim&lt;/h2&gt;
&lt;p&gt;正常情况下，在哪个维度 dim 运算，就会消掉哪个维度。keepdim 设置 true 可以保证 dim 不被消掉&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717025144-3qh3gg8.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;topk-和-kthvalue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#topk-和-kthvalue&#34;&gt;#&lt;/a&gt; topk 和 kthvalue&lt;/h2&gt;
&lt;p&gt;topk 比 max 返回更多的数据&lt;/p&gt;
&lt;p&gt;kthvalue 返回的是第 k 小的数和索引&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717025724-y6rb2xx.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=, !=, ==&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717025851-vbkhq4r.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;高阶操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高阶操作&#34;&gt;#&lt;/a&gt; 高阶操作&lt;/h1&gt;
&lt;h2 id=&#34;where&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#where&#34;&gt;#&lt;/a&gt; where&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717030230-vmk91mi.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717030715-x1fuwf4.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;where 可以方便的将数据放到 GPU 上进行并行处理&lt;/p&gt;
&lt;h2 id=&#34;gather&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gather&#34;&gt;#&lt;/a&gt; gather&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717030802-enmfyxg.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;简单来说就是查表操作，比如有 [dog, cat, whale] 标签表，因为 PyTorch 里不能用字符串，所以预测我们得到结果张量为 [1, 0, 1, 2]，如果我们想根据索引查到对应的 Label，即 [cat, dog, cat, whale] 这样的结果，gather 方法就可以帮我们完成这件事&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;assets/image-20230717031313-pvfqpca.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
</content>
        <category term="人工智能" scheme="https://blog.aayu.today/categories/artificial-intelligence/" />
        <category term="机器学习修炼之PyTorch" scheme="https://blog.aayu.today/categories/artificial-intelligence/pytorch/" />
        <category term="PyTorch" scheme="https://blog.aayu.today/tags/PyTorch/" />
        <updated>2023-07-17T07:47:29.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/artificial-intelligence/pytorch/20230716/</id>
        <title>PyTorch学习笔记（1）</title>
        <link rel="alternate" href="https://blog.aayu.today/artificial-intelligence/pytorch/20230716/"/>
        <content type="html">&lt;h1 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h1&gt;
&lt;h2 id=&#34;基本数据类型-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型-2&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716190309-ygom5bg.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h3 id=&#34;常用类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用类型&#34;&gt;#&lt;/a&gt; 常用类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FloatTensor&lt;/li&gt;
&lt;li&gt;DoubleTensor&lt;/li&gt;
&lt;li&gt;ByteTensor&lt;/li&gt;
&lt;li&gt;IntTensor&lt;/li&gt;
&lt;li&gt;LongTensor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;标量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标量&#34;&gt;#&lt;/a&gt; 标量&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716190848-frb6mv3.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716191001-ml42z6w.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;常用来表示 Loss&lt;/p&gt;
&lt;h2 id=&#34;一维张量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维张量&#34;&gt;#&lt;/a&gt; 一维张量&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716191212-mdzuggb.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716192053-ejlcybg.png&#34; alt=&#34;image&#34; /&gt;​​&lt;/p&gt;
&lt;p&gt;有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定内容生成一维张量&lt;/li&gt;
&lt;li&gt;给定维度大小生成一维张量&lt;/li&gt;
&lt;li&gt;从 np 中得到一维张量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用于 Bias 神经元的偏置，和 Linear Input&lt;/p&gt;
&lt;h2 id=&#34;二维张量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维张量&#34;&gt;#&lt;/a&gt; 二维张量&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;dim、size () 和 shape 的区分。对于一个维度为 [2, 2] 这样的张量，它的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dim 为 2，也就是数学上的 Rank，秩；&lt;/li&gt;
&lt;li&gt;size () 和 shape 则返回这个张量的形状，size () 是方法，shape 是属性；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716192117-urv8vi5.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;常用来表示带有 Batch 的 Linear Input，例如 [4, 784]&lt;/p&gt;
&lt;h2 id=&#34;三维张量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三维张量&#34;&gt;#&lt;/a&gt; 三维张量&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716192354-hmvm9vz.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;常用来表示带有 Batch 的 RNN Input，例如 [10, 20, 100]，表示一句话有 10 个单词 W，我们送入 20 句话进行训练 Sentence，每个单词用个 100 长度的一维向量表示&lt;/p&gt;
&lt;h2 id=&#34;四维张量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四维张量&#34;&gt;#&lt;/a&gt; 四维张量&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716192836-nghlmls.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;常用来表示 CNN，例如 [b, c, h, w]&lt;/p&gt;
&lt;h2 id=&#34;获取张量的大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取张量的大小&#34;&gt;#&lt;/a&gt; 获取张量的大小&lt;/h2&gt;
&lt;p&gt;用 numel 方法，即 num of element&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716193056-suepu98.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h1 id=&#34;创建-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建-tensor&#34;&gt;#&lt;/a&gt; 创建 Tensor&lt;/h1&gt;
&lt;h2 id=&#34;创建-tensor-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建-tensor-2&#34;&gt;#&lt;/a&gt; 创建 Tensor&lt;/h2&gt;
&lt;p&gt;用 torch.FloatTensor 创建 Tensor：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当接收到一个 List，则根据现有数据创建 Tensor&lt;/li&gt;
&lt;li&gt;当接收到不是 List，则根据维度创建 Tensor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716193929-bzu98nk.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建未初始化的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建未初始化的-tensor&#34;&gt;#&lt;/a&gt; 创建未初始化的 Tensor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Torch.empty()&lt;/li&gt;
&lt;li&gt;Torch.FloatTensor(d1, d2, d3)&lt;/li&gt;
&lt;li&gt;Torch.IntTensor(d1, d2, d3)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NOT torch.FloatTensor([1, 2]) = torch.tensor([1, 2])&lt;/p&gt;
&lt;p&gt;未初始化的数据会有很多极端值，如下，所以记得跟上后续步骤将数据覆盖掉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716194243-1ii8xeb.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PyTorch 如果没有手动配置，默认会生成 FloatTensor&lt;/p&gt;
&lt;p&gt;可以使用  &lt;code&gt;torch.set_default_tensor_type(torch.DoubleTensor)&lt;/code&gt; ​ 设置其他类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716194508-kmkmb3b.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建均匀分布的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建均匀分布的-tensor&#34;&gt;#&lt;/a&gt; 创建均匀分布的 Tensor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rand&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机从 [0, 1] 分布中生成数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rand_like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收一个 tensor，读取 tensor 的 shape，再送到 rand 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;randint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四个参数，例如 randint (1, 10, 3, 3)，生成 [1, 10) 范围内的 3 x 3 的张量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;均匀采用 0 ~ 10 的 Tensor，要用 x = 10 * torch.rand (d1, d2)，randint 只能采样整数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716195129-nzngd2q.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建正态分布的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建正态分布的-tensor&#34;&gt;#&lt;/a&gt; 创建正态分布的 Tensor&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716195458-8t05inp.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建指定值的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建指定值的-tensor&#34;&gt;#&lt;/a&gt; 创建指定值的 Tensor&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716195640-l31hjqv.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建递增递减的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建递增递减的-tensor&#34;&gt;#&lt;/a&gt; 创建递增 / 递减的 Tensor&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716195757-jkgjt0m.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建等间距的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建等间距的-tensor&#34;&gt;#&lt;/a&gt; 创建等间距的 Tensor&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，arange 参数范围是 [0, 10)，而 linspace 参数范围则是 [0, 10]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716200057-4ahsti9.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;logspace 默认是以 10 为底数，可以通过 base 参数设置为 2，10，e 等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;创建特殊的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建特殊的-tensor&#34;&gt;#&lt;/a&gt; 创建特殊的 Tensor&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716200254-xf667vw.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716200303-zgqfsyq.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;创建随机打散的-tensor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建随机打散的-tensor&#34;&gt;#&lt;/a&gt; 创建随机打散的 Tensor&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716200623-nb5tzif.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716200636-xyusxhk.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
&lt;h1 id=&#34;索引和切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引和切片&#34;&gt;#&lt;/a&gt; 索引和切片&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;关键知识： &lt;code&gt;0:28:2&lt;/code&gt; ​ 对应  &lt;code&gt;start:end:step&lt;/code&gt; ​，不包含 end&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;索引前后-n-个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引前后-n-个&#34;&gt;#&lt;/a&gt; 索引前 / 后 N 个&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716201125-v48tta8.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;隔行索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隔行索引&#34;&gt;#&lt;/a&gt; 隔行索引&lt;/h2&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716201136-ck0tf6t.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;指定索引采样&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指定索引采样&#34;&gt;#&lt;/a&gt; 指定索引采样&lt;/h2&gt;
&lt;p&gt;​ &lt;code&gt;data.index_select(0, torch.tensor([0, 2]))&lt;/code&gt; ​，表示在第 0 个维度上，取 0 和 2 两个索引的数据&lt;/p&gt;
&lt;p&gt;​ &lt;code&gt;data.index_select(1, torch.tensor([1, 2]))&lt;/code&gt; ​，表示在第 1 个维度上，取 1 和 2 两个索引的数据&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716202139-r09fgv1.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#的使用&#34;&gt;#&lt;/a&gt; ... 的使用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当有 ... 出现时，右边的索引需要理解为最右边的维度。意思就是 ... 必须能被推测出代表哪几个维度才行&lt;/p&gt;
&lt;p&gt;例如： &lt;code&gt;[0, ..., ::2]&lt;/code&gt; ​ 和  &lt;code&gt;[0, :, :, ::2]&lt;/code&gt; ​ 等价，... 只是简化写法罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716203125-hygb8f9.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;根据掩码索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据掩码索引&#34;&gt;#&lt;/a&gt; 根据掩码索引&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点是会将索引后的数据打平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716203444-w79s2d2.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716203453-siyr0j9.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h1 id=&#34;维度变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#维度变换&#34;&gt;#&lt;/a&gt; 维度变换&lt;/h1&gt;
&lt;h2 id=&#34;view-reshape-维度变换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#view-reshape-维度变换&#34;&gt;#&lt;/a&gt; view /reshape 维度变换&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;只要保证 numel () 一致即可&lt;/p&gt;
&lt;p&gt;数据的存储 / 维度顺序非常重要，需要时刻记住！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716203958-veikihw.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;squeeze-unsqueeze-删减维度-增加维度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#squeeze-unsqueeze-删减维度-增加维度&#34;&gt;#&lt;/a&gt; squeeze /unsqueeze 删减维度 / 增加维度&lt;/h2&gt;
&lt;h3 id=&#34;unsqueeze-增加维度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unsqueeze-增加维度&#34;&gt;#&lt;/a&gt; unsqueeze 增加维度&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;正数增加维度是在指定索引的前面增加；负数增加维度是在指定索引的后面增加&lt;/p&gt;
&lt;p&gt;尽量不要使用负数增加维度，易混淆&lt;/p&gt;
&lt;p&gt;参数取值在 [-a.dim () - 1, a.dim ()]，即 [-5, 4]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716204913-uu5bgp0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​​&lt;img data-src=&#34;assets/image-20230716205718-565dmmo.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配合扩张 Broadcasting 操作，就可以很方便的给图像上的每个像素添加一个偏置了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;squeeze-删减维度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#squeeze-删减维度&#34;&gt;#&lt;/a&gt; squeeze 删减维度&lt;/h3&gt;
&lt;p&gt;不指定参数就将所有 dim 为 1 的维度删除&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716210148-vud9omj.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;transpose-t-permute-维度转置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#transpose-t-permute-维度转置&#34;&gt;#&lt;/a&gt; transpose /t/permute 维度转置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;t () 只能用于二维张量&lt;/p&gt;
&lt;p&gt;transpose () 可以指定参数交换指定维度&lt;/p&gt;
&lt;p&gt;view 会导致维度顺序关系变得模糊，所以需要人为跟踪&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716211935-1njjwp7.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716211945-mk5ubc8.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[b, h, w, c] 是 Numpy 存储图片的格式，所以需要这一步才能到处 Numpy&lt;/p&gt;
&lt;p&gt;permute 可以一步到位，直接调整多个维度的顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716212019-d9gcs5j.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;h2 id=&#34;expand-repeat-维度扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#expand-repeat-维度扩展&#34;&gt;#&lt;/a&gt; expand /repeat 维度扩展&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;expand：broadcasting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不会主动复制数据，只有维度为 1 的才能扩张成其他维度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;repeat：memory copied&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会发生实实在在的内存拷贝&lt;/li&gt;
&lt;li&gt;和 expand 参数区别是，repeat 参数指的是每一个维度要拷贝的次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716211156-d736yk5.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;img data-src=&#34;assets/image-20230716211419-8k254ub.png&#34; alt=&#34;image&#34; /&gt;​&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
</content>
        <category term="人工智能" scheme="https://blog.aayu.today/categories/artificial-intelligence/" />
        <category term="机器学习修炼之PyTorch" scheme="https://blog.aayu.today/categories/artificial-intelligence/pytorch/" />
        <category term="PyTorch" scheme="https://blog.aayu.today/tags/PyTorch/" />
        <updated>2023-07-16T13:30:26.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/english/spoken/20230709/</id>
        <title>常用口语-海关</title>
        <link rel="alternate" href="https://blog.aayu.today/english/spoken/20230709/"/>
        <content type="html">&lt;h2 id=&#34;常见词汇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见词汇&#34;&gt;#&lt;/a&gt; 常见词汇&lt;/h2&gt;
&lt;h3 id=&#34;border-国界边界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#border-国界边界&#34;&gt;#&lt;/a&gt; Border 国界；边界&lt;/h3&gt;
&lt;p&gt;cross the border 过了边界&lt;/p&gt;
&lt;p&gt;You should never try to illegally cross the board into a different country.&lt;/p&gt;
&lt;h3 id=&#34;declaration-card-form-海关申报书&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#declaration-card-form-海关申报书&#34;&gt;#&lt;/a&gt; Declaration card /form 海关申报书&lt;/h3&gt;
&lt;p&gt;Most countries require you to fill in a declaration card.&lt;/p&gt;
&lt;h3 id=&#34;arrival-card-form-入境卡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrival-card-form-入境卡&#34;&gt;#&lt;/a&gt; Arrival card /form 入境卡&lt;/h3&gt;
&lt;p&gt;For China, foreigners just have to fill in a small arrival card.&lt;/p&gt;
&lt;h3 id=&#34;fill-in-填&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fill-in-填&#34;&gt;#&lt;/a&gt; Fill in 填&lt;/h3&gt;
&lt;p&gt;Make sure to fill in the form accurately. Otherwise you might get into trouble.&lt;/p&gt;
&lt;h3 id=&#34;country-of-residence-居住国&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#country-of-residence-居住国&#34;&gt;#&lt;/a&gt; Country of residence 居住国&lt;/h3&gt;
&lt;p&gt;What is your country of residence? —— Canada.&lt;/p&gt;
&lt;h3 id=&#34;currency-货币&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#currency-货币&#34;&gt;#&lt;/a&gt; Currency 货币&lt;/h3&gt;
&lt;p&gt;Are you traveling with any foreign currency?&lt;/p&gt;
&lt;h3 id=&#34;resident-visitor-住户-访客&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#resident-visitor-住户-访客&#34;&gt;#&lt;/a&gt; Resident / Visitor 住户 / 访客&lt;/h3&gt;
&lt;p&gt;Residents line up on the left, visitors line up on the right.&lt;/p&gt;
&lt;h3 id=&#34;nationality-国籍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nationality-国籍&#34;&gt;#&lt;/a&gt; Nationality 国籍&lt;/h3&gt;
&lt;p&gt;What is your nationality? —— Chinese.&lt;/p&gt;
&lt;h3 id=&#34;citizenship-公民身份&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#citizenship-公民身份&#34;&gt;#&lt;/a&gt; Citizenship 公民身份&lt;/h3&gt;
&lt;p&gt;What is your citizenship? —— I have Chinese citizenship. / I am a citizen of China.&lt;/p&gt;
&lt;h3 id=&#34;firearms-weapons-火器-武器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#firearms-weapons-火器-武器&#34;&gt;#&lt;/a&gt; Firearms /weapons 火器 / 武器&lt;/h3&gt;
&lt;p&gt;It&#39;s generally a good idea to not travel with firearms or weapons.&lt;/p&gt;
&lt;h3 id=&#34;duration-of-stay-停留时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#duration-of-stay-停留时间&#34;&gt;#&lt;/a&gt; Duration of stay 停留时间&lt;/h3&gt;
&lt;p&gt;What will be your duration of stay in Canada?&lt;/p&gt;
&lt;h3 id=&#34;business-pleasure-study-商务-娱乐-学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#business-pleasure-study-商务-娱乐-学习&#34;&gt;#&lt;/a&gt; Business /pleasure/study 商务 / 娱乐 / 学习&lt;/h3&gt;
&lt;p&gt;What is your purpose of traveling? Business, pleasure, or study? —— I&#39;m traveling for business.&lt;/p&gt;
&lt;h3 id=&#34;border-agent-边境官员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#border-agent-边境官员&#34;&gt;#&lt;/a&gt; Border agent 边境官员&lt;/h3&gt;
&lt;p&gt;The border agent will sometimes ask you a few questions.&lt;/p&gt;
&lt;h3 id=&#34;kiosk-自助服务亭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kiosk-自助服务亭&#34;&gt;#&lt;/a&gt; kiosk 自助服务亭&lt;/h3&gt;
&lt;p&gt;Canadian citizens or permanent residents can use the automatic kiosks at customs and immigration.&lt;/p&gt;
&lt;h3 id=&#34;prohibited-禁止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prohibited-禁止&#34;&gt;#&lt;/a&gt; Prohibited 禁止&lt;/h3&gt;
&lt;p&gt;Certain items like firearms or weapons are prohibited to travel with.&lt;/p&gt;
&lt;h2 id=&#34;question&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#question&#34;&gt;#&lt;/a&gt; Question&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Have you ever been questioned by airport security? What did they ask you?&lt;/li&gt;
&lt;li&gt;Have you ever been caught with prohibited items?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;homework&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homework&#34;&gt;#&lt;/a&gt; Homework&lt;/h2&gt;
&lt;p&gt;Write a dialog going through customs.&lt;/p&gt;
&lt;p&gt;You should say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what is your purpose of travel?&lt;/li&gt;
&lt;li&gt;How long are you staying?&lt;/li&gt;
&lt;li&gt;What is the value of goods you are traveling with?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Agent: Hi there, can I see your passport?&lt;/p&gt;
&lt;p&gt;Me: Yes, here you go.&lt;/p&gt;
&lt;p&gt;A: And where is your final destination?&lt;/p&gt;
&lt;p&gt;M: Vancouver.&lt;/p&gt;
&lt;p&gt;A: Okay, what is your purpose of travel?&lt;/p&gt;
&lt;p&gt;M: I&#39;m visiting my family.&lt;/p&gt;
&lt;p&gt;A: How long will you be staying in Canada?&lt;/p&gt;
&lt;p&gt;M: For 1 month.&lt;/p&gt;
&lt;p&gt;A: What is the value of goods you are traveling with?&lt;/p&gt;
&lt;p&gt;M: Just 500$. I&#39;m bringing some gifts for my family.&lt;/p&gt;
&lt;p&gt;A: Okay. You&#39;re good to go. Move along.&lt;/p&gt;
&lt;p&gt;M: Thank you.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="英语学习之路" scheme="https://blog.aayu.today/categories/english/" />
        <category term="口语" scheme="https://blog.aayu.today/categories/english/%E5%8F%A3%E8%AF%AD/" />
        <category term="英语" scheme="https://blog.aayu.today/tags/%E8%8B%B1%E8%AF%AD/" />
        <updated>2023-07-09T15:34:59.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/english/spoken/20230706/</id>
        <title>常用口语-机场</title>
        <link rel="alternate" href="https://blog.aayu.today/english/spoken/20230706/"/>
        <content type="html">&lt;h2 id=&#34;常见词汇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见词汇&#34;&gt;#&lt;/a&gt; 常见词汇&lt;/h2&gt;
&lt;h3 id=&#34;terminal-航站楼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#terminal-航站楼&#34;&gt;#&lt;/a&gt; Terminal 航站楼&lt;/h3&gt;
&lt;p&gt;I need to go to terminal 1.&lt;/p&gt;
&lt;h3 id=&#34;airline-航空公司&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#airline-航空公司&#34;&gt;#&lt;/a&gt; Airline 航空公司&lt;/h3&gt;
&lt;p&gt;What airline are you flying with?&lt;/p&gt;
&lt;p&gt;I&#39;m flying with Air China / Air Canada.&lt;/p&gt;
&lt;h3 id=&#34;international-flight-国际航班&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#international-flight-国际航班&#34;&gt;#&lt;/a&gt; International flight 国际航班&lt;/h3&gt;
&lt;p&gt;It&#39;s an international flight, so it should be in terminal 3.&lt;/p&gt;
&lt;h3 id=&#34;domestic-flight-国内航班&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#domestic-flight-国内航班&#34;&gt;#&lt;/a&gt; Domestic flight 国内航班&lt;/h3&gt;
&lt;p&gt;I&#39;m just taking a domestic flight.&lt;/p&gt;
&lt;h3 id=&#34;departure-出发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#departure-出发&#34;&gt;#&lt;/a&gt; Departure 出发&lt;/h3&gt;
&lt;p&gt;The departures are upstairs.&lt;/p&gt;
&lt;h3 id=&#34;arrival-到达&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrival-到达&#34;&gt;#&lt;/a&gt; Arrival 到达&lt;/h3&gt;
&lt;p&gt;I&#39;m picking someone up, so I need to go to the arrivals.&lt;/p&gt;
&lt;h3 id=&#34;check-in-登记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#check-in-登记&#34;&gt;#&lt;/a&gt; Check-in 登记&lt;/h3&gt;
&lt;p&gt;I have to check-in 2 hours before my flight. 我必须在起飞前 2 小时办理登机手续&lt;/p&gt;
&lt;p&gt;What do you use to check in?&lt;/p&gt;
&lt;h3 id=&#34;passport-护照&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#passport-护照&#34;&gt;#&lt;/a&gt; Passport 护照&lt;/h3&gt;
&lt;p&gt;To check-in, you need to hand them your passport (hand somebody something. hand something to somebody. 一般不用 give，因为 passport 登记完后会还给我们，所以一般用 hand).&lt;/p&gt;
&lt;h3 id=&#34;boarding-pass-登机牌&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boarding-pass-登机牌&#34;&gt;#&lt;/a&gt; Boarding pass 登机牌&lt;/h3&gt;
&lt;p&gt;When you check-in you will receive your boarding pass.&lt;/p&gt;
&lt;p&gt;Many boarding passes are on your phone now.&lt;/p&gt;
&lt;p&gt;I need to buy a plane ticket when I arrive the airport.&lt;/p&gt;
&lt;h3 id=&#34;aisle-window-seat-过道座位-靠窗座位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aisle-window-seat-过道座位-靠窗座位&#34;&gt;#&lt;/a&gt; Aisle / Window seat 过道座位 / 靠窗座位&lt;/h3&gt;
&lt;p&gt;I definitely prefer window seats. What about you?&lt;/p&gt;
&lt;h3 id=&#34;safety-exit-row-安全出口那排&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#safety-exit-row-安全出口那排&#34;&gt;#&lt;/a&gt; Safety exit row 安全出口那排&lt;/h3&gt;
&lt;p&gt;Those are the best seats, because you get a lot of space.&lt;/p&gt;
&lt;p&gt;I don&#39;t like to be in between two people with someone on either side. I feel very squished.&lt;/p&gt;
&lt;h3 id=&#34;boarding-time-departure-time-登机时间-出发时间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#boarding-time-departure-time-登机时间-出发时间&#34;&gt;#&lt;/a&gt; Boarding time / Departure time 登机时间 / 出发时间&lt;/h3&gt;
&lt;p&gt;Looks like the boarding time is 10:30, and the departure time is 11:15.&lt;/p&gt;
&lt;p&gt;Your boarding pass will alse tell you your boarding time and departure time.&lt;/p&gt;
&lt;p&gt;The boarding time is usually half an hour to 45 min before the departure time.&lt;/p&gt;
&lt;h3 id=&#34;priority-boarding-优先登机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#priority-boarding-优先登机&#34;&gt;#&lt;/a&gt; Priority boarding 优先登机&lt;/h3&gt;
&lt;p&gt;Some airlines have priority boarding and the VIP at the same time. It depends on the airline. That all do it differert.&lt;/p&gt;
&lt;h3 id=&#34;gate-登机口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gate-登机口&#34;&gt;#&lt;/a&gt; Gate 登机口&lt;/h3&gt;
&lt;p&gt;I&#39;ll be at gate 30 D.&lt;/p&gt;
&lt;p&gt;where is my gate? Look on the board to find your gate.&lt;/p&gt;
&lt;h3 id=&#34;baggage不可数-luggage不可数-suitcase可数-行李&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#baggage不可数-luggage不可数-suitcase可数-行李&#34;&gt;#&lt;/a&gt; Baggage&lt;sup&gt; (不可数)&lt;/sup&gt; / luggage&lt;sup&gt; (不可数)&lt;/sup&gt; / suitcase&lt;sup&gt; (可数)&lt;/sup&gt; 行李&lt;/h3&gt;
&lt;p&gt;I need to check 2 bags. I have to pay for the extra baggage (also called the baggage fee).&lt;/p&gt;
&lt;p&gt;Most airlines give you one free bag, but the 2nd bag you have to pay for.&lt;/p&gt;
&lt;h3 id=&#34;baggage-claim-行李认领处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#baggage-claim-行李认领处&#34;&gt;#&lt;/a&gt; Baggage claim 行李认领处&lt;/h3&gt;
&lt;p&gt;And then when you arrive, you must go to claim your baggage.&lt;/p&gt;
&lt;h3 id=&#34;carry-on-bag-手提行李&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#carry-on-bag-手提行李&#34;&gt;#&lt;/a&gt; Carry-on bag 手提行李&lt;/h3&gt;
&lt;p&gt;I always carry my laptop in my carry-on bag.&lt;/p&gt;
&lt;p&gt;You can have a small suitcase and a personal bag, usually.&lt;/p&gt;
&lt;h3 id=&#34;business-class-economy-class-公务舱-经济舱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#business-class-economy-class-公务舱-经济舱&#34;&gt;#&lt;/a&gt; Business class /economy class 公务舱 / 经济舱&lt;/h3&gt;
&lt;p&gt;I fly economy because I like to save money, so I always fly economy class.&lt;/p&gt;
&lt;p&gt;If I had the money, I would fly business class.&lt;/p&gt;
&lt;p&gt;I have never flown business class. 我从来没有坐过商务舱┭┮﹏┭┮&lt;/p&gt;
&lt;p&gt;Business class, nice. I would if I could. but I can&#39;t, so I won&#39;t. 商务舱，好，我想坐如果我能的话，但是我不能，所以我不愿意 hh&lt;/p&gt;
&lt;h3 id=&#34;air-sickness-barf-bag-晕机-呕吐袋&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#air-sickness-barf-bag-晕机-呕吐袋&#34;&gt;#&lt;/a&gt; Air sickness / Barf bag 晕机 / 呕吐袋&lt;/h3&gt;
&lt;p&gt;Don&#39;t worry, there is a barf bag in front of you.&lt;/p&gt;
&lt;h2 id=&#34;common-phrases-常用短语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#common-phrases-常用短语&#34;&gt;#&lt;/a&gt; Common phrases 常用短语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Excuse me, where is the Air China check-in desk? 对不起，请问中国航空公司在哪里&lt;/li&gt;
&lt;li&gt;How many bags can I check? 我可以托运几件行李&lt;/li&gt;
&lt;li&gt;Will my luggage go straight through to my final destination, or do I need to pick it up in Vancouver? 我的行李可以直接到达我的目的地吗，还是需要在温哥华取&lt;/li&gt;
&lt;li&gt;How much is the baggage fee? 行李费多少钱&lt;/li&gt;
&lt;li&gt;Please mark this bag as &#39;fragile&#39; 请在这个行李上标明易碎&lt;/li&gt;
&lt;li&gt;Is the flight on time? 飞机会准时起飞吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;discussion-questions-讨论问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#discussion-questions-讨论问题&#34;&gt;#&lt;/a&gt; Discussion Questions 讨论问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How often do you travel by plane?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I have never been on a plane.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do you like flying?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I don&#39;t like flying compared to traveling by train. I can see beautiful scenery on the train. And I can alse walk around and talk to people.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What was the first flight you ever took?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I remember, it was my first flight that I have. I went to ShangHai. It&#39;s a city in the south of China. And it&#39;s famous for the economy and the leisure time of the people.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do you prefer the window seat or aisle seat?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I prefer the window seat, because when the plane is taking off or landing, I can look out of the window to enjoy the scenery.&lt;/li&gt;
&lt;li&gt;But for the long trip, I pray for the aisle seat, because it&#39;s convenient for you. I mean, to go to the bathroom.&lt;/li&gt;
&lt;li&gt;I enjoy the birds eye view from the window seat.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How early to you arrive at the airport for your flight?&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do you usually fly economy class or business class?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I super wish I could fly business class on long flights, but I cannot afford business class, so I would if I could, but I can&#39;t, so I won&#39;t.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;homework&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homework&#34;&gt;#&lt;/a&gt; Homework&lt;/h2&gt;
&lt;p&gt;Write a dialog at the check-in counter at the airport. You should say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What kind of seat do you want?&lt;/li&gt;
&lt;li&gt;How many bags you are checking?&lt;/li&gt;
&lt;li&gt;whether or not your bag is overweight.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Agent: Hi there, can I see your passport?&lt;/p&gt;
&lt;p&gt;Me: Yes, here you go.&lt;/p&gt;
&lt;p&gt;A: And where are you flying today?&lt;/p&gt;
&lt;p&gt;M: I&#39;m flying to Beijing.&lt;/p&gt;
&lt;p&gt;A: Okay, you&#39;re flying economy right?&lt;/p&gt;
&lt;p&gt;M: Yes.&lt;/p&gt;
&lt;p&gt;A: Would you like an aisle seat or window seat.&lt;/p&gt;
&lt;p&gt;M: A window seat for sure!&lt;/p&gt;
&lt;p&gt;A: How many bags are you checking today?&lt;/p&gt;
&lt;p&gt;M: 2.&lt;/p&gt;
&lt;p&gt;A: Okay, please put them on the scale for measurement.&lt;/p&gt;
&lt;p&gt;So, the first bag is free, but there will be a $75 charge for the second bag. How will you be paying for that?&lt;/p&gt;
&lt;p&gt;M: I&#39;ll pay on credit card.&lt;/p&gt;
&lt;p&gt;A: Great, so here are your boarding pass. Your gate is 60D, and the boarding time is 11:15. You should have plenty of time to make it through security.&lt;/p&gt;
&lt;p&gt;Also, here are your baggage tags. Hold on to those in case your luggage gets lost.&lt;/p&gt;
&lt;p&gt;M: Wonderful, thank you.&lt;/p&gt;
&lt;p&gt;A: You&#39;re welcome. Have a great flight.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="英语学习之路" scheme="https://blog.aayu.today/categories/english/" />
        <category term="口语" scheme="https://blog.aayu.today/categories/english/%E5%8F%A3%E8%AF%AD/" />
        <category term="英语" scheme="https://blog.aayu.today/tags/%E8%8B%B1%E8%AF%AD/" />
        <updated>2023-07-06T13:57:05.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/miscellaneous/20230702/</id>
        <title>机械臂学习笔记</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/miscellaneous/20230702/"/>
        <content type="html">&lt;h2 id=&#34;临摹相同尺寸草图图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#临摹相同尺寸草图图片&#34;&gt;#&lt;/a&gt; 临摹相同尺寸草图图片&lt;/h2&gt;
&lt;p&gt;在草图编辑状态，点击「 工具 」-&amp;gt;「 草图工具 」-&amp;gt;「 草图图片 」即可导入草图，然后根据尺寸确定缩放关系，将草图移至原点即可&lt;/p&gt;
&lt;h2 id=&#34;尺寸链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尺寸链&#34;&gt;#&lt;/a&gt; 尺寸链&lt;/h2&gt;
&lt;p&gt;水平尺寸链或竖直尺寸链，先点击构造线确定原点，再点击其他线确定尺寸。&lt;/p&gt;
&lt;p&gt;右击添加到尺寸链，可以再次打开上次的尺寸链继续添加&lt;/p&gt;
&lt;h2 id=&#34;尺寸圆弧条件修改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尺寸圆弧条件修改&#34;&gt;#&lt;/a&gt; 尺寸圆弧条件修改&lt;/h2&gt;
&lt;p&gt;先点击圆弧尺寸，左侧属性栏选择第二栏「 引线 」，在下方修改圆弧条件即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/07/02/202307022133282.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;鼠标笔势由-4-笔势改为-8-笔势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鼠标笔势由-4-笔势改为-8-笔势&#34;&gt;#&lt;/a&gt; 鼠标笔势由 4 笔势改为 8 笔势&lt;/h2&gt;
&lt;p&gt;点击「 工具 」-&amp;gt; 「 自定义 」-&amp;gt;「 鼠标笔势 」即可切换 4 笔势或 8 笔势，左侧功能列表直接拖拽到右侧即可自定义笔势功能。&lt;/p&gt;
&lt;h2 id=&#34;制作草图块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#制作草图块&#34;&gt;#&lt;/a&gt; 制作草图块&lt;/h2&gt;
&lt;p&gt;点击「 工具 」-&amp;gt;「 块 」-&amp;gt;「 制作 」，将草图线段框选，即可做成草图块。按住 Ctrl 键拖动块，即可复制一份块&lt;/p&gt;
&lt;h2 id=&#34;给草图块添加颜色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#给草图块添加颜色&#34;&gt;#&lt;/a&gt; 给草图块添加颜色&lt;/h2&gt;
&lt;p&gt;点击「 编辑 」-&amp;gt;「 外观 」-&amp;gt;「 草图 / 曲线颜色 」&lt;/p&gt;
&lt;h2 id=&#34;快速完成定义草图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速完成定义草图&#34;&gt;#&lt;/a&gt; 快速完成定义草图&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/07/02/202307022134230.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;分割零件并另存为&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分割零件并另存为&#34;&gt;#&lt;/a&gt; 分割零件并另存为&lt;/h2&gt;
&lt;p&gt;点击「 插入 」-&amp;gt;「 特征 」-&amp;gt;「 分割 」，选择切割线，点击被切割的两个实体，确认即可&lt;/p&gt;
&lt;p&gt;在实体上右击，选择「 删除 / 保留实体 」，对两个零件进行另存为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/07/02/202307022134252.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;装配体插入零件时的固定与浮动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#装配体插入零件时的固定与浮动&#34;&gt;#&lt;/a&gt; 装配体插入零件时的固定与浮动&lt;/h2&gt;
&lt;p&gt;插入第一个零件时，直接点击确定键，这样可以使第一个零件的坐标系与装配体坐标系一致，零件会被固定且无法移动&lt;/p&gt;
&lt;p&gt;插入第二个零件直接选中零件再拖动到装配体视窗中，这样插入的零件就是浮动的，即可以被拖动&lt;/p&gt;
&lt;p&gt;持续更新中...&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="杂七杂八" scheme="https://blog.aayu.today/categories/skill/miscellaneous/" />
        <category term="SolidWorks" scheme="https://blog.aayu.today/tags/SolidWorks/" />
        <updated>2023-07-02T13:31:45.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/tools/20230523/</id>
        <title>Docker部署chatgpt_academic</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/tools/20230523/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;如果你是一个搞学术的人，相信你一定会爱上这款大杀器～&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一键润色&lt;/td&gt;
&lt;td&gt;支持一键润色、一键查找论文语法错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一键中英互译&lt;/td&gt;
&lt;td&gt;一键中英互译&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一键代码解释&lt;/td&gt;
&lt;td&gt;显示代码、解释代码、生成代码、给代码加注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTRzNHkxRTdqTg==&#34;&gt;自定义快捷键&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;支持自定义快捷键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模块化设计&lt;/td&gt;
&lt;td&gt;支持自定义强大的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3RyZWUvbWFzdGVyL2NyYXp5X2Z1bmN0aW9ucw==&#34;&gt;函数插件&lt;/span&gt;，插件支持&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3dpa2kvJUU1JTg3JUJEJUU2JTk1JUIwJUU2JThGJTkyJUU0JUJCJUI2JUU2JThDJTg3JUU1JThEJTk3&#34;&gt;热更新&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNqNDExQTdWVw==&#34;&gt;自我程序剖析&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL3dpa2kvY2hhdGdwdC1hY2FkZW1pYyVFOSVBMSVCOSVFNyU5QiVBRSVFOCU4NyVBQSVFOCVBRiU5MSVFOCVBNyVBMyVFNiU4QSVBNSVFNSU5MSU4QQ==&#34;&gt;一键读懂&lt;/span&gt;本项目的源代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNqNDExQTdWVw==&#34;&gt;程序剖析&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] 一键可以剖析其他 Python/C/C++/Java/Lua/... 项目树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读论文、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtUNDExeDdXbg==&#34;&gt;翻译&lt;/span&gt;论文&lt;/td&gt;
&lt;td&gt;[函数插件] 一键解读 latex/pdf 论文全文并生成摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Latex 全文&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW5rNHkxWTdKcy8=&#34;&gt;翻译&lt;/span&gt;、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZUNDExSDdjNS8=&#34;&gt;润色&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] 一键翻译或润色 latex 论文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;批量注释生成&lt;/td&gt;
&lt;td&gt;[函数插件] 一键批量生成函数注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Markdown&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlvNHkxNTdqVi8=&#34;&gt; 中英互译&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] 看到上面 5 种语言的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL2Jsb2IvbWFzdGVyL2RvY3MvUkVBRE1FX0VOLm1k&#34;&gt; README&lt;/span&gt; 了吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chat 分析报告生成&lt;/td&gt;
&lt;td&gt;[函数插件] 运行后自动生成总结汇报&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtUNDExeDdXbg==&#34;&gt;PDF 论文全文翻译功能&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] PDF 论文提取题目 &amp;amp; 摘要 + 翻译全文（多线程）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUxNNHkxMjc5WA==&#34;&gt;Arxiv 小助手&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] 输入 arxiv 文章 url 即可一键翻译摘要 + 下载 PDF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTlMNDExVTdpYQ==&#34;&gt;谷歌学术统合小助手&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;[函数插件] 给定任意谷歌学术搜索页面 URL，让 gpt 帮你&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUdQNDExVTdBei8=&#34;&gt;写 relatedworks&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;互联网信息聚合 + GPT&lt;/td&gt;
&lt;td&gt;[函数插件] 一键&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW9tNHkxMjdjaw==&#34;&gt;让 GPT 先从互联网获取信息&lt;/span&gt;，再回答问题，让信息永不过时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;公式 / 图片 / 表格显示&lt;/td&gt;
&lt;td&gt;可以同时显示公式的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vOTYxOTIxOTkvMjMwNTk4ODQyLTFkN2ZjZGRkLTgxNWQtNDBlZS1hZjYwLWJhZjQ4OGExOTlkZi5wbmc=&#34;&gt; tex 形式和渲染形式&lt;/span&gt;，支持公式、代码高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多线程函数插件支持&lt;/td&gt;
&lt;td&gt;支持多线调用 chatgpt，一键处理&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUZUNDExSDdjNS8=&#34;&gt;海量文本&lt;/span&gt;或程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动暗色 gradio&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9jaGF0Z3B0X2FjYWRlbWljL2lzc3Vlcy8xNzM=&#34;&gt; 主题&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;在浏览器 url 后面添加 &lt;code&gt;/?__theme=dark&lt;/code&gt;  可以切换 dark 主题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;详细介绍参见官方仓库：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWM=&#34;&gt;binary-husky/chatgpt_academic&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;极空间部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#极空间部署&#34;&gt;#&lt;/a&gt; 极空间部署&lt;/h2&gt;
&lt;h3 id=&#34;下载镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载镜像&#34;&gt;#&lt;/a&gt; 下载镜像&lt;/h3&gt;
&lt;p&gt;在仓库中搜索我的用户名 &lt;code&gt;ylsislove&lt;/code&gt; ，选择 &lt;code&gt;gpt_academic&lt;/code&gt; ，下载最新版本即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232159957.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h3&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232200256.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232201849.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232202385.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232203871.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232205799.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;API_EKY&lt;/code&gt; ：你的 OpenAI API Key，可同时填写多个 API-KEY，用英文逗号分割，例如 sk-openaikey1,sk-openaikey2,fkxxxx-api2dkey1,fkxxxx-api2dkey2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_WORKER_NUM&lt;/code&gt; ：多线程函数插件中，默认允许多少路线程同时访问 OpenAI。Free trial users 的限制是每分钟 3 次，Pay-as-you-go users 的限制是每分钟 3500 次。一言以蔽之：免费用户填 3，OpenAI 绑了信用卡的用户可以填 16 或者更高。提高限制请查询：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JhdGUtbGltaXRzL292ZXJ2aWV3&#34;&gt;https://platform.openai.com/docs/guides/rate-limits/overview&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LAYOUT&lt;/code&gt; ：LEFT-RIGHT（左右布局）TOP-DOWN（上下布局）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WEB_PORT&lt;/code&gt; ：网页的端口，注意要和端口配置里的容器端口相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUTHENTICATION&lt;/code&gt; ：设置用户名和密码，例如 &lt;code&gt;[(&amp;quot;root&amp;quot;, &amp;quot;123456&amp;quot;)]&lt;/code&gt; ，可配置多个&lt;/li&gt;
&lt;li https:api.openai.comv1chatcompletions:在这里填写重定向的api.openai.com的URL=&#34;&#34;&gt;&lt;code&gt;API_URL_REDIRECT&lt;/code&gt; ：重新 URL 重新定向，实现更换 API_URL 的作用。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多参数配置参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWMvYmxvYi9tYXN0ZXIvY29uZmlnLnB5&#34;&gt;gpt_academic/config.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如，如果你有自己的网络代理，那么就可以不用配置 &lt;code&gt;API_URL_REDIRECT&lt;/code&gt; ，直接配置 &lt;code&gt;USE_PROXY&lt;/code&gt;  为 &lt;code&gt;True&lt;/code&gt; ，然后配置 &lt;code&gt;proxies&lt;/code&gt;  为你的代理地址即可，如 &lt;code&gt;&amp;#123; &amp;quot;http&amp;quot;: &amp;quot;socks5h://localhost:10880&amp;quot;, &amp;quot;https&amp;quot;: &amp;quot;socks5h://localhost:10880&amp;quot;, &amp;#125;&lt;/code&gt; ，参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWMvYmxvYi9tYXN0ZXIvZG9ja2VyLWNvbXBvc2UueW1s&#34;&gt;gpt_academic/docker-compose.yml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;完成以上配置后，直接点击运行即可～&lt;/p&gt;
&lt;h3 id=&#34;使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用&#34;&gt;#&lt;/a&gt; 使用&lt;/h3&gt;
&lt;p&gt;在浏览器输入 &lt;code&gt;http://极空间IP地址:28890&lt;/code&gt; ，出现如下界面，配置成功～&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232217181.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入配置的用户名和密码，即可进入主界面，试用下 &lt;code&gt;[插件demo] 历史上的今天&lt;/code&gt; ，完美运行～&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/05/23/202305232220615.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来愉快的玩耍吧～&lt;/p&gt;
&lt;h2 id=&#34;局限性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局限性&#34;&gt;#&lt;/a&gt; 局限性&lt;/h2&gt;
&lt;p&gt;Docker 部署因为没有高性能显卡的支持，所以只能使用 &lt;code&gt;chatgpt&lt;/code&gt; ， &lt;code&gt;newbing&lt;/code&gt;  等远程服务，不支持官方仓库里的 &lt;code&gt;ChatGLM&lt;/code&gt; 、 &lt;code&gt;LLAMA&lt;/code&gt; 、 &lt;code&gt;盘古&lt;/code&gt; 、 &lt;code&gt;RWKV&lt;/code&gt;  等本地模型。&lt;/p&gt;
&lt;h2 id=&#34;致谢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#致谢&#34;&gt;#&lt;/a&gt; 致谢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JpbmFyeS1odXNreS9ncHRfYWNhZGVtaWM=&#34;&gt;gpt_academic&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="工具篇" scheme="https://blog.aayu.today/categories/skill/tools/" />
        <category term="ChatGPT" scheme="https://blog.aayu.today/tags/ChatGPT/" />
        <updated>2023-05-23T14:26:38.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-7/</id>
        <title>思源笔记源码解析之kernel篇（十）model</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-7/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;SiYuan 是一款知识管理笔记软件，用户可以使用它来制作 Markdown 笔记、管理知识图谱以及进行 OCR 扫描等操作。系统通过分块、分组等方式实现了一些特色功能，如闪卡复习、块级内联属性、虚拟引用等，同时支持多端同步（包括云同步和局域网同步）。&lt;/p&gt;
&lt;p&gt;以下是 model 目录下各个文件的功能列表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ai.go&lt;/td&gt;
&lt;td&gt;识别文字中的自然语言问题，并返回问题答案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appearance.go&lt;/td&gt;
&lt;td&gt;更新程序外观&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assets.go&lt;/td&gt;
&lt;td&gt;删除未使用的图片资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assets_watcher.go&lt;/td&gt;
&lt;td&gt;启动监听资源文件夹的 Goroutine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assets_watcher_darwin.go&lt;/td&gt;
&lt;td&gt;Darwin 平台上资源文件夹的监听器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attribute_view.go&lt;/td&gt;
&lt;td&gt;处理属性视图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;backlink.go&lt;/td&gt;
&lt;td&gt;实现笔记本和笔记的链接、反链、提及等功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bazzar.go&lt;/td&gt;
&lt;td&gt;集成程序的更新和发布等管理功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block.go&lt;/td&gt;
&lt;td&gt;处理文本块相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blockial.go&lt;/td&gt;
&lt;td&gt;处理块级内联属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blockinfo.go&lt;/td&gt;
&lt;td&gt;处理块的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bookmark.go&lt;/td&gt;
&lt;td&gt;处理书签相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;box.go&lt;/td&gt;
&lt;td&gt;实现笔记本的相关功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;conf.go&lt;/td&gt;
&lt;td&gt;程序配置相关的函数和结构体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;css.go&lt;/td&gt;
&lt;td&gt;用于管理 CSS 相关处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export.go&lt;/td&gt;
&lt;td&gt;处理笔记数据的导出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export_katex.go&lt;/td&gt;
&lt;td&gt;处理数学公式的导出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export_merge.go&lt;/td&gt;
&lt;td&gt;合并导出文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.go&lt;/td&gt;
&lt;td&gt;对文档的计数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flashcard.go&lt;/td&gt;
&lt;td&gt;处理闪卡复习相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format.go&lt;/td&gt;
&lt;td&gt;处理笔记数据的格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graph.go&lt;/td&gt;
&lt;td&gt;绘制笔记之间的关系图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;heading.go&lt;/td&gt;
&lt;td&gt;标题块和文档块相互转换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history.go&lt;/td&gt;
&lt;td&gt;处理笔记数据的历史记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import.go&lt;/td&gt;
&lt;td&gt;数据导入处理逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index.go&lt;/td&gt;
&lt;td&gt;处理笔记文档的检索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index_fix.go&lt;/td&gt;
&lt;td&gt;订正索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;liandi.go&lt;/td&gt;
&lt;td&gt;处理 Liandi 同步相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;listitem.go&lt;/td&gt;
&lt;td&gt;将列表项转化为文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mount.go&lt;/td&gt;
&lt;td&gt;处理笔记本的一些基本操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ocr.go&lt;/td&gt;
&lt;td&gt;处理 OCR 相关功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outline.go&lt;/td&gt;
&lt;td&gt;处理文档的大纲模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path.go&lt;/td&gt;
&lt;td&gt;处理文件路径相关的操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;process.go&lt;/td&gt;
&lt;td&gt;处理运行时进程的相关信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;render.go&lt;/td&gt;
&lt;td&gt;将块中的块引用和嵌入 SQL 查询转换为 Markdown 字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repository.go&lt;/td&gt;
&lt;td&gt;处理笔记相关的快照、数据同步、快照恢复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.go&lt;/td&gt;
&lt;td&gt;处理块节点树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;session.go&lt;/td&gt;
&lt;td&gt;处理用户登录相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;snippet.go&lt;/td&gt;
&lt;td&gt;处理片段相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;storage.go&lt;/td&gt;
&lt;td&gt;线程安全的本地存储逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync.go&lt;/td&gt;
&lt;td&gt;处理同步相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag.go&lt;/td&gt;
&lt;td&gt;处理标签相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template.go&lt;/td&gt;
&lt;td&gt;添加块级内联属性节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;transaction.go&lt;/td&gt;
&lt;td&gt;实现事务处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tree.go&lt;/td&gt;
&lt;td&gt;处理笔记本树形结构相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updater.go&lt;/td&gt;
&lt;td&gt;处理程序更新相关逻辑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upload.go&lt;/td&gt;
&lt;td&gt;用于请求中解析 multipart 表单，接收键值对或具有一个或多个文件的部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;virtualref.go&lt;/td&gt;
&lt;td&gt;实现虚拟引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;widget.go&lt;/td&gt;
&lt;td&gt;处理块级小部件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;049-aigo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#049-aigo&#34;&gt;#&lt;/a&gt; [0/49] ai.go&lt;/h2&gt;
&lt;p&gt;该程序文件实现了 model 包中的 ChatGPT 和 ChatGPTWithAction 函数，这两个函数用于调用 GPT 模型来进行对话。ChatGPT 函数用于一般情况的对话，ChatGPTWithAction 函数用于针对某个动作的对话。&lt;/p&gt;
&lt;p&gt;程序中还定义了一个 ChatGPTContinueWrite 函数，用于依次发送多次请求，最终得到所有生成文字的整合结果。在具体实现上，程序通过判断是否开启了 GPT 的 API，来决定是否进行对话。&lt;/p&gt;
&lt;p&gt;如果开启了 GPT 的 API，程序接着根据消息和前几次对话内容，调用 GPT 模型得到生成文字。另外还包括了一些辅助函数，用于从给定的区块 ID 中获取对应区块的内容，并将其转换为标准化的 Markdown 文本。&lt;/p&gt;
&lt;h2 id=&#34;149-appearancego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#149-appearancego&#34;&gt;#&lt;/a&gt; [1/49] appearance.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 笔记的一个模块，用于程序外观的管理和初始化。程序在初始化时，会创建必要的外观相关文件夹，并将资源文件等拷贝到这些文件夹下。&lt;/p&gt;
&lt;p&gt;程序还会加载已经存在的主题（包括 UI 和图标），并启动文件监测。如果检测到主题或 UI 有变动，程序会重新加载相应的主题或 UI 文件，并刷新程序外观。&lt;/p&gt;
&lt;h2 id=&#34;249-assetsgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#249-assetsgo&#34;&gt;#&lt;/a&gt; [2/49] assets.go&lt;/h2&gt;
&lt;p&gt;该文件定义了一系列与 SiYuan 笔记的图片资源处理相关的函数，主要包括将网络图片转换为本地图片、搜索图片资源、获取图片的绝对路径等等。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NetImg2LocalAssets&lt;/code&gt;  函数用于将指定笔记的网络图片转换为本地图片，并将转换后的图片的链接在笔记中进行替换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocImageAssets&lt;/code&gt;  函数用于从指定笔记中获取所有的图片资源的链接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetAssetAbsPath&lt;/code&gt;  函数用于获取指定图片资源的绝对路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UploadAssets2Cloud&lt;/code&gt;  函数用于将指定笔记中的所有图片资源上传至云端图床。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemoveUnusedAssets&lt;/code&gt;  函数用于删除未使用的图片资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;349-assets_watchergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#349-assets_watchergo&#34;&gt;#&lt;/a&gt; [3/49] assets_watcher.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言的代码文件，文件名为  &lt;code&gt;assets_watcher.go&lt;/code&gt; ，位于  &lt;code&gt;model.zip.extract\model&lt;/code&gt;  目录下。&lt;/p&gt;
&lt;p&gt;该文件实现了  &lt;code&gt;model&lt;/code&gt;  包中的  &lt;code&gt;WatchAssets()&lt;/code&gt;  函数和  &lt;code&gt;CloseWatchAssets()&lt;/code&gt;  函数，用于监控系统中的资源文件夹的变化并进行处理。具体包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;该文件使用了  &lt;code&gt;fsnotify&lt;/code&gt;  包，创建了一个  &lt;code&gt;fsnotify.Watcher&lt;/code&gt;  实例，用于监听系统中资源文件夹的变化。如果监听出错，会打印日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过  &lt;code&gt;watchAssets()&lt;/code&gt;  函数开启一个 goroutine 来监听资源文件夹的变化。具体包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建  &lt;code&gt;timer&lt;/code&gt;  实例和  &lt;code&gt;lastEvent&lt;/code&gt;  变量。&lt;/li&gt;
&lt;li&gt;通过  &lt;code&gt;select&lt;/code&gt;  语句监听事件和错误的 channel，实现事件和错误的处理。&lt;/li&gt;
&lt;li&gt;当接收到事件时，通过  &lt;code&gt;timer&lt;/code&gt;  延迟 100ms 再处理事件。如果在延迟期间又接收到新事件，会重新计时。&lt;/li&gt;
&lt;li&gt;如果事件的操作类型为  &lt;code&gt;fsnotify.Write&lt;/code&gt; ，说明有文件被修改了，则调用  &lt;code&gt;IncSync()&lt;/code&gt;  函数将修改添加到云端同步。&lt;/li&gt;
&lt;li&gt;重新缓存资源文件，以便使用  &lt;code&gt;/资源&lt;/code&gt;  搜索。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WatchAssets()&lt;/code&gt;  函数用于启动监听资源文件夹的 goroutine。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CloseWatchAssets()&lt;/code&gt;  函数用于关闭资源文件夹的监听器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;449-assets_watcher_darwingo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#449-assets_watcher_darwingo&#34;&gt;#&lt;/a&gt; [4/49] assets_watcher_darwin.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 assets_watcher_darwin.go，属于 Go 语言编写的 SiYuan 笔记的资产监视器模块。&lt;/p&gt;
&lt;p&gt;它通过使用观察器实现对 SiYuan 笔记资产目录（assets）的监视，当文件发生更改时自动进行同步，同时重新缓存资源文件，以便使用 / 资源 搜索。&lt;/p&gt;
&lt;p&gt;该模块通过使用 watcher 包和 filepath 包实现对资产目录的监视，启动和关闭资产监视器等相关操作。 该模块只对 Darwin 系统版本（如 macOS）有效，因此包含了  &lt;code&gt;//go:build darwin&lt;/code&gt;  编译指令。&lt;/p&gt;
&lt;h2 id=&#34;549-attribute_viewgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#549-attribute_viewgo&#34;&gt;#&lt;/a&gt; [5/49] attribute_view.go&lt;/h2&gt;
&lt;p&gt;该程序文件主要实现了一个笔记应用中的属性视图相关功能。其中涉及到的函数包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RenderAttributeView：渲染属性视图，返回对应的 DOM 结构。&lt;/li&gt;
&lt;li&gt;doInsertAttrViewBlock：向属性视图中添加块。&lt;/li&gt;
&lt;li&gt;doRemoveAttrViewBlock：从属性视图中删除块。&lt;/li&gt;
&lt;li&gt;doAddAttrViewColumn：向属性视图中添加属性列。&lt;/li&gt;
&lt;li&gt;doRemoveAttrViewColumn：从属性视图中删除属性列。&lt;/li&gt;
&lt;li&gt;addAttributeViewColumn：向属性视图中添加指定类型的属性列。&lt;/li&gt;
&lt;li&gt;removeAttributeViewColumn：从属性视图中删除指定属性列。&lt;/li&gt;
&lt;li&gt;removeAttributeViewBlock：从属性视图中删除指定块。&lt;/li&gt;
&lt;li&gt;addAttributeViewBlock：向属性视图中添加指定块，并为块添加属性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中的 av 包提供了属性视图的解析、序列化和持久化等功能。文件中还引用了其他的包和库，如 lute、parse、treenode、sql 等。&lt;/p&gt;
&lt;p&gt;总的来说，该程序文件实现了属性视图相关的操作，为笔记应用提供了可供使用的功能。&lt;/p&gt;
&lt;h2 id=&#34;649-backlinkgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#649-backlinkgo&#34;&gt;#&lt;/a&gt; [6/49] backlink.go&lt;/h2&gt;
&lt;p&gt;该程序文件为 siyuan-note 中的一个后端代码文件，主要包含 RefreshBacklink、GetBackmentionDoc、GetBacklinkDoc、GetBacklink2 和 GetBacklink 等函数。&lt;/p&gt;
&lt;p&gt;其中，RefreshBacklink 主要用于更新引用关系，GetBackmentionDoc 和 GetBacklinkDoc 函数用于获取提及关系和引用关系，GetBacklink2 和 GetBacklink 函数用于获取链接和反链关系。这些函数都涉及到 sql 操作和解析树操作，主要是用于在 siyuan-note 中实现笔记本和笔记的链接、反链、提及等功能。&lt;/p&gt;
&lt;h2 id=&#34;749-bazzargo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#749-bazzargo&#34;&gt;#&lt;/a&gt; [7/49] bazzar.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个实现了一系列从社区中心获取插件的功能函数集合，函数包括获取插件 README、获取插件组件、安装插件组件、卸载插件组件等。&lt;/p&gt;
&lt;p&gt;其中调用了一些已有的函数库以实现具体功能。同时，该程序文件基于开源协议发布。&lt;/p&gt;
&lt;h2 id=&#34;849-blockgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#849-blockgo&#34;&gt;#&lt;/a&gt; [8/49] block.go&lt;/h2&gt;
&lt;p&gt;该文件实现了一个名为  &lt;code&gt;Block&lt;/code&gt;  的结构体和这个结构体的一些操作函数。这个结构体描述了一个特定  &lt;code&gt;content block&lt;/code&gt; （即 siyuan 笔记中的一个块）。它有许多字段，包括路径、id、名字、别名、内容和子结构等。&lt;/p&gt;
&lt;p&gt;同时，这个文件还实现了一些函数，如  &lt;code&gt;RecentUpdatedBlocks()&lt;/code&gt; ，它可以返回最近更新的 30 个块的信息，可以用来供笔记首页的构建； &lt;code&gt;GetBlock(id string, tree *parse.Tree)&lt;/code&gt; ，它可以根据一个块的 id 来导出这个块的具体内容和信息。&lt;/p&gt;
&lt;h2 id=&#34;949-blockialgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#949-blockialgo&#34;&gt;#&lt;/a&gt; [9/49] blockial.go&lt;/h2&gt;
&lt;p&gt;该程序文件是在 model 目录下，文件名为 blockial.go。它实现了处理 SiYuan 笔记块属性的相关函数，包括设置和获取笔记块的属性、清除笔记块的属性等，其中还包括处理笔记块提醒事件的函数等。具体实现过程中，该文件引入了多个第三方库和其他模块中的函数。&lt;/p&gt;
&lt;h2 id=&#34;1049-blockinfogo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1049-blockinfogo&#34;&gt;#&lt;/a&gt; [10/49] blockinfo.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的模块，它定义了 BlockInfo 结构体，用于存储块的元信息。它还定义了若干个函数用于获取块信息、块路径信息等。&lt;/p&gt;
&lt;p&gt;其中获取块信息的函数是 GetDocInfo，它调用 loadTreeByBlockID 方法获取给定 ID 的块的 Tree，然后从 Tree 中取得块的相应属性（如 Name、RefCount、SubFileCount、RefIDs 等）并构造 BlockInfo 结构体。&lt;/p&gt;
&lt;p&gt;其他函数则都是从给定的块或节点信息中提取块的相关信息，例如 GetBlockRefText 用于获取块的引用文本，GetBlockIndex 用于获取块在文档中的索引位置，BuildBlockBreadcrumb 用于构造块的面包屑路径。&lt;/p&gt;
&lt;h2 id=&#34;1149-bookmarkgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1149-bookmarkgo&#34;&gt;#&lt;/a&gt; [11/49] bookmark.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言编写的模型文件，主要包含了关于标签的数据操作，如删除标签、修改标签、获取标签等。&lt;/p&gt;
&lt;p&gt;其中包含了多个函数，如  &lt;code&gt;RemoveBookmark&lt;/code&gt;  用于删除标签，  &lt;code&gt;RenameBookmark&lt;/code&gt;  用于修改标签， &lt;code&gt;BookmarkLabels&lt;/code&gt;  用于获取现有的标签， &lt;code&gt;BuildBookmark&lt;/code&gt;  用于构建标签。该文件还引用了其他 Go 语言库，如  &lt;code&gt;github.com/88250/lute/parse&lt;/code&gt;  和  &lt;code&gt;github.com/siyuan-note/siyuan/kernel/cache&lt;/code&gt;  等。&lt;/p&gt;
&lt;h2 id=&#34;1249-boxgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1249-boxgo&#34;&gt;#&lt;/a&gt; [12/49] box.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言程序文件，名为 box.go，位于 model 文件夹下。该文件实现了笔记本 Box 的各种操作，如获取笔记本列表、获取或保存笔记本配置、列出或操作笔记本中的文件等。实现了 StatJob 函数用于自动记录笔记本的统计信息，如笔记数、块数、数据大小和资产大小，并推送桌面端可用磁盘空间不足的警告消息。&lt;/p&gt;
&lt;p&gt;同时，程序中也实现了一些工具函数用于处理树形结构。&lt;/p&gt;
&lt;h2 id=&#34;1349-confgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1349-confgo&#34;&gt;#&lt;/a&gt; [13/49] conf.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言源文件，文件名为 conf.go，位于 model 目录下。程序定义了一个名为 AppConf 的结构体类型，用于存储应用程序的各种配置选项。其中包括日志级别、界面语言列表、文件树、标签、编辑器、导出、关系图、界面布局等。&lt;/p&gt;
&lt;p&gt;程序在初始化时从配置文件中读取这些选项的值，并进行一些修正和初始化工作，最终将 AppConf 对象输出。程序的初始化过程中还进行了语言初始化、本地 IP 获取、网络代理设置等操作。程序依赖于一些第三方库，包括 gulu、lute、locale 等。&lt;/p&gt;
&lt;h2 id=&#34;1449-cssgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1449-cssgo&#34;&gt;#&lt;/a&gt; [14/49] css.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个模型文件，可以在处理和获取自定义 CSS 颜色方案时使用。代码将自定义颜色方案值写入到全局变量中，以便在其他地方使用。&lt;/p&gt;
&lt;p&gt;主要包含一些读取和写入 CSS 的功能，以及一些与颜色有关的函数等。文件中定义了许多常量和变量，包括颜色的数组以及一个颜色映射。&lt;/p&gt;
&lt;p&gt;该文件主要用于处理主题中的颜色设置，以及在输出 HTML 页面等情况下使用 CSS 策略的基础代码。&lt;/p&gt;
&lt;h2 id=&#34;1549-exportgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1549-exportgo&#34;&gt;#&lt;/a&gt; [15/49] export.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 Go 语言编写的代码，名称为 export.go。包含了 Siyuan 的导出相关功能。&lt;/p&gt;
&lt;p&gt;其中 ExportData () 函数用于将数据导出并压缩成.zip 文件，Export2Liandi () 函数用于将当前文档导出到 Liandi 笔记中，ExportSY (id string)&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1zaXF1aGoxaGthNTFiejM5YjdiMjg4YW1tcHlnYTcxMWF3bjViLlNZ&#34;&gt; 函数用于将当前文档导出为.SY&lt;/span&gt; 文件并压缩成.zip 文件，ExportDocx (id, savePath string, removeAssets, merge bool) 函数用于将当前文档导出为 Word 文档，Preview (id string) 函数用于预览当前文档的 HTML 输出。&lt;/p&gt;
&lt;p&gt;此外，文件还包含了其他导出相关的函数。&lt;/p&gt;
&lt;h2 id=&#34;1649-export_katexgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1649-export_katexgo&#34;&gt;#&lt;/a&gt; [16/49] export_katex.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 Katex 导出函数。函数主要做的是提取数学表达式中使用的宏，并将其替换为一些占位符。&lt;/p&gt;
&lt;p&gt;此外，该程序还定义了一个字符串切片数组，该数组包含 Katex 支持的函数和操作符列表。函数和操作符列表主要用于判断和处理数学表达式中的函数和操作符。&lt;/p&gt;
&lt;h2 id=&#34;1749-export_mergego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1749-export_mergego&#34;&gt;#&lt;/a&gt; [17/49] export_merge.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 Siyuan 笔记应用的一个模块，主要实现了将多个子文档合并成一个文档的功能。&lt;/p&gt;
&lt;p&gt;首先根据根结点生成一个 Block（即文档），然后遍历 Block 的所有子节点，将每个子节点代表的子文档加载成一棵 parse.Tree，然后将子文档中的所有节点插入到根结点指定的插入点之后。&lt;/p&gt;
&lt;p&gt;其中涉及到了 Lute 引擎的使用，以及对文件系统中文档的读取，文档节点的创建和插入等操作。&lt;/p&gt;
&lt;h2 id=&#34;1849-filego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1849-filego&#34;&gt;#&lt;/a&gt; [18/49] file.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 siyuan-note 应用的 model 包下的 file.go 文件。该文件实现了一些与文件相关操作的函数，包括获取文件列表、获取文件详情信息、统计文件内容等。&lt;/p&gt;
&lt;p&gt;其中，ListDocTree 函数可以列出指定目录下的所有文档，ContentStat 函数可以统计指定文档的字符数、单词数、图片数、链接数和引用数，BlocksWordCount 函数可以统计指定文档块的字符数、单词数、图片数、链接数和引用数，StatTree 函数可以统计指定文档树的字符数、单词数、图片数、链接数和引用数。&lt;/p&gt;
&lt;h2 id=&#34;1949-flashcardgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1949-flashcardgo&#34;&gt;#&lt;/a&gt; [19/49] flashcard.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 Siyuan 的卡片记忆功能相关代码，主要功能包括卡包的增删改查、卡片的复习、跳过和显示等。&lt;/p&gt;
&lt;p&gt;其中，程序中维护了一个 Decks 变量，它包含了所有卡包，每个卡包有自己的 ID，包含了它所管理的卡片的信息。&lt;/p&gt;
&lt;p&gt;GetNotebookFlashcards 获取某个笔记本中的所有笔记的闪卡记录，GetTreeFlashcards 获取一棵子树中的所有闪卡，GetFlashcards 获取全部卡包中的所有闪卡信息。&lt;/p&gt;
&lt;p&gt;ReviewFlashcard 对应闪卡复习功能，SkipReviewFlashcard 则是记录卡片跳过操作的函数。GetDueFlashcards 函数用于获取所有未复习的卡片，RemoveFlashcardsByCardIDs 用于移除指定卡包中的指定卡片的闪卡历史记录。&lt;/p&gt;
&lt;h2 id=&#34;2049-formatgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2049-formatgo&#34;&gt;#&lt;/a&gt; [20/49] format.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 笔记应用程序的一部分，文件名为 format.go。&lt;/p&gt;
&lt;p&gt;该文件提供了一个函数用于自动添加空格。它引用了一些来自其他库的函数、变量和结构体，如 Github 上的 gulu、lute 和 render 等。&lt;/p&gt;
&lt;p&gt;具体来说，该文件可以读取一棵树的 JSON 表示，然后合并相邻的同类行级节点，并使用 Lute 引擎将树渲染成 Markdown 格式。然后它启用自动空格，然后使用 Lute 引擎重新格式化树，并将结果保存在一个 JSON 文件中。该代码还实现了一个函数，用于生成历史记录。&lt;/p&gt;
&lt;h2 id=&#34;2149-graphgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2149-graphgo&#34;&gt;#&lt;/a&gt; [21/49] graph.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 笔记应用程序的一部分。该程序使用 golang 语言编写，主要负责建立笔记关系图。笔记是通过树形结构来管理的，每个节点都表示一个笔记块。&lt;/p&gt;
&lt;p&gt;该程序使用从 SQL 中检索的块数据构建笔记关系图，并链接相关笔记。在此过程中使用了多个结构体，如 “GraphNode”，“GraphLink” 等，它们表示了笔记关系图中的节点和连接线。&lt;/p&gt;
&lt;p&gt;此文件中的函数将 SQL 块数据转换为相应的结构体，并在处理过程中调用其他函数来构建笔记关系图。&lt;/p&gt;
&lt;h2 id=&#34;2249-headinggo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2249-headinggo&#34;&gt;#&lt;/a&gt; [22/49] heading.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的模块，文件名为 heading.go，包含了从标题折叠到文档块之间的转换函数，以及一些与标题、文档块相关的函数。&lt;/p&gt;
&lt;p&gt;文件中包含函数  &lt;code&gt;doFoldHeading&lt;/code&gt;  和  &lt;code&gt;doUnfoldHeading&lt;/code&gt;  分别用于折叠和展开标题。还包含了函数  &lt;code&gt;Doc2Heading&lt;/code&gt;  用于将文档块转换为标题块，函数  &lt;code&gt;Heading2Doc&lt;/code&gt;  用于将标题块转换为文档块，以及一些辅助函数。&lt;/p&gt;
&lt;p&gt;这个程序文件实现了标题块与文档块的相互转换。&lt;/p&gt;
&lt;h2 id=&#34;2349-historygo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2349-historygo&#34;&gt;#&lt;/a&gt; [23/49] history.go&lt;/h2&gt;
&lt;p&gt;本程序文件主要实现了 siyuan 中文笔记软件中文档历史记录相关的功能，包括自动生成文档历史记录、获取文档历史记录内容、文档历史记录回滚等功能。&lt;/p&gt;
&lt;p&gt;其中，AutoGenerateDocHistory 函数实现了自动生成文档历史记录的功能，该函数会在一定的时间间隔内自动调用 generateDocHistory 函数，对打开的文档生成历史记录。&lt;/p&gt;
&lt;p&gt;generateDocHistory 函数则实现了生成文档历史记录的具体逻辑，包括清除过期的历史记录、对文档生成历史记录并保存到本地等。其他函数则实现了获取与回滚文档历史记录的相关功能。&lt;/p&gt;
&lt;h2 id=&#34;2449-importgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2449-importgo&#34;&gt;#&lt;/a&gt; [24/49] import.go&lt;/h2&gt;
&lt;p&gt;该程序文件主要实现了一些 SiYuan 笔记系统中的数据导入处理逻辑，包含了以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML2Markdown：将 HTML 字符串转换为 Markdown 字符串。&lt;/li&gt;
&lt;li&gt;ImportSY：将 SiYuan 笔记系统.SY.zip 文件导入到指定位置。&lt;/li&gt;
&lt;li&gt;ImportData：将 SiYuan 笔记系统.Data.zip 文件导入到默认位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，ImportSY 函数主要实现处理 .sy.zip 文件导入的逻辑，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解压 zip 文件到一个临时目录；&lt;/li&gt;
&lt;li&gt;读取临时目录下的所有 .sy 文件，解析出它们所对应的树结构，并重新生成每个节点的 ID；&lt;/li&gt;
&lt;li&gt;修改导入后各个 .sy 文件中引用和嵌入的节点 ID；&lt;/li&gt;
&lt;li&gt;重命名临时目录下的 .sy 文件到指定的目标路径，并拷贝其中所包含的资源文件到 data/assets/ 目录下；&lt;/li&gt;
&lt;li&gt;读取 sort.json 文件，合并其中的排序规则，并将其写回到 .siyuan/sort.json 中；&lt;/li&gt;
&lt;li&gt;拷贝所有解析出的 .sy 文件到指定位置，并上传到 SQL 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，该文件实现了 SiYuan 笔记系统的数据导入处理逻辑。&lt;/p&gt;
&lt;h2 id=&#34;2549-indexgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2549-indexgo&#34;&gt;#&lt;/a&gt; [25/49] index.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 SiYuan 笔记软件的一部分，其中包含了若干函数用于处理笔记的索引和查询。文件中的函数包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unindex ()：从数据库中删除当前笔记盒的相关索引。&lt;/li&gt;
&lt;li&gt;Index ()：为当前笔记盒创建索引。&lt;/li&gt;
&lt;li&gt;index (boxID string)：实现 Index () 函数的具体过程，从笔记盒中读取所有的 .sy 文件，对每一个文件进行解析，得到笔记树，并对笔记树建立相关索引。&lt;/li&gt;
&lt;li&gt;IndexRefs ()：对笔记牌中所有的引用节点进行处理，创建相应的引用索引。&lt;/li&gt;
&lt;li&gt;IndexEmbedBlockJob ()：对所有的嵌入块进行处理，为嵌入块的查询结果建立相应的索引。&lt;/li&gt;
&lt;li&gt;autoIndexEmbedBlock (embedBlocks []*sql.Block)：实现 IndexEmbedBlockJob () 的具体过程，遍历所有的嵌入块，执行嵌入块的查询操作，并将查询结果建立索引。&lt;/li&gt;
&lt;li&gt;updateEmbedBlockContent (embedBlockID string, queryResultBlocks []*EmbedBlock)：更新嵌入块的内容。&lt;/li&gt;
&lt;li&gt;init ()：订阅一些事件，用于显示程序运行状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2649-index_fixgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2649-index_fixgo&#34;&gt;#&lt;/a&gt; [26/49] index_fix.go&lt;/h2&gt;
&lt;p&gt;该程序文件主要实现了自动校验数据库索引的功能。包含以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FixIndexJob：自动校验与订正数据库索引的入口函数。&lt;/li&gt;
&lt;li&gt;removeDuplicateDatabaseIndex：删除重复的数据库索引。&lt;/li&gt;
&lt;li&gt;resetDuplicateBlocksOnFileSys：重置重复 ID 的块。&lt;/li&gt;
&lt;li&gt;fixBlockTreeByFileSys：通过文件系统订正块树。&lt;/li&gt;
&lt;li&gt;fixDatabaseIndexByBlockTree：通过块树订正数据库索引。&lt;/li&gt;
&lt;li&gt;reindexTreeByUpdated：根据更新时间，重新索引笔记本块树。&lt;/li&gt;
&lt;li&gt;reindexTreeByPath：根据文件 .sy 文件路径，重新索引笔记本块树。&lt;/li&gt;
&lt;li&gt;reindexTree：根据块树 ID，重新索引笔记本块树。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要流程是先删除重复的数据库索引，然后通过文件系统订正块树，再通过块树订正数据库索引。通过  &lt;code&gt;reindexTreeByUpdated&lt;/code&gt; 、 &lt;code&gt;reindexTreeByPath&lt;/code&gt; 、 &lt;code&gt;reindexTree&lt;/code&gt;  函数，实现读取块树文件并订正索引的功能。&lt;/p&gt;
&lt;h2 id=&#34;2749-liandigo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2749-liandigo&#34;&gt;#&lt;/a&gt; [27/49] liandi.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 liandi.go，位于 model 文件夹下。该程序提供了与云端相关的一些操作，包括调用机器人进行对话、开始试用、设置云端提醒等等，其中部分涉及到网络请求。&lt;/p&gt;
&lt;p&gt;同时，该程序文件中还包含一些变量的定义、判断是否是订阅用户、获取基础用户信息等功能。&lt;/p&gt;
&lt;h2 id=&#34;2849-listitemgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2849-listitemgo&#34;&gt;#&lt;/a&gt; [28/49] listitem.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言程序文件，文件名为 listitem.go，位于 model 包下。&lt;/p&gt;
&lt;p&gt;程序导入了一些库文件，例如  &lt;code&gt;path&lt;/code&gt; 、 &lt;code&gt;github.com&lt;/code&gt;  等。程序定义了一个函数  &lt;code&gt;ListItem2Doc&lt;/code&gt; ，该函数会将一个列表项转化为文档，具体实现过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loadTreeByBlockID&lt;/code&gt;  函数用于加载指定的  &lt;code&gt;srcListItemID&lt;/code&gt;  所在的文档树。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;treenode.GetNodeInTree&lt;/code&gt;  函数用于获取指定节点 ID（在此为 srcListItemID）在文档树中的节点对象。&lt;/li&gt;
&lt;li&gt;根据传递进来的  &lt;code&gt;targetBoxID&lt;/code&gt;  和  &lt;code&gt;targetPath&lt;/code&gt; ，确定目标位置。如果  &lt;code&gt;targetPath&lt;/code&gt;  等于  &lt;code&gt;/&lt;/code&gt; ，则将列表项移动到目标文件夹的根目录下，否则将列表项移动到所在目标文件夹的指定目录下。&lt;/li&gt;
&lt;li&gt;将列表项中的子节点全部分离出来，并按顺序添加到新文档树上。如果列表项中没有子节点，则添加一个新段落节点。&lt;/li&gt;
&lt;li&gt;设置新文档树的一些属性，例如根节点的 IAL 属性，路径等。&lt;/li&gt;
&lt;li&gt;设置源列表项节点的一些 IAL 属性，例如节点类型为文档、ID、标题等，移除  &lt;code&gt;fold&lt;/code&gt;  属性，并且设置 Kramdown IAL（Informal Attributes Language）。&lt;/li&gt;
&lt;li&gt;将源列表项节点从原文档树中删除，并删除其父节点，如果其父节点已没有子节点。&lt;/li&gt;
&lt;li&gt;根据源文档树和新文档树的各自 ID、路径等属性设置其它相关属性，然后写入更新队列。&lt;/li&gt;
&lt;li&gt;对文档树进行索引，并存放到数据库中。&lt;/li&gt;
&lt;li&gt;调用  &lt;code&gt;RefreshBacklink&lt;/code&gt;  函数刷新其它相关的链接关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，该程序实现了将一个列表项转化为文档的功能，通过分离子节点、设置节点的 IAL 属性等步骤，将列表项转化为具备文档特性的节点，并最终存储于数据库中。&lt;/p&gt;
&lt;h2 id=&#34;2949-mountgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2949-mountgo&#34;&gt;#&lt;/a&gt; [29/49] mount.go&lt;/h2&gt;
&lt;p&gt;该文件是 Siyuan 笔记的一个 Go 程序，主要包含了许多操作笔记本的函数，例如创建笔记本、重命名笔记本、删除笔记本、挂载和卸载笔记本等。&lt;/p&gt;
&lt;p&gt;其中的函数实现了对笔记本的各种操作，具体包括所涉及到的函数有：CreateBox、RenameBox、RemoveBox、Unmount、unmount0、Mount、IsUserGuide 等。它们的作用分别是：创建一个新的笔记本，重命名一个笔记本，删除一个笔记本，卸载某个笔记本以及挂载某个笔记本，判断是否为用户指南。&lt;/p&gt;
&lt;p&gt;文件中的函数还涉及到一些 Go 开发的基础知识，比如字符串处理、目录管理、文件的读写和操作等。&lt;/p&gt;
&lt;p&gt;例如，函数中用到了操作系统的 path/filepath 包，处理文件路径；使用了 Go 自带的 errors 包，生成了错误信息；使用了 gulu 库处理字符串，以及监听器监听某些事件等。&lt;/p&gt;
&lt;p&gt;该文件是 Siyuan 笔记的一个重要组成部分，负责笔记本本身的相关功能。它所提供的各个函数能够帮助用户更加方便、精准地管理和处理笔记本。&lt;/p&gt;
&lt;h2 id=&#34;3049-ocrgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3049-ocrgo&#34;&gt;#&lt;/a&gt; [30/49] ocr.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言的程序文件，文件名为 ocr.go。&lt;/p&gt;
&lt;p&gt;该文件声明了一些函数用于 OCR（Optical Character Recognition，光学字符识别）相关的操作，包括对图像进行 OCR 处理、将 OCR 处理结果存储到缓存中，以及从缓存中读取 OCR 处理结果等。其中，autoOCRAssets () 函数是一个主要的函数，用于自动对未处理的图像进行 OCR 处理并将结果存储到缓存中。&lt;/p&gt;
&lt;p&gt;此外，还包括其它一些函数，如 cleanNotExistAssetsTexts ()、FlushAssetsTextsJob ()、LoadAssetsTexts ()、SaveAssetsTexts () 等，用于一些 OCR 处理相关的后续工作。&lt;/p&gt;
&lt;h2 id=&#34;3149-outlinego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3149-outlinego&#34;&gt;#&lt;/a&gt; [31/49] outline.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的模块，文件名是 outline.go。其主要实现了一个名为 Outline 的函数，该函数被调用时，会传入一个 rootID 作为参数。&lt;/p&gt;
&lt;p&gt;函数主要作用是在树形结构中提取出标题节点，然后将这些标题节点拼接成为一个平铺的树形结构。&lt;/p&gt;
&lt;p&gt;在该函数中，会首先调用 loadTreeByBlockID 函数加载树形结构。然后使用 ast.Walk 遍历该树节点，提取出标题节点，并将这些节点组成一个块，每个块包含了标题节点的详细信息。然后使用 linkedliststack.New 实现堆栈的操作，将相同深度的标题块放入到子块的列表中。最终，使用 toFlatTree 将其组装为一个平铺的树形结构后返回。&lt;/p&gt;
&lt;h2 id=&#34;3249-pathgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3249-pathgo&#34;&gt;#&lt;/a&gt; [32/49] path.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 笔记应用的模型包，实现了笔记的增删改查等功能。主要包含以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;createDocsByHPath：根据传入的 boxID、hPath 和 content 创建一个文档。&lt;/li&gt;
&lt;li&gt;toFlatTree：构造传入的列表中子块的树结构，并返回生成的树形结构。&lt;/li&gt;
&lt;li&gt;toSubTree：根据关键字构造子树。&lt;/li&gt;
&lt;li&gt;getBlockIn：在传入的 blocks 列表中根据 id 查找是否存在一个 Block 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，每个函数的内部实现复杂度各自不同。&lt;/p&gt;
&lt;h2 id=&#34;3349-processgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3349-processgo&#34;&gt;#&lt;/a&gt; [33/49] process.go&lt;/h2&gt;
&lt;p&gt;该文件为 process.go，主要实现了处理信号和钩子桌面 UI 进程的功能。&lt;/p&gt;
&lt;p&gt;函数 HandleSignal 用于接收系统相关的信号（如中断、退出等），并在接收到信号时关闭相关的进程。&lt;/p&gt;
&lt;p&gt;函数 HookDesktopUIProcJob 用于挂钩桌面 UI 进程的作业，并在发现 UI 进程没有活动时退出。该函数首先检查是否存在活动的会话，如果存在则说明 UI 进程仍在运行，如果不存在则检测已经附加的 UI 进程数，如果大于 0，则说明 UI 进程仍在运行，如果等于 0，则检测所有进程中的 UI 进程数，如果大于 0，则说明 UI 进程仍在运行，否则退出。&lt;/p&gt;
&lt;p&gt;变量 uiProcNames 定义了 UI 进程的名称列表。函数 getAttachedUIProcCount 用于获取已经附加的 UI 进程数，函数 getUIProcCount 用于获取 UI 进程数。&lt;/p&gt;
&lt;h2 id=&#34;3449-rendergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3449-rendergo&#34;&gt;#&lt;/a&gt; [34/49] render.go&lt;/h2&gt;
&lt;p&gt;该文件为 SiYuan（思源笔记）中的一个 Go 语言源代码文件，包含多个函数用于渲染编辑器中的笔记内容。其中涉及到 Lute、ast、parse、html、render 等 Go 语言包，以及 SiYuan 自身定义的一些包和类型。具体函数如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;renderOutline 函数：渲染大纲面板，将指定的 ast.Node 转换成大纲字符串。&lt;/li&gt;
&lt;li&gt;renderBlockText 函数：将指定的 ast.Node 转换为一个字符串，该字符串包含了块中所有文本内容。&lt;/li&gt;
&lt;li&gt;renderBlockDOMByNodes 函数：将指定的多个 ast.Node 转换为 HTML 字符创，这些 ast.Node 可以是同一个文档中的不同块。&lt;/li&gt;
&lt;li&gt;renderBlockContentByNodes 函数：将指定的多个 ast.Node 转换为一个字符串，该字符串包含了这些 ast.Node 中所有文本内容。&lt;/li&gt;
&lt;li&gt;renderBlockMarkdownR 函数：在渲染指定 ID 对应的块时，将该块中的块引用和嵌入 SQL 查询转换为对应的 Markdown 字符串，以便明文存储和分享。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3549-repositorygo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3549-repositorygo&#34;&gt;#&lt;/a&gt; [35/49] repository.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 model 的子模块文件夹 model 中的 repository.go 文件，代码如下：&lt;/p&gt;
&lt;p&gt;函数代码包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OpenRepoSnapshotDoc；&lt;/li&gt;
&lt;li&gt;LeftRightDiff 和 DiffFile；&lt;/li&gt;
&lt;li&gt;parseTitleInSnapshot、parseTreeInSnapshot 和 buildSnapshots；&lt;/li&gt;
&lt;li&gt;ImportRepoKey 和 ResetRepo；&lt;/li&gt;
&lt;li&gt;InitRepoKeyFromPassphrase 和 InitRepoKey；&lt;/li&gt;
&lt;li&gt;CheckoutRepo。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该文件中定义了许多的子函数，包括存储快照、数据同步、快照恢复，同时还有其他一些与快照或数据同步相关的函数。&lt;/p&gt;
&lt;h2 id=&#34;3649-searchgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3649-searchgo&#34;&gt;#&lt;/a&gt; [36/49] search.go&lt;/h2&gt;
&lt;p&gt;本文介绍了程序文件  &lt;code&gt;search.go&lt;/code&gt;  的作用。该文件定义了搜索相关的功能函数，包括全文搜索、查询语法、SQL 以及正则表达式等方法。&lt;/p&gt;
&lt;p&gt;同时，还实现了嵌入块的搜索和替换功能，以及查找与引用块相关的块。本文件还包含处理块节点树的一些函数。&lt;/p&gt;
&lt;h2 id=&#34;3749-sessiongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3749-sessiongo&#34;&gt;#&lt;/a&gt; [37/49] session.go&lt;/h2&gt;
&lt;p&gt;该文件为 SiYuan（私远笔记）的认证授权模块，定义了包括登出、登录、验证码、接口访问授权等功能函数。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LoginAuth 函数为登录认证核心函数，对输入的验证码、认证码进行验证，若通过则将认证码写入 Session 并返回成功信息；&lt;/li&gt;
&lt;li&gt;LogoutAuth 函数为登出函数，从 Session 中移除 WorkspaceSession 信息；&lt;/li&gt;
&lt;li&gt;GetCaptcha 函数为生成验证码函数，生成验证码并将其存入 WorkspaceSession；&lt;/li&gt;
&lt;li&gt;CheckAuth 和 CheckReadonly 为接口访问授权和只读状态检查，分别需要登录认证和只读状态为 false 才可访问 API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数中还用到了第三方库 gin 和 steambap/captcha 等。&lt;/p&gt;
&lt;h2 id=&#34;3849-snippetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3849-snippetgo&#34;&gt;#&lt;/a&gt; [38/49] snippet.go&lt;/h2&gt;
&lt;p&gt;该程序文件实现了在思源笔记中加载、保存、删除代码片段的功能。其中，代码片段保存在 conf.json 文件中，并且实现了线程锁保证多个线程同时访问时的线程安全。&lt;/p&gt;
&lt;p&gt;程序使用了 gulu、Lute、filelock、logging 等库来实现文件读写、日志输出、锁机制等操作。本文件遵循 GNU Affero General Public License 许可证。&lt;/p&gt;
&lt;h2 id=&#34;3949-storagego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3949-storagego&#34;&gt;#&lt;/a&gt; [39/49] storage.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 SiYuan 笔记的模型模块的源代码。程序的主要作用是提供 SiYuan 笔记程序的模型方法，完成 SiYuan 笔记程序的搜索、文档编辑等功能。&lt;/p&gt;
&lt;p&gt;具体方法包括：管理最近文档、文档搜索条件筛选、本地存储、读取。方法实现中使用了 sync 包实现了对最近文档、搜索条件、本地存储的互斥锁，保证数据的线程安全。&lt;/p&gt;
&lt;h2 id=&#34;4049-syncgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4049-syncgo&#34;&gt;#&lt;/a&gt; [40/49] sync.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 sync.go，用于实现 SiYuan 的同步功能。程序实现了同步 SiYuan 笔记数据到云端和从云端同步数据到本地的功能，并提供了手动同步功能和自动同步功能。&lt;/p&gt;
&lt;p&gt;实现手动同步需要在 UI 上进行操作，而自动同步功能可定时同步或在打开软件时进行同步操作。同时该程序还实现了删除云同步目录、创建云同步目录、列表云同步目录等一些对同步功能的基本操作。&lt;/p&gt;
&lt;h2 id=&#34;4149-taggo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4149-taggo&#34;&gt;#&lt;/a&gt; [41/49] tag.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 tag.go，主要包含了标签相关的功能函数。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RemoveTag (): 删除标签功能函数，会将所有该标签相关的文档和块中的标签删除。&lt;/li&gt;
&lt;li&gt;RenameTag (): 重命名标签功能函数，会将所有该标签相关的文档和块中的标签修改为新标签名称。&lt;/li&gt;
&lt;li&gt;BuildTags (): 构建所有标签树，返回一个 *Tags 类型的指针，用来表示最外层的所有标签。&lt;/li&gt;
&lt;li&gt;SearchTags (): 根据传入的关键字搜索标签，返回符合关键字的标签名称。&lt;/li&gt;
&lt;li&gt;labelBlocksByKeyword (): 根据关键字搜索所有包含该关键字的文档块，提取其中包含的标签，返回一个 map 类型，键为标签名称，值为包含该标签的所有文档块。&lt;/li&gt;
&lt;li&gt;labelTags (): 提取所有存在的标签名称，返回一个 map 类型，键为标签名称，值为空的 []*Tag 类型。&lt;/li&gt;
&lt;li&gt;sortTags (): 对标签进行排序。&lt;/li&gt;
&lt;li&gt;appendTagChildren () 和 appendChildren0 (): 用来将所有标签按照层级关系组织成树形结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该程序文件主要实现了标签的增删改查等常见功能，并能够将所有标签组织成树形结构以方便用户查看和管理标签。&lt;/p&gt;
&lt;h2 id=&#34;4249-templatego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4249-templatego&#34;&gt;#&lt;/a&gt; [42/49] template.go&lt;/h2&gt;
&lt;p&gt;文件名为 template.go，该程序文件包含了处理模板相关的函数和方法。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RenderGoTemplate 函数用于渲染 Go 模板，&lt;/li&gt;
&lt;li&gt;RemoveTemplate 函数用于删除模板，&lt;/li&gt;
&lt;li&gt;SearchTemplate 函数用于搜索模板，&lt;/li&gt;
&lt;li&gt;DocSaveAsTemplate 函数用于将文档保存为模板，&lt;/li&gt;
&lt;li&gt;RenderTemplate 函数用于渲染模板，&lt;/li&gt;
&lt;li&gt;addBlockIALNodes 函数用于添加块级内联属性节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4349-transactiongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4349-transactiongo&#34;&gt;#&lt;/a&gt; [43/49] transaction.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的模块，包含了 SiYuan 笔记系统的事务处理相关功能。&lt;/p&gt;
&lt;p&gt;该模块主要负责实现 SiYuan 笔记系统中各种操作的事务处理，在每个操作执行之前，会将操作记录到队列中，随后统一进行事务提交。&lt;/p&gt;
&lt;p&gt;其中的  &lt;code&gt;FlushTxJob&lt;/code&gt;  函数用于触发事务提交任务，程序模块的主要函数包括  &lt;code&gt;PerformTransactions&lt;/code&gt;  、 &lt;code&gt;doMove&lt;/code&gt;  等一系列操作执行函数，这些函数主要用于操作的执行与相应的记录与撤销。此程序文件还包含了一些扩展功能的辅助函数，如函数  &lt;code&gt;IsFoldHeading&lt;/code&gt;  用于判断操作是否为对折叠标题的操作，函数  &lt;code&gt;waitforWritingFiles&lt;/code&gt;  用于等待文件写入操作完成等。&lt;/p&gt;
&lt;p&gt;总之，该程序文件是 SiYuan 笔记系统的事务处理核心模块。&lt;/p&gt;
&lt;h2 id=&#34;4449-treego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4449-treego&#34;&gt;#&lt;/a&gt; [44/49] tree.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的包 model，主要提供了加载笔记树内容、重置笔记树内容、对多个笔记进行分页等功能。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LoadTreeByID 函数可以通过笔记树的 ID 来加载笔记树内容，如果找不到笔记树则返回 ErrTreeNotFound 错误，如果正在进行索引则返回 ErrIndexing 错误；&lt;/li&gt;
&lt;li&gt;loadTreeByBlockID 函数可以通过文档块的 ID 来加载笔记树，如果未找到文档块则返回 ErrBlockNotFound 错误。&lt;/li&gt;
&lt;li&gt;resetTree 函数可以重置笔记树的一些属性，如标题和路径，并重置块 ID 和内部引用。&lt;/li&gt;
&lt;li&gt;pagedPaths 函数可以对指定路径下的多个笔记进行分页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4549-updatergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4549-updatergo&#34;&gt;#&lt;/a&gt; [45/49] updater.go&lt;/h2&gt;
&lt;p&gt;该文件名为 updater.go，位于 model 文件夹下。该程序主要实现了软件更新相关的功能，包括下载、安装、校验更新包等，实现了软件自动更新的功能。程序包含一些函数，主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;execNewVerInstallPkg：执行下载的新版本安装包进行安装。&lt;/li&gt;
&lt;li&gt;getNewVerInstallPkgPath：获取新版本安装包的路径。&lt;/li&gt;
&lt;li&gt;checkDownloadInstallPkg：检查下载的安装包并进行下载安装。&lt;/li&gt;
&lt;li&gt;getUpdatePkg：获取更新包的下载链接和 checksum 值。&lt;/li&gt;
&lt;li&gt;downloadInstallPkg：下载并保存更新包。&lt;/li&gt;
&lt;li&gt;sha256Hash：计算文件的 checksum 值。&lt;/li&gt;
&lt;li&gt;Announcement 结构体：包含更新通知的 id、title 和 url 属性。&lt;/li&gt;
&lt;li&gt;GetAnnouncements：获取更新通知。&lt;/li&gt;
&lt;li&gt;CheckUpdate：检查更新并进行提示。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4649-uploadgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4649-uploadgo&#34;&gt;#&lt;/a&gt; [46/49] upload.go&lt;/h2&gt;
&lt;p&gt;该文件名为 upload.go，是一个 Go 语言的程序文件。该文件主要分为两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数 InsertLocalAssets&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该函数的作用是将本地 assets 插入到该节点对应的目录下。函数的输入参数包括 id、assetPaths、isUpload。其中 id 代表节点 id，assetPaths 代表本地的 assets 路径，isUpload 代表是否是一个文件上传。该函数的输出参数包括 succMap，表示本次上传成功的文件列表，以及错误 err。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;函数 Upload&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该函数的作用是上传文件。同时，如果有 id 参数，该函数将上传文件存储到该节点的目录下。如果没有 id 参数，则直接将文件存储到默认的 assets 目录下。该函数的输入参数包括 gin.Context 实例 c。该函数的输出参数包括 ret，表示该次上传的结果。&lt;/p&gt;
&lt;h2 id=&#34;4749-virutalrefgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4749-virutalrefgo&#34;&gt;#&lt;/a&gt; [47/49] virutalref.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 SiYuan 文档编辑器中的模块，主要实现了处理虚拟引用的相关功能。具体包含以下功能模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getBlockVirtualRefKeywords：获取块与虚拟引用有关的关键字，用于改进打开虚拟引用后加载文档的性能。&lt;/li&gt;
&lt;li&gt;putBlockVirtualRefKeywords：将虚拟引用关键字与块 ID 绑定，缓存到 virtualBlockRefCache 中。&lt;/li&gt;
&lt;li&gt;CacheVirtualBlockRefJob：缓存虚拟引用关键字到 virtualBlockRefCache 中，用于 globalSearch 中对虚拟引用的搜索。&lt;/li&gt;
&lt;li&gt;ResetVirtualBlockRefCache：清除 virtualBlockRefCache 中的缓存并重新缓存虚拟引用关键字。&lt;/li&gt;
&lt;li&gt;processVirtualRef：处理虚拟引用，将虚拟引用标记为可以替换的位置，并在需要的时候将其替换为实际的内容。&lt;/li&gt;
&lt;li&gt;getVirtualRefKeywords：获取虚拟引用的关键字，用于在 globalSearch 中对虚拟引用的搜索。&lt;/li&gt;
&lt;li&gt;prepareMarkKeywords：将给定的关键字列表进行去重、排序、标记处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，该程序文件是 SiYuan 文档编辑器中虚拟引用功能的一个实现，通过缓存与预处理等优化手段，提升了虚拟引用功能的性能表现。&lt;/p&gt;
&lt;h2 id=&#34;4849-widgetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4849-widgetgo&#34;&gt;#&lt;/a&gt; [48/49] widget.go&lt;/h2&gt;
&lt;p&gt;该文件名是  &lt;code&gt;widget.go&lt;/code&gt; ，属于  &lt;code&gt;model&lt;/code&gt;  包，里面定义了一个  &lt;code&gt;SearchWidget&lt;/code&gt;  函数，用于搜索 widget 相关信息。&lt;/p&gt;
&lt;p&gt;该函数接收一个  &lt;code&gt;keyword&lt;/code&gt;  字符串作为参数，返回一个  &lt;code&gt;Block&lt;/code&gt;  类型的切片。函数首先通过  &lt;code&gt;filepath.Join&lt;/code&gt;  函数获取到 widget 目录的路径，然后通过  &lt;code&gt;os.ReadDir&lt;/code&gt;  函数读取该目录下的所有文件和目录。接下来循环遍历所有的条目，如果该条目不是目录，则跳过，否则遍历该目录下的所有条目，如果不是目录且名称为  &lt;code&gt;widget.json&lt;/code&gt; ，则将  &lt;code&gt;isWidgetDir&lt;/code&gt;  设为  &lt;code&gt;true&lt;/code&gt; ，表明该目录为 widget 目录。&lt;/p&gt;
&lt;p&gt;然后将该目录名转为小写，并判断是否包含关键字，如果包含，则创建一个新的  &lt;code&gt;Block&lt;/code&gt;  对象，将该目录名作为  &lt;code&gt;Content&lt;/code&gt;  属性值，并加入到返回的切片中。最后返回所有匹配的  &lt;code&gt;Block&lt;/code&gt;  切片。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T13:28:36.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-6/</id>
        <title>思源笔记源码解析之kernel篇（九）mobile</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-6/"/>
        <content type="html">&lt;h2 id=&#34;01-kernelgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#01-kernelgo&#34;&gt;#&lt;/a&gt; [0/1] kernel.go&lt;/h2&gt;
&lt;p&gt;该文件是 mobile 工程的一部分，主要涉及启动 kernel 和相关的一些操作。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import 了一些库和包，包括了 kernel/cache、kernel/job、kernel/model、kernel/server、kernel/sql 和 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dvbGFuZy5vcmcveC9tb2JpbGUvYmluZCVFMyU4MCU4Mg==&#34;&gt;golang.org/x/mobile/bind。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;定义了两个函数 StartKernelFast 和 StartKernel，前者不做任何操作，后者是启动 kernel 的入口。&lt;/li&gt;
&lt;li&gt;实现了一些辅助函数。&lt;/li&gt;
&lt;li&gt;Language 接受一个整数，返回对应的语言字符串。&lt;/li&gt;
&lt;li&gt;ShowMsg 推送一个消息。&lt;/li&gt;
&lt;li&gt;IsHttpServing 返回是否正在提供 HTTP 服务。&lt;/li&gt;
&lt;li&gt;SetTimezone 设置时间区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释中还提到了该程序基于 GNU Affero General Public License 发布。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T12:02:50.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-5/</id>
        <title>思源笔记源码解析之kernel篇（八）job</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-5/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名或函数名&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cron.go&lt;/td&gt;
&lt;td&gt;实现定时任务的启动和执行功能，启动多个协程去执行不同的定时任务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;01-crongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#01-crongo&#34;&gt;#&lt;/a&gt; [0/1] cron.go&lt;/h2&gt;
&lt;p&gt;这个程序文件是 job 包中的 cron.go，它是一个定时任务的启动文件。主要实现了 StartCron 函数和 every 函数。&lt;/p&gt;
&lt;p&gt;StartCron 函数用来创建多个协程去执行不同的定时任务，其中每个任务的执行时间间隔都不同。每个定时任务的具体内容可以在函数名后面的注释中找到。&lt;/p&gt;
&lt;p&gt;every 函数用来执行给定函数 f，并在执行完后等待一定时间间隔，然后再次执行。该程序依赖于其他包中的模块和工具函数，其中包括模型、SQL、任务和树节点等。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T11:51:58.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-4/</id>
        <title>思源笔记源码解析之kernel篇（七）filesys</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-4/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;h3 id=&#34;程序整体功能和构架概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序整体功能和构架概述&#34;&gt;#&lt;/a&gt; 程序整体功能和构架概述&lt;/h3&gt;
&lt;p&gt;该程序为一个文件系统模块，提供了文件树的结构和相关操作，主要包括两个子模块：文件树模块和 JSON 解析模块。&lt;/p&gt;
&lt;p&gt;文件树模块包括  &lt;code&gt;tree.go ​&lt;/code&gt; ，提供了文件树的加载、存储以及一些辅助函数，通过读写磁盘、解析 JSON 数据等方式来构建和维护文件树的结构和属性。&lt;/p&gt;
&lt;p&gt;JSON 解析模块包括  &lt;code&gt;json_parser.go ​&lt;/code&gt; ，提供了将 JSON 解析成  &lt;code&gt;parse.Tree&lt;/code&gt;  数据结构的功能，同时能处理一些历史数据并做修正。&lt;/p&gt;
&lt;h3 id=&#34;模块功能概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块功能概述&#34;&gt;#&lt;/a&gt; 模块功能概述&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块名称&lt;/th&gt;
&lt;th&gt;文件路径&lt;/th&gt;
&lt;th&gt;模块功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件树模块&lt;/td&gt;
&lt;td&gt;filesys\tree.go&lt;/td&gt;
&lt;td&gt;提供文件树的加载、存储以及一些辅助函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSON 解析模块&lt;/td&gt;
&lt;td&gt;filesys\json_parser.go&lt;/td&gt;
&lt;td&gt;提供将 JSON 解析成 parse.Tree 数据结构的功能，同时能处理一些历史数据并做修正。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：parse.Tree 是一个内部数据结构，表示 Markdown 的语法树。&lt;/p&gt;
&lt;h2 id=&#34;02-json_parsergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#02-json_parsergo&#34;&gt;#&lt;/a&gt; [0/2] json_parser.go&lt;/h2&gt;
&lt;p&gt;该文件是一个与 JSON 相关的解析器，主要提供了两个函数  &lt;code&gt;ParseJSONWithoutFix&lt;/code&gt;  和  &lt;code&gt;ParseJSON&lt;/code&gt;  ，用于将 JSON 解析成 parse.Tree 数据结构，其中  &lt;code&gt;ParseJSON&lt;/code&gt;  函数还能解析一些历史数据并做修正。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ParseJSONWithoutFix&lt;/code&gt;  函数接收 JSON 字符串  &lt;code&gt;jsonData&lt;/code&gt;  和解析选项  &lt;code&gt;options&lt;/code&gt; ，使用  &lt;code&gt;goccy/go-json&lt;/code&gt;  的库将 JSON 转成  &lt;code&gt;ast.Node&lt;/code&gt; ，随后递归遍历  &lt;code&gt;ast.Node&lt;/code&gt;  构建  &lt;code&gt;parse.Tree&lt;/code&gt; 。该函数不做历史数据修正。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ParseJSON&lt;/code&gt;  函数的功能基本与  &lt;code&gt;ParseJSONWithoutFix&lt;/code&gt;  相同，只是多了一些历史数据修正的功能。对于某些历史数据，该函数将对一些不规范的格式和空内容的节点做修正，同时如果发现数据版本是小于 1.5.0 的，会标记需要将数据迁移至版本 1.5.0 及以上才能正常解析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了以上两个函数外，还提供了  &lt;code&gt;genTreeByJSON&lt;/code&gt;  和  &lt;code&gt;fixLegacyData&lt;/code&gt;  两个辅助函数。其中  &lt;code&gt;genTreeByJSON&lt;/code&gt;  函数实现了递归遍历  &lt;code&gt;ast.Node&lt;/code&gt;  后生成  &lt;code&gt;parse.Tree&lt;/code&gt;  的过程，同时在递归的过程中如果遇到需要修正的节点，则委托  &lt;code&gt;fixLegacyData&lt;/code&gt;  函数处理该节点。而  &lt;code&gt;fixLegacyData&lt;/code&gt;  则是一个历史数据修正的函数，主要处理块的 ID、块尾软换行、空列表、空引述、空公式等问题。&lt;/p&gt;
&lt;h2 id=&#34;12-treego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-treego&#34;&gt;#&lt;/a&gt; [1/2] tree.go&lt;/h2&gt;
&lt;p&gt;该程序文件为文件系统模块的一个子模块，主要实现了文件树的加载、存储以及一些辅助函数。函数主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadTree&lt;/code&gt; ：从指定路径加载文件树。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoadTreeByData&lt;/code&gt; ：从数据中加载文件树。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WriteTreeWithoutChangeTime&lt;/code&gt;  和  &lt;code&gt;WriteTree&lt;/code&gt; ：将文件树数据写入磁盘。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prepareWriteTree&lt;/code&gt; ：准备将文件树写入磁盘前的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;afterWriteTree&lt;/code&gt; ：文件树写入磁盘后更新缓存的相关操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parseJSON2Tree&lt;/code&gt; ：将 JSON 数据解析为文件树的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadDocIAL&lt;/code&gt; ：读取文件中的属性集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该程序文件主要是文件树模块中的核心操作，它们通过读写磁盘、解析 JSON 数据等方式来构建和维护文件树的结构和属性。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T11:47:12.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-3/</id>
        <title>思源笔记源码解析之kernel篇（六）conf</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-3/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;该程序是一个开源的笔记应用，可以允许用户创建、编辑和存储笔记。程序主要分为以下几个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;界面：提供了一种用户友好的界面，允许用户浏览笔记和进行一些操作。&lt;/li&gt;
&lt;li&gt;后端：维护笔记和标签的数据，并提供数据更新和存储的功能。&lt;/li&gt;
&lt;li&gt;云同步：将笔记存储到云端，实现笔记的同步和备份，同时可以允许多个设备之间的数据访问和共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下表列出了每个程序文件及其对程序功能的贡献：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account.go&lt;/td&gt;
&lt;td&gt;用户账户的设置及管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ai.go&lt;/td&gt;
&lt;td&gt;AI 平台数据访问响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api.go&lt;/td&gt;
&lt;td&gt;网络请求响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appearance.go&lt;/td&gt;
&lt;td&gt;界面的外表设置及管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;box.go&lt;/td&gt;
&lt;td&gt;“FileTree” 的设置，其中包括笔记数据的组织结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;editor.go&lt;/td&gt;
&lt;td&gt;笔记的编辑器设置，用于创建、编辑、格式化和保存笔记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export.go&lt;/td&gt;
&lt;td&gt;笔记导出的设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filetree.go&lt;/td&gt;
&lt;td&gt;“FileTree” 的实现，包括笔记和标签列表的管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flashcard.go&lt;/td&gt;
&lt;td&gt;用于设置和管理闪存卡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graph.go&lt;/td&gt;
&lt;td&gt;功能图的设置与管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lang.go&lt;/td&gt;
&lt;td&gt;语言设置和管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;layout.go&lt;/td&gt;
&lt;td&gt;界面布局的设置和管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repo.go&lt;/td&gt;
&lt;td&gt;仓库路径的设置和管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.go&lt;/td&gt;
&lt;td&gt;搜索功能及搜索结果显示设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;snippet.go&lt;/td&gt;
&lt;td&gt;快捷方式的设置和管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stat.go&lt;/td&gt;
&lt;td&gt;统计功能的设置和管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync.go&lt;/td&gt;
&lt;td&gt;笔记同步的设置、管理和实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system.go&lt;/td&gt;
&lt;td&gt;系统设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag.go&lt;/td&gt;
&lt;td&gt;标签的设置及管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;user.go&lt;/td&gt;
&lt;td&gt;用户账户管理相关功能的实现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总体而言，这些程序文件的功能都是为了组成一个完整的笔记应用。它们负责不同的功能，通过互相协作实现最终的目标：提供一个高效、可靠的笔记应用程序。&lt;/p&gt;
&lt;h2 id=&#34;020-accountgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#020-accountgo&#34;&gt;#&lt;/a&gt; [0/20] account.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 工程中的配置文件 account.go，主要定义了一个结构体 Account 和一个 NewAccount 函数。Account 结构体中包含了两个布尔类型的属性：DisplayTitle 和 DisplayVIP，并且使用 json 标签来指定了它们在 json 格式中的名字。NewAccount 函数用于创建一个新的 Account 结构体，并初始化其中的属性值。&lt;/p&gt;
&lt;h2 id=&#34;120-aigo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#120-aigo&#34;&gt;#&lt;/a&gt; [1/20] ai.go&lt;/h2&gt;
&lt;p&gt;该文件名是 ai.go，代表着这是一个 Go 语言程序文件。该程序中定义了两个结构体类型 AI 和 OpenAI。结构体类型 OpenAI 里定义了若干字段，用于保存与 OpenAI 接口相关的参数。函数 NewAI 返回了一个指向 AI 结构体的指针，其中包含一个指向 OpenAI 结构体的指针，并从环境变量中读取用于与 OpenAI 平台交互的相关数据的值。同时，该程序遵循 GNU Affero 通用公共许可证协议。&lt;/p&gt;
&lt;h2 id=&#34;220-apigo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#220-apigo&#34;&gt;#&lt;/a&gt; [2/20] api.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 api.go，它实现了一个名为 API 的结构体和 NewAPI () 函数。结构体 API 包含一个字符串类型的 Token 字段，表示一个 API 的访问令牌。NewAPI () 函数返回一个 API 类型的指针，该函数会生成 16 位随机字符串并将其赋值给 API 的 Token 字段。该程序文件截取自一个名为 SiYuan 的开源项目，它是一个数字花园构建工具并使用 GNU Affero General Public License 许可证。&lt;/p&gt;
&lt;h2 id=&#34;320-appearancego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#320-appearancego&#34;&gt;#&lt;/a&gt; [3/20] appearance.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 conf 目录下的一个名为 appearance.go 的 Go 语言源代码文件。&lt;/p&gt;
&lt;p&gt;该文件定义了一个名为 Appearance 的结构体，该结构体包含多个属性字段，用于表示 SiYuan 笔记软件中的用户界面外观设置，例如黑暗模式、主题、图标、代码块主题等。其中还有一些附加属性，如界面语言、自定义 CSS 等。&lt;/p&gt;
&lt;p&gt;代码的最后定义了一个名为 NewAppearance 的函数，用于创建一个新的 Appearance 结构体实例。默认情况下，所有属性字段都有默认值。&lt;/p&gt;
&lt;p&gt;该文件还包含了 GNU Affero 通用公共许可证的版权声明和许可条款。&lt;/p&gt;
&lt;h2 id=&#34;420-boxgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#420-boxgo&#34;&gt;#&lt;/a&gt; [4/20] box.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 “box.go”，归属于 “conf” 软件包。程序代码定义了一个 “BoxConf” 类型，该类型维护了 “.siyuan/conf.json” 笔记本配置的各种参数，例如笔记本名称、排序方式、图标等。该程序文件还定义了一个 “NewBoxConf ()” 函数，用于初始化配置参数，设置默认值。该程序文件依赖于 “util” 软件包，并使用了该软件包中的 “SortModeFileTree” 变量。程序代码还包括一些注释信息，介绍了该程序的版权及开源协议信息。&lt;/p&gt;
&lt;h2 id=&#34;520-editorgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#520-editorgo&#34;&gt;#&lt;/a&gt; [5/20] editor.go&lt;/h2&gt;
&lt;p&gt;该程序文件为一个 Go 语言程序的配置文件 editor.go，主要定义了一个名为 Editor 的 struct 类型，包括了编辑器的各种配置参数，如字体大小、字体、代码块是否显示行号、代码块中 Tab 转换空格数等。同时，该文件还定义了一个名为 NewEditor 的函数，返回一个 Editor 类型的指针，用来初始化一个编辑器实例。&lt;/p&gt;
&lt;h2 id=&#34;620-exportgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#620-exportgo&#34;&gt;#&lt;/a&gt; [6/20] export.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言编写的程序文件，文件名为 export.go，属于 conf 包。该文件定义了一个 Export 结构体及其构造函数 NewExport ()，其中 Export 结构体包含了文档导出时的一些设置选项，如段落开头的空格、是否添加标题、内容块引用导出模式等等。同时，该文件还定义了 Export 结构体的默认值，其中大部分设置都是使用默认值。这些设置可以通过导出的功能进行修改。&lt;/p&gt;
&lt;h2 id=&#34;720-filetreego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#720-filetreego&#34;&gt;#&lt;/a&gt; [7/20] filetree.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 filetree.go，其代码定义了一个名为 FileTree 的结构体类型，并声明了与该结构相关的变量和函数。所该结构体的字段具有不同的类型，包括 bool，string 和 int 等，而且它们的含义是关于文档管理器的一些布尔值或设置，例如是否总是在打开的文件中自动选择，是否在当前页签打开文件，打开文件时列出的最大数量等。此外，该程序文件中包含了一个名为 NewFileTree 的函数，该函数返回一个新的 FileTree 结构体，并将其字段初始化为预定义的值。&lt;/p&gt;
&lt;h2 id=&#34;820-flashcardgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#820-flashcardgo&#34;&gt;#&lt;/a&gt; [8/20] flashcard.go&lt;/h2&gt;
&lt;p&gt;该文件名为 flashcard.go，它实现了一个名为 Flashcard 的结构体以及一个名为 NewFlashcard () 的函数。&lt;/p&gt;
&lt;p&gt;Flashcard 结构体定义了以下五个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NewCardLimit：新卡的上限&lt;/li&gt;
&lt;li&gt;ReviewCardLimit：复习卡的上限&lt;/li&gt;
&lt;li&gt;Mark：标记制卡的启用状态&lt;/li&gt;
&lt;li&gt;List：列表块制卡的启用状态&lt;/li&gt;
&lt;li&gt;SuperBlock：超级块制卡的启用状态&lt;/li&gt;
&lt;li&gt;Deck：卡包制卡的启用状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NewFlashcard () 函数返回一个指向 Flashcard 结构体的指针，其中指定了每个字段的初始值。&lt;/p&gt;
&lt;h2 id=&#34;920-graphgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#920-graphgo&#34;&gt;#&lt;/a&gt; [9/20] graph.go&lt;/h2&gt;
&lt;p&gt;该程序文件为 Go 语言编写的一个配置文件，用于设置图形显示参数。其中，定义了 Graph、LocalGraph 和 GlobalGraph 三个结构体用于区分不同的图形参数，如局部图、全局图等。同时，也定义了 TypeFilter 和 D3 两个结构体用于设置图形显示的具体参数，如节点大小、连线粗细等。 该程序文件包含了构造函数 NewGraph、NewLocalGraph 和 NewGlobalGraph 以及 newD3 函数，用于生成各结构体的实例。同时，还定义了一些不同参数的默认值。&lt;/p&gt;
&lt;h2 id=&#34;1020-langgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1020-langgo&#34;&gt;#&lt;/a&gt; [10/20] lang.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为  &lt;code&gt;lang.go&lt;/code&gt; ，属于  &lt;code&gt;conf&lt;/code&gt;  包下的一个 Go 程序文件。这个文件定义了一个名为  &lt;code&gt;Lang&lt;/code&gt;  的结构体类型，该结构体包括两个字段： &lt;code&gt;Label&lt;/code&gt;  和  &lt;code&gt;Name&lt;/code&gt; ，分别表示语言的名称和标签。同时，该结构体还包含了对应的 JSON 字段标签。该程序文件没有导入任何包。也提供了版权声明和 GNU Affero 通用公共许可证文件注释。&lt;/p&gt;
&lt;h2 id=&#34;1120-layoutgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1120-layoutgo&#34;&gt;#&lt;/a&gt; [11/20] layout.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 layout.go，位于 conf 文件夹下，实现了两个类型定义：UILayout 和 Keymap。UILayout 是一个由字符串作为键，任何值作为值的映射类型，用于描述用户界面的布局。Keymap 是一个由字符串作为键，任何值作为值的映射类型，用于描述键盘快捷键的映射。这些类型定义可能会被程序的其他部分引用并使用。该程序还包含了版权声明和 GNU Affero General Public License 许可证。&lt;/p&gt;
&lt;h2 id=&#34;1220-repogo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1220-repogo&#34;&gt;#&lt;/a&gt; [12/20] Repo.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 conf 目录下的 Repo.go 文件。该文件定义了一个名为 “Repo” 的结构体，包含一个 byte 类型的 “Key” 属性，用于存储 AES 密钥。此外，该文件还定义了一个 “NewRepo” 函数，用于创建新的 “Repo” 实例。还有一个名为 “GetSaveDir” 的函数，用于返回保存仓库的路径，该路径由 “WorkspaceDir” 和 “repo” 目录组成。&lt;/p&gt;
&lt;h2 id=&#34;1320-searchgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1320-searchgo&#34;&gt;#&lt;/a&gt; [13/20] search.go&lt;/h2&gt;
&lt;p&gt;该文件是一段用 Go 语言编写的程序代码，命名为 &amp;quot;search.go&amp;quot;，属于 &amp;quot;conf&amp;quot; 路径下的文件。该程序声明了一个名为 &amp;quot;Search&amp;quot; 的结构体，该结构体定义了一些搜索相关的属性和方法。它包括类型筛选器、名称、别名、简介和指向外部文档的虚拟参考、回链注名、别名、锚点和文档等。还定义了 NAMFilter 方法用于在名称、别名和简介中过滤关键字，并返回匹配结果，以及 TypeFilter 方法用于通过所选类型筛选器来过滤匹配结果。该程序还包含一个 NewSearch 函数，该函数返回一个默认的 Search 结构体。&lt;/p&gt;
&lt;h2 id=&#34;1420-snippetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1420-snippetgo&#34;&gt;#&lt;/a&gt; [14/20] snippet.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 snippet.go，属于 conf 包下的。程序定义了 Snippet 结构体，包含一些 Snippet 实例变量。Snippet 结构体的实例变量包括 ID、Name、Memo、Type、Enabled 和 Content。其中，ID、Name、Memo、Type、Enabled 都是字符串类型，Content 是 Snippet 内容。这个程序文件可能在一个项目中被调用，提供配置信息的存储和读取等功能。&lt;/p&gt;
&lt;h2 id=&#34;1520-statgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1520-statgo&#34;&gt;#&lt;/a&gt; [15/20] stat.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言的代码文件，文件名为 stat.go，位于 conf 文件夹下，是与配置相关的统计信息结构体定义文件。它定义了 Stat 结构体类型，包含了数目、大小等统计信息的属性，有一个方法 NewStat () 返回一个指向该结构体类型的指针。此外，文件开头有版权声明和使用 GNU Affero 通用公共许可协议的声明。&lt;/p&gt;
&lt;h2 id=&#34;1620-syncgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1620-syncgo&#34;&gt;#&lt;/a&gt; [16/20] sync.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 conf 目录下的 sync.go 文件。该文件定义了两个结构体：Sync 和两个 Sync 结构体的内嵌结构体 ——S3 和 WebDAV。其中，Sync 结构体是同步配置相关的结构体，包括云端同步目录名称、是否开启同步、同步模式等信息；S3 结构体是存储于 S3 对象存储服务相关的信息；WebDAV 结构体则是存储于 WebDAV 服务相关的信息。该程序文件中还定义了一些常量和函数，例如：ProviderSiYuan、ProviderS3、ProviderWebDAV，以及 NewSyncProviderCheckURL () 函数等。&lt;/p&gt;
&lt;h2 id=&#34;1720-systemgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1720-systemgo&#34;&gt;#&lt;/a&gt; [17/20] system.go&lt;/h2&gt;
&lt;p&gt;该程序文件名称为 system.go，位于 conf 文件夹下。该程序定义了一个 System 结构体和一个 NetworkProxy 结构体。System 结构体包含了 SiYuan 系统的各种属性，包括 ID、内核版本、操作系统、容器、文件夹路径等，还包括一些功能属性，如是否启用网络服务、是否上传错误日志等。NetworkProxy 结构体用于表示网络代理的信息，其中包括协议、主机和端口号。程序还提供了一个 NewSystem () 函数，用于向外部提供一个新的 System 结构体实例。&lt;/p&gt;
&lt;h2 id=&#34;1820-taggo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1820-taggo&#34;&gt;#&lt;/a&gt; [18/20] tag.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 软件中的配置文件之一，文件名为 tag.go。程序定义了一个名为 Tag 的结构体，该结构体包含一个名为 Sort 的属性，表示排序方式，并通过 json 标签将其序列化为 JSON 格式。 NewTag 函数返回一个新的初始化 Tag 结构体的指针。程序使用了 SiYuan 软件内部的 util 包中的 SortModeAlphanumASC 常量来表示标签排序方式。程序中还包含 GNU Affero 通用公共许可证的授权声明。&lt;/p&gt;
&lt;h2 id=&#34;1920-usergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1920-usergo&#34;&gt;#&lt;/a&gt; [19/20] user.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言程序文件，文件名为 “user.go”，定义了一个 “User” 结构体以及一个 “UserTitle” 结构体。&lt;/p&gt;
&lt;p&gt;“User” 结构体包括了用户的各种信息，如 “userId”、“userName”、“userAvatarURL” 等，其中部分字段为浮点数类型。&lt;/p&gt;
&lt;p&gt;“UserTitle” 结构体包括了用户称号的相关信息，如名称 “name”、“描述”、“图标” 等。&lt;/p&gt;
&lt;p&gt;此外，“User” 结构体还定义了一个名为 “GetCloudRepoAvailableSize” 的方法，返回用户云端仓库可用空间大小。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T11:45:07.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406-2/</id>
        <title>思源笔记源码解析之kernel篇（五）cmd</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406-2/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;该程序是一个使用 Go 语言编写的命令行交互式程序，提供了多个命令以供用户使用。程序使用 WebSocket 技术实现了网络通信，用户可以通过命令行界面将自己的消息发送给服务器，服务器会将消息发送到其他在线用户上。同时，程序还实现了一个简单的聊天机器人，用户可以通过命令行向聊天机器人提问，机器人会给出相应的回答。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以通过 WebSockets 建立客户端与服务器之间的通信；&lt;/li&gt;
&lt;li&gt;可以指定频道进行聊天，同时可以传输图片；&lt;/li&gt;
&lt;li&gt;提供了命令行界面对服务器进行操作，例如关闭某个用户的 WebSocket 连接、查询服务器性能数据等；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;程序整体架构如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kernel&lt;/code&gt; ：该包提供了一些 WebSocket 与协程相关的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; ：该包提供了一些具体的数据结构&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chat&lt;/code&gt; ：该包提供了聊天机器人的具体实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; ：该包提供命令行命令的处理及具体实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; ：该包提供程序的启动入口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该程序主要由以下几个文件构成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名称&lt;/th&gt;
&lt;th&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;closews.go&lt;/td&gt;
&lt;td&gt;关闭 WebSocket 连接的命令文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cmd.go&lt;/td&gt;
&lt;td&gt;命令行工具包文件，包括命令行接口的定义和各个命令的实现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;02-closewsgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#02-closewsgo&#34;&gt;#&lt;/a&gt; [0/2] closews.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Golang 语言编写的命令行程序文件，文件名为 closews.go。该文件是整个工程中的一个子模块，属于 cmd 包中的一部分。该文件定义了一个 closews 结构体类型，其中包含三个方法：Exec ()、Name () 和 IsRead ()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exec () 方法通过获取当前会话的 ID 值，并调用封装在 kernel/util 模块中的 ClosePushChan () 函数来关闭指定用户的 WebSocket 连接。同时，该方法调用了该结构体类型的 Push () 方法来进行消息推送。&lt;/li&gt;
&lt;li&gt;Name () 方法返回一个字符串 “closews”，表示该命令的名称为 “closews”。&lt;/li&gt;
&lt;li&gt;IsRead () 方法返回一个布尔值 true，表示该命令是一个只读命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-cmdgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-cmdgo&#34;&gt;#&lt;/a&gt; [1/2] cmd.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言编写的程序文件，主要包括以下几个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;版权声明和许可证，表示该程序使用 GNU Affero General Public License 作为许可证；&lt;/li&gt;
&lt;li&gt;引用了两个第三方库： &lt;code&gt;github.com/olahol/melody&lt;/code&gt;  和  &lt;code&gt;github.com/siyuan-note/logging&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;定义了一个  &lt;code&gt;Cmd&lt;/code&gt;  接口及其方法， &lt;code&gt;Cmd&lt;/code&gt;  是一个命令的抽象接口；&lt;/li&gt;
&lt;li&gt;定义了一个  &lt;code&gt;BaseCmd&lt;/code&gt;  结构体及其方法， &lt;code&gt;BaseCmd&lt;/code&gt;  实现了  &lt;code&gt;Cmd&lt;/code&gt;  接口，包括执行命令和推送命令结果等方法；&lt;/li&gt;
&lt;li&gt;定义了一个函数  &lt;code&gt;NewCommand&lt;/code&gt; ，该函数根据传入的命令字符串、命令 ID、参数和会话信息创建一个对应的  &lt;code&gt;Cmd&lt;/code&gt;  对象，并初始化  &lt;code&gt;PushPayload&lt;/code&gt;  属性；&lt;/li&gt;
&lt;li&gt;定义了一个函数  &lt;code&gt;Exec&lt;/code&gt; ，该函数接收一个  &lt;code&gt;Cmd&lt;/code&gt;  对象，用 goroutine 异步执行命令。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T11:09:38.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230406/</id>
        <title>思源笔记源码解析之kernel篇（四）cache</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230406/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;h3 id=&#34;程序概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序概述&#34;&gt;#&lt;/a&gt; 程序概述&lt;/h3&gt;
&lt;p&gt;该程序是一个缓存工具，用于加速数据文件读取，具体实现中使用了 Golang ristretto 缓存库。主要功能是加载所有的数据文件，并将文件信息存入到缓存中，方便快速查找和读取。&lt;/p&gt;
&lt;h3 id=&#34;程序构架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序构架&#34;&gt;#&lt;/a&gt; 程序构架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据文件加载：通过  &lt;code&gt;LoadAssets()&lt;/code&gt;  函数，读取项目中所有的数据文件，提取文件路径和文件信息，并将其存入到  &lt;code&gt;assetsCache&lt;/code&gt;  中；&lt;/li&gt;
&lt;li&gt;缓存操作：通过定义的  &lt;code&gt;docIALCache&lt;/code&gt;  和  &lt;code&gt;blockIALCache&lt;/code&gt;  两个缓存变量，实现缓存数据的快速读取、修改、删除等操作；&lt;/li&gt;
&lt;li&gt;互斥锁保护：由于多个协程可能同时访问缓存，需要使用  &lt;code&gt;assetsLock&lt;/code&gt;  互斥锁来保护并发读写的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件功能&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;asset.go&lt;/td&gt;
&lt;td&gt;实现对所有数据文件的缓存处理，以便快速地获取和查询数据文件的信息和所在路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ial.go&lt;/td&gt;
&lt;td&gt;定义了两个缓存变量：docIALCache 和 blockIALCache，用于缓存文档和块的 IAL（内部属性列表），提供了增删改查等公共方法供缓存操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;02-assetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#02-assetgo&#34;&gt;#&lt;/a&gt; [0/2] asset.go&lt;/h2&gt;
&lt;p&gt;该文件是  &lt;code&gt;siyuan-note&lt;/code&gt;  项目中的缓存处理相关的代码文件  &lt;code&gt;asset.go&lt;/code&gt; ，包含以下主要功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义了一个  &lt;code&gt;Asset&lt;/code&gt;  的结构体，用于表示文件的相关信息；&lt;/li&gt;
&lt;li&gt;定义了一个名为  &lt;code&gt;assetsCache&lt;/code&gt;  的全局变量用于保存所有的  &lt;code&gt;Asset&lt;/code&gt;  对象；&lt;/li&gt;
&lt;li&gt;定义了名为  &lt;code&gt;assetsLock&lt;/code&gt;  的互斥锁，用于保证多协程安全的访问；&lt;/li&gt;
&lt;li&gt;实现了  &lt;code&gt;GetAssets()&lt;/code&gt;  函数用于返回缓存中所有  &lt;code&gt;Asset&lt;/code&gt;  对象；&lt;/li&gt;
&lt;li&gt;实现了  &lt;code&gt;RemoveAsset()&lt;/code&gt;  函数用于移除缓存中指定的  &lt;code&gt;Asset&lt;/code&gt;  对象；&lt;/li&gt;
&lt;li&gt;实现了  &lt;code&gt;LoadAssets()&lt;/code&gt;  函数用于加载所有项目中的数据文件，并将文件的相关信息存入到  &lt;code&gt;assetsCache&lt;/code&gt;  中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该文件的主要作用是实现对所有数据文件的缓存处理，以便快速地获取和查询数据文件的信息和所在路径。&lt;/p&gt;
&lt;h2 id=&#34;12-ialgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-ialgo&#34;&gt;#&lt;/a&gt; [1/2] ial.go&lt;/h2&gt;
&lt;p&gt;此文件为 Golang 编写的 “缓存” 程序包中的一个文件，文件名为 ial.go。其中定义了两个缓存变量：docIALCache 和 blockIALCache，用于缓存文档和块的 IAL（内部属性列表）。&lt;/p&gt;
&lt;p&gt;此文件定义了以下公共方法：PutDocIAL、GetDocIAL、RemoveDocIAL、ClearDocsIAL、PutBlockIAL、GetBlockIAL 和 RemoveBlockIAL，用于操作这些缓存。&lt;/p&gt;
&lt;p&gt;在具体实现中，使用了 ristretto 缓存库。此程序在 GNU Affero 通用公共许可证下发布，用于构建一个数字园。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-06T11:02:57.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230404/</id>
        <title>思源笔记源码解析之kernel篇（三）bazaar</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230404/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序概括：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该程序实现了思源笔记的插件化扩展功能，其中主要包括图标包、主题包、模板包、Widget 包的管理和安装。程序使用 Go 语言编写，通过 HTTP 协议访问名为 &amp;quot;Bazaar&amp;quot; 的仓库服务器上的数据，并对用户定义的配置目录进行安装和管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序文件功能表格：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;主要功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;icon.go&lt;/td&gt;
&lt;td&gt;实现了 Icon 结构体，封装了每个图标包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用图标包、获取已安装图标包、下载安装图标包、卸载图标包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;package.go&lt;/td&gt;
&lt;td&gt;主要包含处理 bazaar 包的函数，如获取包的 README、下载安装包、安装包等。同时还包括了一些读取 icon、theme、widget、template 等信息的函数。在定义了一些结构体来保存这些包的信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template.go&lt;/td&gt;
&lt;td&gt;实现了 Template 结构体，封装了每个模板包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用模板包、获取已安装模板包、下载安装模板包、卸载模板包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;theme.go&lt;/td&gt;
&lt;td&gt;实现了 Theme 结构体，封装了每个主题包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用主题包、获取已安装主题包、下载安装主题包、卸载主题包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;widget.go&lt;/td&gt;
&lt;td&gt;实现了 Widget 结构体，封装了每个 Widget 包的基本信息以及下载和安装等操作函数。主要功能包括获取所有可用 Widget 包、获取已安装 Widget 包、下载安装 Widget 包、卸载 Widget 包。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总体概括：该程序可以根据用户需要对思源笔记进行定制化扩展，增加不同的图标、主题、模板、Widget 等，丰富了用户的使用体验。&lt;/p&gt;
&lt;h2 id=&#34;05-icongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#05-icongo&#34;&gt;#&lt;/a&gt; [0/5] icon.go&lt;/h2&gt;
&lt;p&gt;该文件是 bazaar 工程中的一个 Go 语言源程序文件，用于实现与图标 / 图标包相关的功能。程序中定义了 Icon 结构体，表示一个图标，包括图标的元数据信息和图标文件的路径等。程序还定义了一系列函数，主要包括以下几个方面的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Icons&lt;/code&gt;  函数：该函数通过网络访问 bazaar-server 获取所有可用的图标包的元数据，每个图标包的元数据包括其所在的仓库 URL、预览图片 URL、更新时间、星级、下载次数等信息，并将这些元数据封装成 Icon 对象，并将所有 Icon 对象返回，排序方式为按更新时间倒序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InstalledIcons&lt;/code&gt;  函数：该函数遍历用户本地已安装的图标的目录，读取目录中的每个图标包的元数据，并与第一个功能中获取的图标包元数据进行匹配，根据匹配结果将本地已安装的图标包封装成 Icon 对象，以数组的形式返回。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InstallIcon&lt;/code&gt;  函数：该函数用于从 bazaar-server 下载已有的图标包并安装到本地。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UninstallIcon&lt;/code&gt;  函数：该函数用于从用户本地卸载指定的图标包。&lt;/li&gt;
&lt;li&gt;其他函数：包括 isBuiltInIcon 函数，用于判断指定的目录名称是否为默认提供的图标包；IconJSON 函数，用于解析指定目录中存储的图标包元数据信息；formatUpdated 函数，用于格式化日期字符串表示的时间信息；isOutdatedIcon 函数，用于判断本地已安装的图标包是否需要更新等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;15-packagego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-packagego&#34;&gt;#&lt;/a&gt; [1/5] package.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言编写的 bazaar 包，其中包含了一些处理 bazaar 包的函数，如获取包的 README、下载安装包、安装包等。同时还包括了一些读取 icon、theme、widget、template 等信息的函数。&lt;/p&gt;
&lt;p&gt;在定义了一些结构体来保存这些包的信息，如 Package、Icon、Widget、Template 等。&lt;/p&gt;
&lt;p&gt;函数主要的实现思路是从 bazaar 服务器上下载以 zip 压缩包为形式的安装包，再解压到指定的目录中。同时还包括了一些处理数据的函数，如格式化日期、获取 bazaar index 等。&lt;/p&gt;
&lt;h2 id=&#34;25-templatego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-templatego&#34;&gt;#&lt;/a&gt; [2/5] template.go&lt;/h2&gt;
&lt;p&gt;该文件是 template.go，是一个 Go 语言编写的程序文件，主要包含以下函数和数据结构：&lt;/p&gt;
&lt;p&gt;函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Templates ()：获取所有论坛模板的列表，并按更新时间排序。&lt;/li&gt;
&lt;li&gt;InstalledTemplates ()：获取已安装论坛模板的列表。&lt;/li&gt;
&lt;li&gt;InstallTemplate ()：安装指定的论坛模板。&lt;/li&gt;
&lt;li&gt;UninstallTemplate ()：卸载指定的论坛模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Template：存储论坛模板的基本信息，包括名称、作者、预览图、更新日期、大小等。其中，已安装的论坛模板还包括安装日期、版本号等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;35-themego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-themego&#34;&gt;#&lt;/a&gt; [3/5] theme.go&lt;/h2&gt;
&lt;p&gt;文件名：theme.go&lt;/p&gt;
&lt;p&gt;该文件是一个 Golang 语言编写的主题管理模块，用于管理笔记软件思源笔记的主题。&lt;/p&gt;
&lt;p&gt;主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取所有可用主题&lt;/li&gt;
&lt;li&gt;获取已安装的主题&lt;/li&gt;
&lt;li&gt;安装一个主题&lt;/li&gt;
&lt;li&gt;卸载一个主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主题数据来自于一个名为 Bazaar 的思源笔记主题仓库，使用 HTTP 请求向仓库获取主题数据。同时该文件也使用了第三方库 ants 和 go-humanize。&lt;/p&gt;
&lt;h2 id=&#34;45-widgetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-widgetgo&#34;&gt;#&lt;/a&gt; [4/5] widget.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 widget.go，是一个 Go 语言编写的文件。该文件实现了一个名为 Widget 的类型，并且该类型包含一些程序所需要的属性。&lt;/p&gt;
&lt;p&gt;其中，函数  &lt;code&gt;Widgets&lt;/code&gt;  返回一个包含多个 Widget 的数组，而函数  &lt;code&gt;InstalledWidgets&lt;/code&gt;  返回一个已安装 Widget 的数组。函数  &lt;code&gt;InstallWidget&lt;/code&gt;  用于安装 Widget，而函数  &lt;code&gt;UninstallWidget&lt;/code&gt;  用于卸载 Widget。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-04T19:05:56.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230403/</id>
        <title>思源笔记源码解析之kernel篇（二）av</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230403/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;根据以上分析，该程序的整体功能是提供属性视图的相关实现，用于数据的存储、管理和查询。程序的核心结构包括 Cell、Column 和 Row，其中 Cell 表示单元格，Column 表示表的一列，包括列 ID、列名、列类型、关联的属性视图 ID、目标关联列 ID 以及选项列表等信息，Row 表示表的一行，其中包含多个 Cell。&lt;/p&gt;
&lt;p&gt;下表是对每个文件功能的概括和简要说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;功能概述&lt;/th&gt;
&lt;th&gt;主要函数和结构体说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;av.go&lt;/td&gt;
&lt;td&gt;提供属性视图的列名列出、插入列、读取和保存 AttributeView 结构体、删除列和表等功能&lt;/td&gt;
&lt;td&gt;GetColumnNames(), InsertColumn(), ParseAttributeView(), SaveAttributeView(), getAttributeViewDataPath(), dropAttributeViewTableColumn(), addAttributeViewTableColumn(), dropAttributeViewTable(), createAttributeViewTable()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cell.go&lt;/td&gt;
&lt;td&gt;定义 Cell 结构体，表示属性视图中的单元格，具有两个成员变量 ID 和 Value，并可序列化为 JSON 格式&lt;/td&gt;
&lt;td&gt;Cell 结构体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;column.go&lt;/td&gt;
&lt;td&gt;定义 ColumnType（列类型）、Column（列基础结构）和 ColumnSelectOption（选项列表）等结构体，提供 NewColumn 方法创建新的 Column 对象&lt;/td&gt;
&lt;td&gt;ColumnType 结构体，Column 结构体，ColumnSelectOption 结构体，NewColumn () 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;row.go&lt;/td&gt;
&lt;td&gt;定义 Row 结构体，表示属性视图中的一行，具有 ID 和 Cells 两个成员变量，同时提供 NewRow 方法创建一个 Row 结构体指针&lt;/td&gt;
&lt;td&gt;Row 结构体，NewRow () 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;04-avgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#04-avgo&#34;&gt;#&lt;/a&gt; [0/4] av.go&lt;/h2&gt;
&lt;p&gt;该文件为 SiYuan 笔记应用的属性视图（Attribute View）相关实现代码文件，包含了 AttributeView 以及其相关的结构体和函数实现。该文件的主要实现了以下功能：&lt;/p&gt;
&lt;p&gt;1. 列出属性视图的列名 函数： &lt;code&gt;GetColumnNames()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2. 在指定的位置插入一个 Column 对象 函数： &lt;code&gt;InsertColumn()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3. 读取指定 ID 的属性视图的 JSON 数据并返回其相应结构体 函数： &lt;code&gt;ParseAttributeView()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4. 保存指定的 AttributeView 结构体数据到 JSON 文件中 函数： &lt;code&gt;SaveAttributeView()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5. 获取指定 ID 的 AttributeView 数据的 JSON 文件路径 函数： &lt;code&gt;getAttributeViewDataPath()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6. 在属性视图的数据库表中删除指定的一个列 函数： &lt;code&gt;dropAttributeViewTableColumn()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7. 在属性视图的数据库表中增加指定的一个列 函数： &lt;code&gt;addAttributeViewTableColumn()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;8. 删除指定 ID 的属性视图的数据库表 函数： &lt;code&gt;dropAttributeViewTable()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;9. 在属性视图的数据库中创建一个指定 ID 的表，建立 id 和指定列的对应关系 函数： &lt;code&gt;createAttributeViewTable()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;14-cellgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-cellgo&#34;&gt;#&lt;/a&gt; [1/4] cell.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 cell.go，是一段 Go 语言代码。程序定义了一个名为 Cell 的结构体，该结构体有两个成员，分别是 ID 和 Value，均为字符串类型。其中，结构体的成员都被打上了 json 标记，表明这些成员可以被序列化为 JSON 格式。该程序文件可能是某个软件或系统的一部分，用于对单元格进行数据的存储和管理。&lt;/p&gt;
&lt;h2 id=&#34;24-columngo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-columngo&#34;&gt;#&lt;/a&gt; [2/4] column.go&lt;/h2&gt;
&lt;p&gt;该文件名为 column.go，主要包含了属性视图的基础结构的定义，包括 ColumnType（列类型）、Column（列基础结构）、ColumnSelectOption（选项列表）等。其中，ColumnType 包含了 block、date、number、relation、rollup、select 和 text 这几种列类型，Column 包含了列 ID、列名、列类型、关联的属性视图 ID、目标关联列 ID 以及选项列表等信息，并提供了 NewColumn 方法，用于创建新的 Column 对象。&lt;/p&gt;
&lt;h2 id=&#34;34-rowgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-rowgo&#34;&gt;#&lt;/a&gt; [3/4] row.go&lt;/h2&gt;
&lt;p&gt;该代码文件为 Go 语言编写的程序，属于 av 目录下的一个名为 &amp;quot;row.go&amp;quot; 的文件。该文件定义了一个名为 &amp;quot;Row&amp;quot; 的结构体，其中包含有一个 &amp;quot;ID&amp;quot; 的 string 类型成员变量以及一个 &amp;quot;Cells&amp;quot; 的指向 &amp;quot;Cell&amp;quot; 结构体的切片类型变量。同时该文件还定义了一个 &amp;quot;NewRow ()&amp;quot; 方法用于返回一个新的 &amp;quot;Row&amp;quot; 结构体指针。该文件依赖于 &amp;quot;ast&amp;quot; 模块，使用了其中的 &amp;quot;NewNodeID ()&amp;quot; 函数。同时，该代码文件还包含着版权声明和 GNU Affero 通用公共许可证的相关信息。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-03T16:39:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/tools/20230403/</id>
        <title>Docker + ChatGPT + 微信</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/tools/20230403/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;终于捣鼓成功啦，项目地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3lsc2lzbG92ZS93ZWNoYXRib3Q=&#34;&gt;ylsislove/wechatbot&lt;/span&gt;，欢迎 star ~&lt;/p&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;最新消息：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMU04SkZicTlFYTI5RXpFOVFxb2NQUQ==&#34;&gt;https://mp.weixin.qq.com/s/1M8JFbq9Ea29EzE9QqocPQ&lt;/span&gt;&lt;br /&gt;
 如果账号是从第三方手上购买过来的，不要尝试了，OpenAI 最近在封这类账号。以及自己的代理域名也不要分享给他人使用了，像评论里有人评论的，保护好自己的账号最重要～&lt;br /&gt;
 如果是自己亲手注册的，也绑定了信用卡（向 OpenAI 表明自己不是白嫖党 / 滑稽），同时也有一个自己搭建的稳定的代理域名，那么就可以捣鼓一下啦～&lt;br /&gt;
 实在担心的话，就先收藏一下本帖子，等最近风头过去了在尝试吧&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;极空间部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#极空间部署&#34;&gt;#&lt;/a&gt; 极空间部署&lt;/h2&gt;
&lt;h3 id=&#34;下载镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载镜像&#34;&gt;#&lt;/a&gt; 下载镜像&lt;/h3&gt;
&lt;p&gt;在仓库中搜索我的用户名 &lt;code&gt;ylsislove&lt;/code&gt; ，选择 &lt;code&gt;wechatbot&lt;/code&gt; ，下载最新版本即可&lt;/p&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030227517.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030228047.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建配置文件&#34;&gt;#&lt;/a&gt; 创建配置文件&lt;/h3&gt;
&lt;p&gt;找一个位置，新建 &lt;code&gt;config.txt&lt;/code&gt; ，内容如下，根据个人信息进行修改&lt;/p&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030230032.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030231212.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;api_key&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your api key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;auto_pass&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;session_timeout&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;max_tokens&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;model&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;gpt-3.5-turbo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;temperature&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;reply_prefix&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;来自机器人回复：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;session_clear_token&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;清空会话&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;base_url&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://api.openai.com/v1/&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;request_timeout&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参数含义参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3lsc2lzbG92ZS93ZWNoYXRib3QjJUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2JUU4JUFGJUI0JUU2JTk4JThF&#34;&gt;配置文件说明&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;国内用户注意设置好 base_url，base_url 设置稳定再访问，API 账户就不会出问题，我用了很长时间了都还在稳定使用～&lt;br /&gt;
base_url 可以参考 https://github.com/Ice-Hazymoon/openai-scf-proxy 这个教程，设置一个稳定的代理域名即可。挂到腾讯云香港地区的轻量应用服务器上都行，我用的就是这个&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;创建容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建容器&#34;&gt;#&lt;/a&gt; 创建容器&lt;/h3&gt;
&lt;p&gt;双击刚才下载的镜像，配置极其简单，像网络、端口、别名、环境都不用管，只需配置好 &lt;code&gt;文件夹路径&lt;/code&gt; 和 &lt;code&gt;启动命令&lt;/code&gt; 即可，如下&lt;/p&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030234539.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030234624.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030236817.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击应用，bingo~，容器创建成功&lt;/p&gt;
&lt;h3 id=&#34;扫码登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扫码登录&#34;&gt;#&lt;/a&gt; 扫码登录&lt;/h3&gt;
&lt;p&gt;我们可以在容器的日志中看到我们要扫描的二维码，但控制台不好扫描，我们就把日志下载下来即可～&lt;/p&gt;
&lt;p&gt;下载后，用本地的记事本打开，看到二维码清晰的展现在我们面前了，爽～&lt;/p&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030240193.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030238171.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030249151.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030241329.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;扫描成功后刷新日志，成功登录，接下来开始愉快的学习吧～&lt;/p&gt;
&lt;h2 id=&#34;效果展示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#效果展示&#34;&gt;#&lt;/a&gt; 效果展示&lt;/h2&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;600&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030216436.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030216410.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/04/03/202304030216301.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="工具篇" scheme="https://blog.aayu.today/categories/skill/tools/" />
        <category term="ChatGPT" scheme="https://blog.aayu.today/tags/ChatGPT/" />
        <updated>2023-04-02T18:43:28.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/code-analysis/siyuan/20230401/</id>
        <title>思源笔记源码解析之kernel篇（一）api</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/code-analysis/siyuan/20230401/"/>
        <content type="html">&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;根据以上你自己的分析，对程序的整体功能和构架做出概括。然后用一张 markdown 表格整理每个文件的功能&lt;/p&gt;
&lt;p&gt;根据我的分析，该程序是一个基于 API 的笔记管理系统，使用 Go 语言编写，基于 Gin 框架和 Lute 引擎。它包含了多个文件和模块，用于实现不同的功能，例如：笔记本管理、笔记管理、文本编辑、图表管理、导入 / 导出、同步 / 备份、用户管理等。可以通过 API 接口调用这些功能。以下是每个文件的功能：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account.go&lt;/td&gt;
&lt;td&gt;用于处理用户账户相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ai.go&lt;/td&gt;
&lt;td&gt;提供 AI 语音合成的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asset.go&lt;/td&gt;
&lt;td&gt;用于上传、查看和下载笔记中使用的资源文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attr.go&lt;/td&gt;
&lt;td&gt;提供来源快捷方式操作的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;av.go&lt;/td&gt;
&lt;td&gt;提供了音视频播放相关的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bazaar.go&lt;/td&gt;
&lt;td&gt;提供了安装和管理 bazaar 主题插件的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block.go&lt;/td&gt;
&lt;td&gt;处理块的增删改查请求，提供块层级、索引等信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;block_op.go&lt;/td&gt;
&lt;td&gt;提供文本处理的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bookmark.go&lt;/td&gt;
&lt;td&gt;提供了书签相关的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clipboard.go&lt;/td&gt;
&lt;td&gt;处理剪贴板相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;export.go&lt;/td&gt;
&lt;td&gt;导出笔记文档的接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extension.go&lt;/td&gt;
&lt;td&gt;添加、删除、获取扩展插件的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;file.go&lt;/td&gt;
&lt;td&gt;管理笔记文件的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filetree.go&lt;/td&gt;
&lt;td&gt;管理笔记文件树的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format.go&lt;/td&gt;
&lt;td&gt;提供文本格式化相关的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graph.go&lt;/td&gt;
&lt;td&gt;管理图表的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history.go&lt;/td&gt;
&lt;td&gt;提供操作历史记录的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;import.go&lt;/td&gt;
&lt;td&gt;导入笔记文档的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inbox.go&lt;/td&gt;
&lt;td&gt;管理收件箱的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lute.go&lt;/td&gt;
&lt;td&gt;提供 markdown 文档渲染相关的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notebook.go&lt;/td&gt;
&lt;td&gt;管理笔记本的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;notification.go&lt;/td&gt;
&lt;td&gt;管理通知的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outline.go&lt;/td&gt;
&lt;td&gt;获取文档纲要的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ref.go&lt;/td&gt;
&lt;td&gt;管理快捷方式的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repo.go&lt;/td&gt;
&lt;td&gt;处理仓库相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;riff.go&lt;/td&gt;
&lt;td&gt;添加、删除和管理卡片包的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;router.go&lt;/td&gt;
&lt;td&gt;路由中间件级统一处理入口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search.go&lt;/td&gt;
&lt;td&gt;管理全文搜索的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setting.go&lt;/td&gt;
&lt;td&gt;管理系统设置的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;snippet.go&lt;/td&gt;
&lt;td&gt;管理代码片段的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sql.go&lt;/td&gt;
&lt;td&gt;处理 SQL 查询请求的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;storage.go&lt;/td&gt;
&lt;td&gt;管理笔记存储相关的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync.go&lt;/td&gt;
&lt;td&gt;处理同步 / 备份相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;system.go&lt;/td&gt;
&lt;td&gt;管理系统功能的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag.go&lt;/td&gt;
&lt;td&gt;处理标签相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;template.go&lt;/td&gt;
&lt;td&gt;处理模板渲染相关的 API 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;transaction.go&lt;/td&gt;
&lt;td&gt;处理交易请求的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workspace.go&lt;/td&gt;
&lt;td&gt;管理工作空间的 API 接口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;038accountgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#038accountgo&#34;&gt;#&lt;/a&gt; [0/38]account.go&lt;/h2&gt;
&lt;p&gt;此文件是 api 服务的账号相关接口实现的 Go 语言代码文件，主要包含了以下几个接口实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始免费试用（startFreeTrial）&lt;/li&gt;
&lt;li&gt;使用激活码（useActivationcode）&lt;/li&gt;
&lt;li&gt;检查激活码（checkActivationcode）&lt;/li&gt;
&lt;li&gt;注销账号（deactivateUser）&lt;/li&gt;
&lt;li&gt;用户登录（login）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个接口都有相应的处理逻辑，并返回对应的结果。在实现过程中，还引用了一些第三方的 Go 语言库，如 gin, gulu 等。&lt;/p&gt;
&lt;h2 id=&#34;138aigo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#138aigo&#34;&gt;#&lt;/a&gt; [1/38]ai.go&lt;/h2&gt;
&lt;p&gt;本文件名为  &lt;code&gt;api\ai.go&lt;/code&gt; ，是一个 Go 语言编写的应用程序文件，主要是关于人工智能的部分。程序使用了 Gin 框架和一些其他的依赖项库，如 gulu。&lt;/p&gt;
&lt;p&gt;主要包含两个函数：chatGPT 和 chatGPTWithAction。这两个函数的作用是使用模型进行文本聊天，其中 chatGPT 使用模型回答用户提出的问题，而 chatGPTWithAction 使用模型执行动作并更新模型。函数通过 HTTP 响应的方式返回处理结果。&lt;/p&gt;
&lt;p&gt;该程序遵守 GNU Affero 通用公共许可证，即可以自由地共享、使用和修改，但需要带上相应的协议声明和原始代码的许可证。&lt;/p&gt;
&lt;h2 id=&#34;238assetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#238assetgo&#34;&gt;#&lt;/a&gt; [2/38]asset.go&lt;/h2&gt;
&lt;p&gt;该文件是 Golang 编写的 Siyuan 笔记应用程序的一个 API 模块，提供了一系列操作笔记中资源（如图片、附件等）的 HTTP 接口，具有上传、下载、修改、删除等功能。主要函数包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;renameAsset: 重命名资源文件&lt;/li&gt;
&lt;li&gt;getDocImageAssets: 获取笔记中图片资源&lt;/li&gt;
&lt;li&gt;setFileAnnotation/getFileAnnotation: 设置和读取资源注释文本&lt;/li&gt;
&lt;li&gt;resolveAssetPath: 解析资源文件相对路径并获取绝对路径&lt;/li&gt;
&lt;li&gt;removeUnusedAsset/removeUnusedAssets/getUnusedAssets: 删除和查询未使用的资源文件&lt;/li&gt;
&lt;li&gt;uploadCloud: 将本地笔记中的资源上传至云存储&lt;/li&gt;
&lt;li&gt;insertLocalAssets: 将本地资源文件插入到笔记中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，代码中还包含了一些错误处理代码（例如当发生错误时返回错误码和错误信息）和依赖库引用代码。&lt;/p&gt;
&lt;h2 id=&#34;338-attrgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#338-attrgo&#34;&gt;#&lt;/a&gt; [3/38] attr.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 笔记应用的 API 包的一部分，包含了若干个函数，实现了获取书签标签、获取块（block）属性、设置块属性、重置块属性等功能。每个函数都是一个 RESTful API 端点，使用 HTTP 协议提供服务。&lt;/p&gt;
&lt;p&gt;其中， &lt;code&gt;getBookmarkLabels&lt;/code&gt;  函数用于获取所有的书签标签， &lt;code&gt;getBlockAttrs&lt;/code&gt;  函数用于获取指定块的属性值， &lt;code&gt;setBlockAttrs&lt;/code&gt;  函数用于设置指定块的属性值， &lt;code&gt;resetBlockAttrs&lt;/code&gt;  函数用于将指定块的属性值重置为默认值。&lt;/p&gt;
&lt;p&gt;代码实现了参数校验和错误处理机制，并使用第三方库 Gulu 和 Gin 简化了代码逻辑和响应操作。&lt;/p&gt;
&lt;h2 id=&#34;438-avgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#438-avgo&#34;&gt;#&lt;/a&gt; [4/38] av.go&lt;/h2&gt;
&lt;p&gt;该程序文件是 SiYuan 在构建数字花园时使用的一个 API 文件。&lt;/p&gt;
&lt;p&gt;此文件提供了一个 HTTP 处理程序函数（ &lt;code&gt;renderAttributeView&lt;/code&gt; ），该函数允许通过 HTTP 请求从服务器获取一个指定的属性视图。该属性视图的 ID 通过 HTTP 请求的 JSON 主体中的 &amp;quot;id&amp;quot; 字段传递。&lt;/p&gt;
&lt;p&gt;此外，该程序文件还引入了其他依赖包，并使用了这些依赖包提供的工具类和函数。&lt;/p&gt;
&lt;h2 id=&#34;538-bazaargo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#538-bazaargo&#34;&gt;#&lt;/a&gt; [5/38] bazaar.go&lt;/h2&gt;
&lt;p&gt;该程序文件名是  &lt;code&gt;api\bazaar.go&lt;/code&gt; ，代码主要是实现了一个 API 接口，用于处理集市（Bazaar）的相关操作。&lt;/p&gt;
&lt;p&gt;其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取 Bazaar 包的 README 文件&lt;/li&gt;
&lt;li&gt;获取 Bazaar 小部件、获取已安装的小部件、安装 Bazaar 小部件、卸载 Bazaar 小部件&lt;/li&gt;
&lt;li&gt;获取 Bazaar 图标、获取已安装的图标、安装 Bazaar 图标、卸载 Bazaar 图标&lt;/li&gt;
&lt;li&gt;获取 Bazaar 模板、获取已安装的模板、安装 Bazaar 模板、卸载 Bazaar 模板&lt;/li&gt;
&lt;li&gt;以及获取 Bazaar 主题、获取已安装的主题、安装 Bazaar 主题和卸载 Bazaar 主题等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该程序主要基于 Golang 语言和 Gin 框架实现，其中还引入了其他第三方库进行支持。&lt;/p&gt;
&lt;h2 id=&#34;638-blockgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#638-blockgo&#34;&gt;#&lt;/a&gt; [6/38] block.go&lt;/h2&gt;
&lt;p&gt;该文件是 Siyuan 内核中的一个 API 文件，提供了一系列操作块的 RESTful API。&lt;/p&gt;
&lt;p&gt;文件主要定义了一些函数，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取标题子级 ID、获取标题子级 DOM、获取标题删除事务、获取标题层级事务&lt;/li&gt;
&lt;li&gt;获取文档信息&lt;/li&gt;
&lt;li&gt;获取内容单词计数、获取树的统计信息、获取块的单词计数&lt;/li&gt;
&lt;li&gt;转移块引用、交换块引用、设置块提醒、检查块是否折叠、检查块是否存在、获取最近更新的块、获取块引用文本、获取块引用 ID、根据文件注释 ID 获取块引用 ID、根据引用文本获取块定义 ID、获取块层级结构、获取块索引、获取块信息、获取块 DOM 和获取块 Kramdown 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;738-block_opgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#738-block_opgo&#34;&gt;#&lt;/a&gt; [7/38] block_op.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 api 包中的代码文件，文件名为  &lt;code&gt;block_op.go&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;这个文件实现了一些操作 block（块）的函数，如插入、删除、更新等。&lt;/p&gt;
&lt;p&gt;这些操作将与文件系统交互，并且利用 gin 框架处理 HTTP 请求和响应。&lt;/p&gt;
&lt;p&gt;其中，最重要的依赖是 siyuan-note 项目的模型、文件系统、Lute 引擎和一些公用库。这个文件的主要作用是提供用于块级操作的 API。&lt;/p&gt;
&lt;h2 id=&#34;838-bookmarkgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#838-bookmarkgo&#34;&gt;#&lt;/a&gt; [8/38] bookmark.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为  &lt;code&gt;bookmark.go&lt;/code&gt; ，位于  &lt;code&gt;api\&lt;/code&gt;  目录下。&lt;/p&gt;
&lt;p&gt;代码为 Go 语言编写的 API 接口，主要实现了获取、删除和重命名书签的功能。&lt;/p&gt;
&lt;p&gt;具体实现使用了  &lt;code&gt;gin&lt;/code&gt;  框架提供的 API 开发接口。&lt;/p&gt;
&lt;p&gt;其中获取书签的方法是  &lt;code&gt;getBookmark&lt;/code&gt; ，删除书签的方法是  &lt;code&gt;removeBookmark&lt;/code&gt; ，重命名书签的方法是  &lt;code&gt;renameBookmark&lt;/code&gt; 。该程序文件依赖于  &lt;code&gt;gulu&lt;/code&gt;  和  &lt;code&gt;util&lt;/code&gt;  两个引入包和  &lt;code&gt;model&lt;/code&gt;  模块。&lt;/p&gt;
&lt;h2 id=&#34;938-clipboardgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#938-clipboardgo&#34;&gt;#&lt;/a&gt; [9/38] clipboard.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 API 接口，文件名为  &lt;code&gt;clipboard.go&lt;/code&gt; ，所在目录为 api，主要实现了读取剪贴板中的文件路径的功能。&lt;/p&gt;
&lt;p&gt;该接口使用了第三方库 clipboard 和 gulu，其中 gulu 是作者自己开发的一个工具包。接口将获取到的文件路径作为 JSON 数据返回给请求方，当没有文件路径时返回一个空数组。&lt;/p&gt;
&lt;p&gt;需要注意的是，在 Linux 平台下，不再支持 “粘贴为纯文本” 的操作，因此该接口在 Linux 平台下不会读取剪贴板中的文件路径。&lt;/p&gt;
&lt;p&gt;该程序文件采用 GNU Affero General Public License 开源协议。&lt;/p&gt;
&lt;h2 id=&#34;1038-exportgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1038-exportgo&#34;&gt;#&lt;/a&gt; [10/38] export.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为  &lt;code&gt;api\export.go&lt;/code&gt; ，主要实现了 SiYuan 的导入和导出功能。&lt;/p&gt;
&lt;p&gt;该文件包含了多个函数来导出不同格式的 SiYuan 笔记，包括 Markdown、HTML、PDF 等。其中，每个函数都接收一个参数 c*gin.Context，从中提取需要导出的笔记的 ID、文件名等信息。&lt;/p&gt;
&lt;p&gt;这些函数都通过 model 包提供的接口来访问笔记本数据，将导出的结果返回给客户端。&lt;/p&gt;
&lt;h2 id=&#34;1138-extensiongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1138-extensiongo&#34;&gt;#&lt;/a&gt; [11/38] extension.go&lt;/h2&gt;
&lt;p&gt;该文件名为  &lt;code&gt;api\extension.go&lt;/code&gt;  的程序文件是一个 Go 语言写的 API 接口实现，主要实现了对 SiYuan 软件中的 “拷贝到笔记” 功能的支持，包含了上传文件、解析 HTML、替换图片等功能。具体包含函数 extensionCopy，其中主要包含了以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取参数信息，包括 dom、notebook 等信息。&lt;/li&gt;
&lt;li&gt;组织保存地址，处理文件名，防止文件名冲突。&lt;/li&gt;
&lt;li&gt;读取上传文件数据并保存到指定地址。&lt;/li&gt;
&lt;li&gt;解析 HTML 中的图片地址，将已上传的图片地址替换到 HTML 中。&lt;/li&gt;
&lt;li&gt;将最终处理后的文本信息以 JSON 的格式返回给前端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1238-filego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1238-filego&#34;&gt;#&lt;/a&gt; [12/38] file.go&lt;/h2&gt;
&lt;p&gt;该程序实现了一个简单的用于操作文件的 API 接口，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;copyFile&lt;/code&gt; ：将一个文件从源位置复制到目标位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getFile&lt;/code&gt; ：获取一个文件，并在 HTTP 响应中返回。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readDir&lt;/code&gt; ：读取一个目录，并返回其中的所有文件和子目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeFile&lt;/code&gt; ：删除指定位置的文件或目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;putFile&lt;/code&gt; ：将一个文件或目录保存到指定位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数实现了基本的 CRUD （创建、读取、更新、删除）操作，可以用于搭建简单的文件服务。除此之外，该文件还依赖了一些第三方库，如  &lt;code&gt;gin&lt;/code&gt; 、 &lt;code&gt;filelock&lt;/code&gt;  等。&lt;/p&gt;
&lt;h2 id=&#34;1338-filetreego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1338-filetreego&#34;&gt;#&lt;/a&gt; [13/38] filetree.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为  &lt;code&gt;filetree.go&lt;/code&gt; ，位于 api 文件夹下。&lt;/p&gt;
&lt;p&gt;该文件中定义了一系列接口函数，用以实现对 siyuan 笔记 app 中的文件树的一系列操作，包括获取、移动、删除、重命名笔记等。&lt;/p&gt;
&lt;p&gt;具体实现中涉及到了 siyuan-note/siyuan 项目中的一些模块和库，如文件系统、模板渲染以及 gin web 框架等。&lt;/p&gt;
&lt;h2 id=&#34;1438-formatgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1438-formatgo&#34;&gt;#&lt;/a&gt; [14/38] format.go&lt;/h2&gt;
&lt;p&gt;这个程序文件包含了名为 “api” 的包，它实现了两个名为 “netImg2LocalAssets” 和 “autoSpace” 的 API 端点，使用 gin 框架和 HTTP 协议。&lt;/p&gt;
&lt;p&gt;这些端点是通过处理 HTTP POST 请求来调用 “model” 包中的 “NetImg2LocalAssets” 和 “AutoSpace” 函数。&lt;/p&gt;
&lt;p&gt;这个程序的目的是在 Siyuan 笔记应用中提供这两个功能的 API 接口。&lt;/p&gt;
&lt;h2 id=&#34;1538-graphgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1538-graphgo&#34;&gt;#&lt;/a&gt; [15/38] graph.go&lt;/h2&gt;
&lt;p&gt;此程序文件是一个 Go 语言编写的 API，使用了 Gin 数据库框架以及一些 SiYuan 笔记应用的应用程序接口。&lt;/p&gt;
&lt;p&gt;它包含四个函数：resetGraph、resetLocalGraph、getGraph 和 getLocalGraph，这些函数的主要作用是重置全局或本地图表，获取全局或本地图表的信息。其中，resetGraph 和 resetLocalGraph 用于重置全局或本地图表，getGraph 和 getLocalGraph 用于获取全局或本地图表的信息。&lt;/p&gt;
&lt;p&gt;每个函数都在不同的 URL 上运行，并返回固定格式的 JSON 数据。&lt;/p&gt;
&lt;h2 id=&#34;1638-historygo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1638-historygo&#34;&gt;#&lt;/a&gt; [16/38] history.go&lt;/h2&gt;
&lt;p&gt;该文件名是  &lt;code&gt;api\history.go&lt;/code&gt; ，是一个 Go 语言编写的 API 程序文件，提供了与笔记历史相关的功能函数，包括搜索笔记历史、获取历史记录项目、重建历史索引、清空工作区历史、获取文档历史内容、恢复文档历史、恢复资产历史、恢复笔记本历史。&lt;/p&gt;
&lt;p&gt;该程序文件使用了第三方库 gin，以及 suyuan-note/siyuan/kernel/model、suyuan-note/siyuan/kernel/util 等模块。&lt;/p&gt;
&lt;p&gt;程序代码使用了 GNU Affero 通用公共许可证。&lt;/p&gt;
&lt;h2 id=&#34;1738-importgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1738-importgo&#34;&gt;#&lt;/a&gt; [17/38] import.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言编写的 API 程序，包含三个函数： &lt;code&gt;importSY&lt;/code&gt; 、 &lt;code&gt;importData&lt;/code&gt;  和  &lt;code&gt;importStdMd&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;其中  &lt;code&gt;importSY&lt;/code&gt;  函数用于导入  &lt;code&gt;.sy.zip&lt;/code&gt;  格式的笔记， &lt;code&gt;importData&lt;/code&gt;  函数用于导入一般数据文件， &lt;code&gt;importStdMd&lt;/code&gt;  函数用于导入标准 Markdown 格式的笔记。这些函数都是通过 HTTP POST 方法接收数据，并返回 JSON 类型的结果。&lt;/p&gt;
&lt;p&gt;函数中使用了许多其它 Go 语言包来完成相关任务，如  &lt;code&gt;os&lt;/code&gt; 、 &lt;code&gt;io&lt;/code&gt; 、 &lt;code&gt;net/http&lt;/code&gt; 、 &lt;code&gt;filepath&lt;/code&gt;  等标准库，以及  &lt;code&gt;github.com/88250/gulu&lt;/code&gt; 、 &lt;code&gt;github.com/gin-gonic/gin&lt;/code&gt; 、 &lt;code&gt;github.com/siyuan-note/logging&lt;/code&gt; 、 &lt;code&gt;github.com/siyuan-note/siyuan/kernel/model&lt;/code&gt; 、 &lt;code&gt;github.com/siyuan-note/siyuan/kernel/util&lt;/code&gt;  等第三方库。&lt;/p&gt;
&lt;h2 id=&#34;1838-inboxgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1838-inboxgo&#34;&gt;#&lt;/a&gt; [18/38] inbox.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为 inbox.go，位于 api 目录下。该程序实现了三个 HTTP API 接口，分别为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;removeShorthands：用于移除云端快捷方式，参数为 ids（待移除的快捷方式 ID 列表），返回值为成功移除的快捷方式数量。&lt;/li&gt;
&lt;li&gt;getShorthand：用于获取云端快捷方式的具体内容，参数为 id（快捷方式 ID），返回值为快捷方式的具体内容。&lt;/li&gt;
&lt;li&gt;getShorthands：用于获取云端快捷方式列表，参数为 page（页码），返回值为指定页码的快捷方式列表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些 API 接口通过 GIN 框架进行封装，通过 HTTP 返回值进行数据传输，使用了 Gulu 和 Siyuan-Note 库的一些函数和方法。&lt;/p&gt;
&lt;h2 id=&#34;1938-lutego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1938-lutego&#34;&gt;#&lt;/a&gt; [19/38] lute.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 API，文件名为 lute.go，位于 api 目录下。它实现了以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copyStdMarkdown：将指定 ID 的脑图导出为标准 Markdown 格式。&lt;/li&gt;
&lt;li&gt;html2BlockDOM：将指定 HTML 转换为块级 DOM 并处理其中带有超链接的图片为本地引用。&lt;/li&gt;
&lt;li&gt;spinBlockDOM：将指定块级 DOM 中的语法转换为另一种语法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该程序文件引用了许多其他的库和函数，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gin-gonic/gin：实现了 HTTP Web 框架。&lt;/li&gt;
&lt;li&gt;88250/gulu：提供了一些 Go 语言工具库的封装。&lt;/li&gt;
&lt;li&gt;88250/lute：一个 Go 语言实现的 Markdown 渲染器。&lt;/li&gt;
&lt;li&gt;siyuan-note/filelock：提供了一种获取并持有文件锁的方法，以防止多个程序同时修改同一个文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2038-notebookgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2038-notebookgo&#34;&gt;#&lt;/a&gt; [20/38] notebook.go&lt;/h2&gt;
&lt;p&gt;该文件名为  &lt;code&gt;api\notebook.go&lt;/code&gt; ，是一个 Golang 语言的程序文件。&lt;/p&gt;
&lt;p&gt;该文件定义了一系列函数，用于处理有关于笔记本的 API 请求。其中包括设置笔记本图标、修改笔记本的排序、重命名笔记本、删除笔记本、创建笔记本、打开笔记本、关闭笔记本、获取笔记本的配置信息和列出所有笔记本等操作。&lt;/p&gt;
&lt;p&gt;这些函数将在 API 服务的实现中得到调用，用于处理客户端的 API 请求，并返回相应的响应结果。&lt;/p&gt;
&lt;h2 id=&#34;2138-notificationgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2138-notificationgo&#34;&gt;#&lt;/a&gt; [21/38] notification.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言编写的与 API 相关的文件，文件路径为  &lt;code&gt;api\notification.go&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;该文件的主要作用是为了实现在 SiYuan 系统中发送通知的功能，其中包括推送消息和推送错误消息。该文件主要使用了  &lt;code&gt;gin&lt;/code&gt;  框架来处理请求，同时也引入了  &lt;code&gt;gulu&lt;/code&gt;  和  &lt;code&gt;util&lt;/code&gt;  工具包来辅助实现功能。具体来说，该文件实现了  &lt;code&gt;pushMsg()&lt;/code&gt;  和  &lt;code&gt;pushErrMsg()&lt;/code&gt;  两个函数，分别用于推送普通消息和错误消息。&lt;/p&gt;
&lt;p&gt;在函数中会根据传入的参数构造一条推送消息，并调用  &lt;code&gt;util&lt;/code&gt;  中的函数来将消息推送给相应的接收者。在消息发送成功后，会返回一个包含消息 ID 的 JSON 格式的响应。&lt;/p&gt;
&lt;h2 id=&#34;2238-outlinego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2238-outlinego&#34;&gt;#&lt;/a&gt; [22/38] outline.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Golang 语言编写的 API 文件，文件名为  &lt;code&gt;outline.go&lt;/code&gt; ，属于 api 目录下。&lt;/p&gt;
&lt;p&gt;它提供了一个函数 getDocOutline，负责从指定的笔记文档中获取文档纲要（outline），并以 JSON 格式返回。该函数使用了 gin 和 gulu 库对 HTTP 请求和 JSON 数据进行处理，同时也引用了 model 和 util 库中的函数来实现所需的功能。&lt;/p&gt;
&lt;p&gt;函数的实现过程中，通过请求参数指定了需要获取纲要的笔记文档的 ID，若参数错误则返回错误信息，若获取过程中出现异常也会返回错误信息。&lt;/p&gt;
&lt;h2 id=&#34;2338-refgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2338-refgo&#34;&gt;#&lt;/a&gt; [23/38] ref.go&lt;/h2&gt;
&lt;p&gt;这是一个名为  &lt;code&gt;ref.go&lt;/code&gt;  的 Go 语言程序文件，位于 api\ 目录下。它实现了 5 个函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;refreshBacklink：刷新某个文档的反向链接。&lt;/li&gt;
&lt;li&gt;getBackmentionDoc：获取某个文档被引用的文档列表。&lt;/li&gt;
&lt;li&gt;getBacklinkDoc：获取某个文档引用的文档列表。&lt;/li&gt;
&lt;li&gt;getBacklink2：获取某个文档的反向链接信息，包括反向链接列表、被反向链接的文档列表等。&lt;/li&gt;
&lt;li&gt;getBacklink：获取某个文档的反向链接信息，与 getBacklink2 类似但参数和返回值有所不同。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2438-repogo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2438-repogo&#34;&gt;#&lt;/a&gt; [24/38] repo.go&lt;/h2&gt;
&lt;p&gt;文件名为  &lt;code&gt;api\repo.go&lt;/code&gt; ，该文件是一个 Go 语言程序，主要提供了一系列操作仓库的 API 接口，包括如下函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;func openRepoSnapshotDoc (c *gin.Context)，获取打开快照文档&lt;/li&gt;
&lt;li&gt;func diffRepoSnapshots (c *gin.Context)，对比快照&lt;/li&gt;
&lt;li&gt;func getCloudSpace (c *gin.Context)，获取云空间&lt;/li&gt;
&lt;li&gt;func checkoutRepo (c *gin.Context)，检出仓库&lt;/li&gt;
&lt;li&gt;func downloadCloudSnapshot (c *gin.Context)，下载云快照&lt;/li&gt;
&lt;li&gt;func uploadCloudSnapshot (c *gin.Context)，上传云快照&lt;/li&gt;
&lt;li&gt;func getRepoSnapshots (c *gin.Context)，获取仓库快照&lt;/li&gt;
&lt;li&gt;func getCloudRepoTagSnapshots (c *gin.Context)，获取云仓库标签快照&lt;/li&gt;
&lt;li&gt;func removeCloudRepoTagSnapshot (c *gin.Context)，删除云仓库标签快照&lt;/li&gt;
&lt;li&gt;func getRepoTagSnapshots (c *gin.Context)，获取仓库标签快照&lt;/li&gt;
&lt;li&gt;func removeRepoTagSnapshot (c *gin.Context)，删除仓库标签快照&lt;/li&gt;
&lt;li&gt;func createSnapshot (c *gin.Context)，创建快照&lt;/li&gt;
&lt;li&gt;func tagSnapshot (c *gin.Context)，标记快照&lt;/li&gt;
&lt;li&gt;func importRepoKey (c *gin.Context)，导入仓库密钥&lt;/li&gt;
&lt;li&gt;func initRepoKeyFromPassphrase (c *gin.Context)，从口令初始化仓库密钥&lt;/li&gt;
&lt;li&gt;func initRepoKey (c *gin.Context)，初始化仓库密钥&lt;/li&gt;
&lt;li&gt;func resetRepo (c *gin.Context)，重置仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些 API 接口的实现依赖于一些 Go 包，如 gin-gonic 和 gulu。&lt;/p&gt;
&lt;h2 id=&#34;2538-riffgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2538-riffgo&#34;&gt;#&lt;/a&gt; [25/38] riff.go&lt;/h2&gt;
&lt;p&gt;此文件为 SiYuan 笔记应用的 API 实现，包含以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取笔记本中的卡片&lt;/li&gt;
&lt;li&gt;获取树状结构中的卡片&lt;/li&gt;
&lt;li&gt;获取卡包中的卡片&lt;/li&gt;
&lt;li&gt;复习卡片&lt;/li&gt;
&lt;li&gt;跳过卡片的复习&lt;/li&gt;
&lt;li&gt;获取笔记本中的待复习卡片&lt;/li&gt;
&lt;li&gt;获取树状结构中的待复习卡片&lt;/li&gt;
&lt;li&gt;获取卡包中的待复习卡片&lt;/li&gt;
&lt;li&gt;删除卡包中的卡片&lt;/li&gt;
&lt;li&gt;添加卡片到卡包&lt;/li&gt;
&lt;li&gt;重命名卡包&lt;/li&gt;
&lt;li&gt;删除卡包&lt;/li&gt;
&lt;li&gt;创建卡包&lt;/li&gt;
&lt;li&gt;获取所有卡包的数据，包括 ID、名称、大小、创建时间、更新时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2638-routergo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2638-routergo&#34;&gt;#&lt;/a&gt; [26/38] router.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言编写的 API 路由文件，用于处理各种 HTTP 请求。&lt;/p&gt;
&lt;p&gt;其中，不需要鉴权的请求包括获取系统启动进度、获取系统版本号等；需要鉴权的请求包括设置工作空间、创建笔记本、搜索笔记等。&lt;/p&gt;
&lt;p&gt;文件中主要使用了 Gin 框架来处理 HTTP 请求，同时还调用了其他模块中的函数来完成相应的业务逻辑。&lt;/p&gt;
&lt;h2 id=&#34;2738-searchgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2738-searchgo&#34;&gt;#&lt;/a&gt; [27/38] search.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言的程序文件，文件名为  &lt;code&gt;search.go&lt;/code&gt; ，包含了一些用于搜索的 API 函数。&lt;/p&gt;
&lt;p&gt;其中包括：findReplace、searchAsset、searchTag、searchWidget、removeTemplate、searchTemplate、searchEmbedBlock、searchRefBlock、fullTextSearchBlock 等函数。&lt;/p&gt;
&lt;p&gt;这些函数用于查找、替换、删除、搜索各种不同类型的内容，如标签、模板、嵌入块、引用块等。这些搜索功能可以通过 API 调用，以便在程序中方便地使用。&lt;/p&gt;
&lt;h2 id=&#34;2838-settinggo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2838-settinggo&#34;&gt;#&lt;/a&gt; [28/38] setting.go&lt;/h2&gt;
&lt;p&gt;该程序文件实现了对 SiYuan 笔记应用的设置，包括 AI、闪卡、账户、编辑器、导出、文件树、搜索、快捷键、外观、云用户、自定义 CSS、表情等设置的修改和获取。&lt;/p&gt;
&lt;p&gt;其中，每个设置对应了一个 HTTP 请求处理函数，通过接收请求中携带的参数来修改相应的配置项，以此实现对 SiYuan 笔记应用的个性化设置。&lt;/p&gt;
&lt;h2 id=&#34;2938-snippetgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2938-snippetgo&#34;&gt;#&lt;/a&gt; [29/38] snippet.go&lt;/h2&gt;
&lt;p&gt;该程序文件是一个 Go 语言编写的 API 文件，文件名为 snippet.go，主要包含四个函数：serveSnippets、getSnippet、setSnippet 和 removeSnippet。&lt;/p&gt;
&lt;p&gt;serveSnippets 函数用于处理访问 /snippets/ 文件路径下的资源，会先从配置文件中读取该资源的内容，如果加载失败则返回 404 错误，并且如果配置文件中匹配到了该资源的名称和类型则返回其配置文件中的内容，其他情况则在文件系统中查找该资源，并返回其内容。&lt;/p&gt;
&lt;p&gt;getSnippet 函数用于读取配置文件中的所有代码片段，可按照类型和是否已禁用进行过滤，并返回查询到的代码片段数组。&lt;/p&gt;
&lt;p&gt;setSnippet 函数用于修改配置文件中的代码片段，会根据请求参数中的 snippets 数组来更新相应的配置项。&lt;/p&gt;
&lt;p&gt;removeSnippet 函数用于删除某个代码片段，并返回删除的代码片段。&lt;/p&gt;
&lt;h2 id=&#34;3038-sqlgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3038-sqlgo&#34;&gt;#&lt;/a&gt; [30/38] sql.go&lt;/h2&gt;
&lt;p&gt;该程序是一个基于 Gin 框架的 API 服务，文件名为  &lt;code&gt;sql.go&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;它提供了一个名为 SQL 的函数，该函数接收来自 API 请求中的 SQL 语句语句，然后通过调用 Siyuan 的 SQL 内核组件来执行这些语句。如果 SQL 执行成功，则函数将返回查询结果。如果 SQL 执行时发生错误，则函数将返回一个错误代码和错误信息。&lt;/p&gt;
&lt;h2 id=&#34;3138-storagego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3138-storagego&#34;&gt;#&lt;/a&gt; [31/38] storage.go&lt;/h2&gt;
&lt;p&gt;本文件为 api 模块中的一个程序文件，文件名为  &lt;code&gt;storage.go&lt;/code&gt; ，主要包含了一组存储相关的函数方法。&lt;/p&gt;
&lt;p&gt;其中包括获取最近文档、删除标准、设置标准、获取标准、删除本地存储值、设置本地存储值、设置本地存储、获取本地存储等方法。这些方法主要是通过调用 model 模块中的相关函数，来实现对存储的操作。&lt;/p&gt;
&lt;p&gt;同时，也使用了一些第三方模块和工具函数，如 gin、gulu 和 util 等。最后，返回给调用者的数据都是通过 JSON 格式的数据结构来实现的。&lt;/p&gt;
&lt;h2 id=&#34;3238-syncgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3238-syncgo&#34;&gt;#&lt;/a&gt; [32/38] sync.go&lt;/h2&gt;
&lt;p&gt;该程序是 Go 语言编写的一个用于支持云同步功能的 API 程序文件，文件名为  &lt;code&gt;sync.go&lt;/code&gt; ，属于 api 包，主要实现了以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询是否已经进行启动同步（getBootSync）&lt;/li&gt;
&lt;li&gt;执行同步（performSync）&lt;/li&gt;
&lt;li&gt;执行启动同步（performBootSync）&lt;/li&gt;
&lt;li&gt;列出云同步目录（listCloudSyncDir）&lt;/li&gt;
&lt;li&gt;移除云同步目录（removeCloudSyncDir）&lt;/li&gt;
&lt;li&gt;创建云同步目录（createCloudSyncDir）&lt;/li&gt;
&lt;li&gt;设置同步生成冲突文档（setSyncGenerateConflictDoc）&lt;/li&gt;
&lt;li&gt;设置同步启用（setSyncEnable）&lt;/li&gt;
&lt;li&gt;设置同步模式（setSyncMode）&lt;/li&gt;
&lt;li&gt;设置同步提供者（setSyncProvider）&lt;/li&gt;
&lt;li&gt;设置同步提供者为 S3（setSyncProviderS3）&amp;lt;br /&amp;gt;&lt;/li&gt;
&lt;li&gt;设置同步提供者为 WebDAV（setSyncProviderWebDAV）&lt;/li&gt;
&lt;li&gt;设置云同步目录（setCloudSyncDir）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3338-systemgo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3338-systemgo&#34;&gt;#&lt;/a&gt; [33/38] system.go&lt;/h2&gt;
&lt;p&gt;该程序文件实现了 SiYuan 笔记系统的 API 功能。程序文件共包含多个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getEmojiConf 函数：获取表情包配置信息。&lt;/li&gt;
&lt;li&gt;checkUpdate 函数：检查系统更新。&lt;/li&gt;
&lt;li&gt;exportLog 函数：导出系统日志。&lt;/li&gt;
&lt;li&gt;getConf 函数：获取系统配置信息。&lt;/li&gt;
&lt;li&gt;setUILayout 函数：设置 UI 布局。&lt;/li&gt;
&lt;li&gt;setAccessAuthCode 函数：设置访问权限代码。&lt;/li&gt;
&lt;li&gt;getSysFonts 函数：获取系统字体。&lt;/li&gt;
&lt;li&gt;version 函数：获取系统版本。&lt;/li&gt;
&lt;li&gt;currentTime 函数：获取当前时间戳。&lt;/li&gt;
&lt;li&gt;bootProgress 函数：获取系统启动进程。&lt;/li&gt;
&lt;li&gt;setAppearanceMode 函数：设置系统外观模式。&lt;/li&gt;
&lt;li&gt;setNetworkServe 函数：设置网络服务。&lt;/li&gt;
&lt;li&gt;setGoogleAnalytics 函数：设置谷歌分析。&lt;/li&gt;
&lt;li&gt;setUploadErrLog 函数：设置上传错误日志。&lt;/li&gt;
&lt;li&gt;setAutoLaunch 函数：设置自动启动。&lt;/li&gt;
&lt;li&gt;setDownloadInstallPkg 函数：设置是否下载安装包。&lt;/li&gt;
&lt;li&gt;setNetworkProxy 函数：设置网络代理。&lt;/li&gt;
&lt;li&gt;addUIProcess 函数：添加 UI 进程。&lt;/li&gt;
&lt;li&gt;exit 函数：退出系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数实现了系统的一些基本功能，例如获取配置信息、修改系统设置、检查系统更新、导出系统日志、退出系统等。&lt;/p&gt;
&lt;h2 id=&#34;3438-taggo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3438-taggo&#34;&gt;#&lt;/a&gt; [34/38] tag.go&lt;/h2&gt;
&lt;p&gt;该程序文件名为  &lt;code&gt;tag.go&lt;/code&gt; ，位于 api 目录下。程序使用了 Go 语言编写，实现了一些关于标签的 API 接口。&lt;/p&gt;
&lt;p&gt;其中，getTag 函数用于获取所有标签；renameTag 函数用于重命名标签；removeTag 函数用于删除标签。&lt;/p&gt;
&lt;p&gt;程序引用了其他的库，如 gin、gulu、model、util 等。该程序还使用了 GNU Affero General Public License 开源协议。&lt;/p&gt;
&lt;h2 id=&#34;3538-templatego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3538-templatego&#34;&gt;#&lt;/a&gt; [35/38] template.go&lt;/h2&gt;
&lt;p&gt;这是一个 Go 语言编写的 API 函数文件，文件名为  &lt;code&gt;template.go&lt;/code&gt; ，位于 api 目录下。该文件中包含 3 个处理 HTTP 请求的函数：renderSprig、docSaveAsTemplate 和 renderTemplate。&lt;/p&gt;
&lt;p&gt;renderSprig 函数通过接受一个请求，用给定的模板参数进行渲染，最终将渲染结果作为返回值传递到请求的响应中。&lt;/p&gt;
&lt;p&gt;docSaveAsTemplate 函数接受一个请求，将给定的文档 ID 的内容保存成模板。&lt;/p&gt;
&lt;p&gt;renderTemplate 函数接受一个请求，渲染给定的模板，最终将渲染结果作为响应发送给请求端。其中，请求会传送两个参数：path 和 id，分别为模板路径和对应文档的 ID。&lt;/p&gt;
&lt;p&gt;这些函数对不同的 HTTP 请求提供了不同的处理方式，可以供不同的客户端或应用程序使用。&lt;/p&gt;
&lt;h2 id=&#34;3638-transactiongo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3638-transactiongo&#34;&gt;#&lt;/a&gt; [36/38] transaction.go&lt;/h2&gt;
&lt;p&gt;该文件是一个 Go 语言编写的 API 模块，包含了一系列函数用于处理交易请求。该模块在接收到 HTTP 请求后，解析请求的 JSON 数据，将其转换成事务对象，并将该事务的状态与数据提供给 kernel 中的其他函数进行处理，最后将结果以 JSON 格式返回给客户端。其中函数 performTransactions 处理交易请求，函数 pushTransactions 用于将交易结果推送到客户端。&lt;/p&gt;
&lt;h2 id=&#34;3738-workspacego&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3738-workspacego&#34;&gt;#&lt;/a&gt; [37/38] workspace.go&lt;/h2&gt;
&lt;p&gt;该文件是 SiYuan 组件的一部分，主要实现工作空间相关的 API 功能。程序通过框架 Gin 来提供 Web 服务，提供以下几个 API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/api/workspace/createWorkspaceDir&lt;/code&gt; ：用于创建工作空间文件夹；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/workspace/removeWorkspaceDir&lt;/code&gt; ：用于删除已有的工作空间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/workspace/getMobileWorkspaces&lt;/code&gt; ：用于获取移动设备上的工作空间列表；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/workspace/getWorkspaces&lt;/code&gt; ：用于获取所有工作空间列表信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/workspace/setWorkspaceDir&lt;/code&gt; ：用于切换工作空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，还定义了一个  &lt;code&gt;Workspace&lt;/code&gt;  结构体，主要用于展示工作空间信息。在实现各个 API 功能的过程中，还需要使用到其他模块提供的函数，例如： &lt;code&gt;util.ReadWorkspacePaths()&lt;/code&gt;  读取工作空间路径列表等。&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="源码解析" scheme="https://blog.aayu.today/categories/skill/code-analysis/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/categories/skill/code-analysis/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-04-01T14:06:19.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/skill/tools/20230329/</id>
        <title>如何用New Bing进行辅助科研</title>
        <link rel="alternate" href="https://blog.aayu.today/skill/tools/20230329/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;多说无益，直接上图&lt;/p&gt;
&lt;h2 id=&#34;技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧&#34;&gt;#&lt;/a&gt; 技巧&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292102800.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292102843.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292102842.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292102850.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292103596.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292103856.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292104293.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292104472.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292104688.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我是真的被震撼到了，这篇论文中我之前一直有一个点没搞懂，就是如何判断敲击事件的发生的，woc 今天让 new bing 去读，能给我详细的解释清论文的原理，还能给我写出示例代码 😱&lt;/p&gt;
&lt;p&gt;就给人一种感觉就是，有一个导师能给你详细的讲解论文。最后还尝试了下 new bing 能不能读公式，依旧牛逼，虽然公式找错了，但它是真能读懂公式啊&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/29/202303292105534.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后想感慨就是，限制 new bing 或 chatgpt 的已经不是模型能力问题了，而是我的想象力和提问方式 😑&lt;/p&gt;
</content>
        <category term="不看会后悔的实用技巧分享" scheme="https://blog.aayu.today/categories/skill/" />
        <category term="工具篇" scheme="https://blog.aayu.today/categories/skill/tools/" />
        <category term="New Bing" scheme="https://blog.aayu.today/tags/New-Bing/" />
        <updated>2023-03-29T13:00:51.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/nas/zspace/20230311/</id>
        <title>Docker版思源笔记加ChatGPT的超强搭配使用~</title>
        <link rel="alternate" href="https://blog.aayu.today/nas/zspace/20230311/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;前几天捣鼓了&lt;a href=&#34;https://blog.aayu.today/nas/zspace/20230224/&#34;&gt;自助编译极空间 Z4 思源笔记（siyuan）Docker 项目&lt;/a&gt;，思源笔记的开发者 D 大和 V 姐更新真的是太频繁了，几乎每周都会有新的功能和特性，最让我感动的是我凌晨去 GitHub 的 Issues 上给他们提了些&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NpeXVhbi1ub3RlL3NpeXVhbi9pc3N1ZXMvNzYxNQ==&#34;&gt;改进意见&lt;/span&gt;，结果当天就把功能完善了，所以真的很想让我吹一波🤣&lt;/p&gt;
&lt;p&gt;最新版本的思源笔记已经更新到&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NpeXVhbi1ub3RlL3NpeXVhbi9yZWxlYXNlcy90YWcvdjIuNy45&#34;&gt; v2.7.9&lt;/span&gt; 了，在该版本中完善了 &lt;code&gt;针对内容块的人工智能辅助支持&lt;/code&gt; ，对，就是可以在思源笔记里使用 OpenAI 的 Chat API 对笔记内容：&lt;/p&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_0&#34;&gt; 续写&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_1&#34;&gt; 翻译&lt;/label&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_2&#34;&gt; 中文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_3&#34;&gt; 日文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_4&#34;&gt; 韩文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_5&#34;&gt; 英文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_6&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_6&#34;&gt; 西班牙文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_7&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_7&#34;&gt; 法文&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_8&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_8&#34;&gt; 德文&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_9&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_9&#34;&gt; 提取摘要&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_10&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_10&#34;&gt; 头脑风暴&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_11&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_11&#34;&gt; 修正语法和拼写&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_12&#34; checked=&#34;true&#34; disabled=&#34;true&#34; /&gt;&lt;label for=&#34;cbx_12&#34;&gt; 自定义操作...&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;有了这些功能后，我觉得思源笔记已经很适合进行学术论文的归纳和整理了，真的是未来可期啊～&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用&#34;&gt;#&lt;/a&gt; 使用&lt;/h2&gt;
&lt;p&gt;我也紧跟思源笔记官方的脚步，从 v2.7.6 开始每个发行版本我都会把它编译成适配于极空间 Z4 的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yZXBvc2l0b3J5L2RvY2tlci95bHNpc2xvdmUvc2l5dWFu&#34;&gt; Docker 镜像&lt;/span&gt;，所以如果有小伙伴也用的是极空间 Z4，就可以用我编译好的镜像去尝试一下啦～&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;其他的部署环境可以直接用思源笔记官方的 Docker 镜像就行：b3log/siyuan:latest&lt;br /&gt;
 本人编译的镜像只适合极空间 Z4 设备哦&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;拉取最新的 v2.7.9 镜像版本，容器配置如下&lt;/p&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111602935.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111603901.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111603755.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111604932.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111604137.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111608817.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;国内使用 openai api key 是需要点手段的，可以通过配置 &lt;code&gt;SIYUAN_OPENAI_API_BASE_URL&lt;/code&gt;  或 &lt;code&gt;SIYUAN_OPENAI_API_PROXY&lt;/code&gt;  环境变量来解决，这两个环境变量使用一个就行，不然多层代理后网络响应时间会变长。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIYUAN_OPENAI_API_BASE_URL：默认值为 &lt;code&gt;https://api.openai.com/v1&lt;/code&gt; ，可以配置成 &lt;code&gt;https://你的代理域名/v1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SIYUAN_OPENAI_API_PROXY：如果自己会挂代理，就可以配置成诸如 &lt;code&gt;socks5://127.0.0.1:10808&lt;/code&gt;  的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;以上配置好后，应用容器即可开始愉快的玩耍啦～&lt;/p&gt;
&lt;h2 id=&#34;体验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#体验&#34;&gt;#&lt;/a&gt; 体验&lt;/h2&gt;
&lt;h3 id=&#34;续写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#续写&#34;&gt;#&lt;/a&gt; 续写&lt;/h3&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111623782.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111624662.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;翻译和提取摘要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#翻译和提取摘要&#34;&gt;#&lt;/a&gt; 翻译和提取摘要&lt;/h3&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111632566.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111634737.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;头脑风暴&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#头脑风暴&#34;&gt;#&lt;/a&gt; 头脑风暴&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111636897.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;修正语法和拼写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修正语法和拼写&#34;&gt;#&lt;/a&gt; 修正语法和拼写&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111643940.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义操作&#34;&gt;#&lt;/a&gt; 自定义操作&lt;/h3&gt;
&lt;p class=&#34;gallery&#34; data-height=&#34;240&#34;&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111644804.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/11/202303111645273.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;未来可期～&lt;/p&gt;
</content>
        <category term="我的NAS捣鼓笔记" scheme="https://blog.aayu.today/categories/nas/" />
        <category term="极空间" scheme="https://blog.aayu.today/categories/nas/%E6%9E%81%E7%A9%BA%E9%97%B4/" />
        <category term="NAS" scheme="https://blog.aayu.today/tags/NAS/" />
        <category term="极空间" scheme="https://blog.aayu.today/tags/%E6%9E%81%E7%A9%BA%E9%97%B4/" />
        <category term="思源笔记" scheme="https://blog.aayu.today/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/" />
        <updated>2023-03-11T08:16:27.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.aayu.today/artificial-intelligence/basic/20230208/</id>
        <title>Win11基于WSL2安装CUDA、cuDNN和TensorRT</title>
        <link rel="alternate" href="https://blog.aayu.today/artificial-intelligence/basic/20230208/"/>
        <content type="html">&lt;h2 id=&#34;2023-03-06-更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-03-06-更新&#34;&gt;#&lt;/a&gt; 2023-03-06 更新&lt;/h2&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;如果有小伙伴看了 2023-03-05 更新，发现设置环境变量后运行 cuda 代码在链接过程中仍然会有报错问题啥的，那我这里建议，先别管 2023-03-05 更新的内容了，还是按照我博客里的安装步骤一步一步往下安装，用 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令去安装 nvcc，也不需要配置环境变量了。因为博客里的安装步骤是我亲自执行过的，在我的 WSL2 环境里是一点问题都没有。&lt;/p&gt;
&lt;p&gt;如果跟着我的博客步骤走，发现在测试 &lt;code&gt;./mnistCUDNN&lt;/code&gt;  时有问题，那就再根据我 2023-03-05 更新的内容尝试一下。不过这里我觉得可以先别卸载 &lt;code&gt;nvidia-cuda-toolkit&lt;/code&gt; ，先去配置环境变量，然后跑代码看有没有问题，没有问题的话那就最好啦，如果还有问题，那就卸载 &lt;code&gt;nvidia-cuda-toolkit&lt;/code&gt; ，配置好环境变量，再重启下，然后再跑下代码看看～&lt;/p&gt;
&lt;p&gt;目前根据小伙伴的反映，就先记录到这里吧，后面有新情况也会继续更新的～&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;2023-03-05-更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2023-03-05-更新&#34;&gt;#&lt;/a&gt; 2023-03-05 更新&lt;/h2&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;有小伙伴反映，按照 NVIDIA 官网命令安装完 CUDA 后，nvcc 实际上也是被成功安装啦，且 nvcc 的版本和我们选择 CUDA 的版本是保持一致的。但如果再运行 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令，就会导致 nvcc 的版本被覆盖为低版本。&lt;/p&gt;
&lt;p&gt;比如，我们选择 CUDA 的版本是 11.8，那安装完 CUDA 后，我们是可以在 &lt;code&gt;/usr/local/cuda/bin&lt;/code&gt;  目录下找到 nvcc 可执行文件的，在那个目录下运行 &lt;code&gt;./nvcc -V&lt;/code&gt;  就可以看到版本和 CUDA 保持一致，也是 11.8。所以实际上我们 &lt;code&gt;不需要&lt;/code&gt; 再运行 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令安装 nvcc 啦，只需要再安装完 CUDA 后，配置下环境变量即可，如下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;CPATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/local/cuda-11.8/include:&lt;span class=&#34;token variable&#34;&gt;$CPATH&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/local/cuda-11.8/lib64:&lt;span class=&#34;token variable&#34;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/local/cuda-11.8/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;CUDA_ROOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;/usr/local/cuda-11.8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当然，如果你运行了 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令，从我博客里记录的图片可以看到 nvcc 的版本被覆盖为 10.1 啦，在我的 WSL2 环境里，10.1 的 nvcc 版本并没有什么问题，后面用 &lt;code&gt;./mnistCUDNN&lt;/code&gt;  测试也是成功哒～&lt;/p&gt;
&lt;p&gt;但小伙伴测试说会报 &lt;code&gt;CUDA driver version is insufficient for CUDA runtime version&lt;/code&gt;  版本不匹配的错误，所以后面的小伙伴可以参考下，先不要运行 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令，直接根据 NVIDIA 官网安装完 CUDA，然后配置下环境变量即可～&lt;/p&gt;
&lt;p&gt;如果已经用 &lt;code&gt;sudo apt install nvidia-cuda-toolkit&lt;/code&gt;  命令安装完了，测试也真报错了，就卸载掉 nvidia-cuda-toolkit，然后再配置下环境变量，再测试下看看吧～&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前我写了一篇博客：&lt;a href=&#34;https://blog.aayu.today/artificial-intelligence/basic/20221217/&#34;&gt;Win11 安装 WSL2 和 Nvidia 驱动&lt;/a&gt;，记录了在 WSL2 里安装 CUDA，当时我选择了第二种安装方式，即用 WSL2 里的 MiniConda 去安装的 PyTorch 和 CUDA 等相关库，最近在使用中发现了这种方式的不足，即使用 &lt;code&gt;cuda&lt;/code&gt;  和 &lt;code&gt;nvcc&lt;/code&gt;  等命令时都要切换到 conda 相关环境下才能使用。比如我之前在 &lt;code&gt;py38&lt;/code&gt;  环境下安装的，当我进入终端处于 &lt;code&gt;base&lt;/code&gt;  环境下，nvcc 命令是不能使用哒&lt;/p&gt;
&lt;p&gt;最近也在跟着恩培老师学 TensorRT，担忧用 MiniConda 安装的 CUDA 等库可能导致 TensorRT 安装失败，所以这次就试试直接在 &lt;code&gt;base&lt;/code&gt;  环境下用上一篇博客的第一种方式安装 &lt;code&gt;cuda&lt;/code&gt; 、 &lt;code&gt;cudnn&lt;/code&gt;  和 &lt;code&gt;tensorrt&lt;/code&gt;  吧～&lt;/p&gt;
&lt;p&gt;结果也是很顺利的安装成功啦，便在此记录下来哈哈～&lt;/p&gt;
&lt;h2 id=&#34;tensorrt介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tensorrt介绍&#34;&gt;#&lt;/a&gt; TensorRT 介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NVIDIA® TensorRT™是一个用于高性能深度学习的推理框架，能够在 NVIDIA GPU 上实现低延迟、高吞吐量的部署&lt;/li&gt;
&lt;li&gt;TensorRT 包含用于训练好的模型的优化器，以及用于执行推理的 runtime&lt;/li&gt;
&lt;li&gt;它可以与 TensorFlow、PyTorch 和 MXNet 等训练框架相辅相成地工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境配置&#34;&gt;#&lt;/a&gt; 环境配置&lt;/h2&gt;
&lt;h3 id=&#34;cuda-driver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cuda-driver&#34;&gt;#&lt;/a&gt; CUDA Driver&lt;/h3&gt;
&lt;p&gt;使用 CUDA 前，要求 GPU 驱动与 &lt;code&gt;cuda&lt;/code&gt;  的版本要匹配，匹配关系如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vY3VkYS9jdWRhLXRvb2xraXQtcmVsZWFzZS1ub3Rlcy9pbmRleC5odG1sI2N1ZGEtbWFqb3ItY29tcG9uZW50LXZlcnNpb25zX190YWJsZS1jdWRhLXRvb2xraXQtZHJpdmVyLXZlcnNpb25z&#34;&gt;https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#cuda-major-component-versions__table-cuda-toolkit-driver-versions&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012238954.png&#34; alt=&#34;&#34; width=&#34;800px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安装可以参考我之前的 WSL2 博客吖：&lt;a href=&#34;https://blog.aayu.today/artificial-intelligence/basic/20221217/&#34;&gt;Win11 安装 WSL2 和 Nvidia 驱动&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;检查安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查安装&#34;&gt;#&lt;/a&gt; 检查安装&lt;/h4&gt;
&lt;p&gt;输入 &lt;code&gt;nvidia-smi&lt;/code&gt;  命令，查看 GPU 驱动版本&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; aayu@AayuComputer-Pro:~$ nvidia-smi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Tue Feb &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt; 00:58:02 &lt;span class=&#34;token number&#34;&gt;2023&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-----------------------------------------------------------------------------+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; NVIDIA-SMI &lt;span class=&#34;token number&#34;&gt;525.65&lt;/span&gt;       Driver Version: &lt;span class=&#34;token number&#34;&gt;527.56&lt;/span&gt;       CUDA Version: &lt;span class=&#34;token number&#34;&gt;12.0&lt;/span&gt;     &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;-------------------------------+----------------------+----------------------+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; GPU  Name        Persistence-M&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; Bus-Id        Disp.A &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; Volatile Uncorr. ECC &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; Fan  Temp  Perf  Pwr:Usage/Cap&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;         Memory-Usage &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; GPU-Util  Compute M. &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                               &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                      &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;               MIG M. &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;  NVIDIA GeForce &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.  On   &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; 00000000:01:00.0  On &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                  N/A &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; N/A   40C    P8    13W / 139W &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;   1668MiB /  6144MiB &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;      &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;%      Default &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                               &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                      &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;                  N/A &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-------------------------------+----------------------+----------------------+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-----------------------------------------------------------------------------+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; Processes:                                                                  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;  GPU   GI   CI        PID   Type   Process name                  GPU Memory &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;        ID   ID                                                   Usage      &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;   N/A  N/A        &lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;      G   /Xwayland                       N/A      &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+-----------------------------------------------------------------------------+&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到当前安装的驱动版本是 &lt;code&gt;527.56&lt;/code&gt; ，后面的 &lt;code&gt;CUDA Version: 12.0&lt;/code&gt;  是指当前驱动支持的最高 CUDA 版本～&lt;/p&gt;
&lt;h3 id=&#34;安装cuda&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装cuda&#34;&gt;#&lt;/a&gt; 安装 CUDA&lt;/h3&gt;
&lt;p&gt;在 Nvidia 官网选择对应版本：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLXRvb2xraXQtYXJjaGl2ZQ==&#34;&gt;https://developer.nvidia.com/cuda-toolkit-archive&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012249965.png&#34; alt=&#34;&#34; width=&#34;800px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比如我选择的是 &lt;code&gt;11.8&lt;/code&gt;  版本，选择 &lt;code&gt;Linux&lt;/code&gt; ， &lt;code&gt;x86_64&lt;/code&gt; ， &lt;code&gt;WSL-Ubuntu&lt;/code&gt; ， &lt;code&gt;2.0&lt;/code&gt; ， &lt;code&gt;deb(local)&lt;/code&gt; ，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012249980.png&#34; alt=&#34;&#34; width=&#34;800px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安装命令已经给出啦，如下，直接在 WSL2 终端执行就好～&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; dpkg -i cuda-repo-wsl-ubuntu-11-8-local_11.8.0-1_amd64.deb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; /var/cuda-repo-wsl-ubuntu-11-8-local/cuda-*-keyring.gpg /usr/share/keyrings/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; -y &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; cuda&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;成功安装如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012250963.png&#34; alt=&#34;&#34; width=&#34;800px&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装nvcc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装nvcc&#34;&gt;#&lt;/a&gt; 安装 nvcc&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; nvidia-cuda-toolkit&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装完后重启电脑，检查安装结果，成功如下图～&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012251060.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装cudnn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装cudnn&#34;&gt;#&lt;/a&gt; 安装 cuDNN&lt;/h3&gt;
&lt;p&gt;下载安装包：访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS96aC1jbi9jdWRubiVFRiVCQyU4QyVFOSU4MCU4OSVFNiU4QiVBOSVFNSVBRiVCOSVFNSVCQSU5NCVFNyU5QSU4NCVFNyU4OSU4OCVFNiU5QyVBQyVFRiVCQyU4QyVFNCVCOCU4QiVFOCVCRCVCRCVFNSVBRiVCOSVFNSVCQSU5NCVFNyU5QSU4NCVFNSVBRSU4OSVFOCVBMyU4NSVFNSU4QyU4NSVFRiVCQyU4OCVFNSVCQiVCQSVFOCVBRSVBRSVFNCVCRCVCRiVFNyU5NCVBOERlYmlhbiVFNSU4QyU4NSVFNSVBRSU4OSVFOCVBMyU4NSVFRiVCQyU4OQ==&#34;&gt;https://developer.nvidia.com/zh-cn/cudnn，选择对应的版本，下载对应的安装包（建议使用 Debian 包安装）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012252029.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比如我下载的是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9kb3dubG9hZHMvYzExOC1jdWRubi1sb2NhbC1yZXBvLXVidW50dTIwMDQtODcwODQxMC0xYW1kNjRkZWI=&#34;&gt;Local Installer for Ubuntu20.04 x86_64 (Deb)&lt;/span&gt;，下载后的文件名为 &lt;code&gt;cudnn-local-repo-ubuntu2004-8.7.0.84_1.0-1_amd64.deb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZGVlcGxlYXJuaW5nL2N1ZG5uL2luc3RhbGwtZ3VpZGUvaW5kZXguaHRtbA==&#34;&gt;https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 注意，运行下面的命令前，将下面的 X.Y 和 v8.x.x.x 替换成自己具体的 CUDA 和 cuDNN 版本，如我的 CUDA 版本是 11.8，cuDNN 版本是 8.7.0.84&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Enable the local repository.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; dpkg -i cudnn-local-repo-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;OS&amp;#125;&lt;/span&gt;-8.x.x.x_1.0-1_amd64.deb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo dpkg -i cudnn-local-repo-ubuntu2004-8.7.0.84_1.0-1_amd64.deb&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Import the CUDA GPG key.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; /var/cudnn-local-repo-*/cudnn-local-*-keyring.gpg /usr/share/keyrings/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Refresh the repository metadata.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Install the runtime library.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;libcudnn8&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;.x.x.x-1+cudaX.Y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo apt-get install libcudnn8=8.7.0.84-1+cuda11.8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Install the developer library.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libcudnn8-dev&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;.x.x.x-1+cudaX.Y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo apt-get install libcudnn8-dev=8.7.0.84-1+cuda11.8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Install the code samples and the cuDNN library documentation.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libcudnn8-samples&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;.x.x.x-1+cudaX.Y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo apt-get install libcudnn8-samples=8.7.0.84-1+cuda11.8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证&#34;&gt;#&lt;/a&gt; 验证&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 复制文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; -r /usr/src/cudnn_samples_v8/ &lt;span class=&#34;token environment constant&#34;&gt;$HOME&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt;  &lt;span class=&#34;token environment constant&#34;&gt;$HOME&lt;/span&gt;/cudnn_samples_v8/mnistCUDNN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;make&lt;/span&gt; clean &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;make&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./mnistCUDNN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;可能报错：test.c:1:10: fatal error: FreeImage.h: No such file or directory&lt;/p&gt;
&lt;p&gt;解决办法：sudo apt-get install libfreeimage3 libfreeimage-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;成功验证如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012253057.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装tensorrt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装tensorrt&#34;&gt;#&lt;/a&gt; 安装 TensorRT&lt;/h3&gt;
&lt;p&gt;访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9udmlkaWEtdGVuc29ycnQtOHgtZG93bmxvYWQ=&#34;&gt;https://developer.nvidia.com/nvidia-tensorrt-8x-download&lt;/span&gt; 下载对应版本的 TensorRT&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012254209.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比如我选择的是 8.5.3 版本，下载完文件名为： &lt;code&gt;nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-2&#34;&gt;#&lt;/a&gt; 安装&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;参考地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vZGVlcGxlYXJuaW5nL3RlbnNvcnJ0L2luc3RhbGwtZ3VpZGUvaW5kZXguaHRtbCNpbnN0YWxsaW5nLWRlYmlhbg==&#34;&gt;https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing-debian&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 替换成自己的 OS 和版本信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ubuntuxx04&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;8.x.x-cuda-x.x&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; dpkg -i nv-tensorrt-local-repo-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;os&amp;#125;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;tag&amp;#125;&lt;/span&gt;_1.0-1_amd64.deb&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo dpkg -i nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt; /var/nv-tensorrt-local-repo-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;os&amp;#125;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;tag&amp;#125;&lt;/span&gt;/*-keyring.gpg /usr/share/keyrings/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 我的：sudo cp /var/nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8/*-keyring.gpg/usr/share/keyrings/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; tensorrt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;验证-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验证-2&#34;&gt;#&lt;/a&gt; 验证&lt;/h4&gt;
&lt;p&gt;输入 &lt;code&gt;dpkg -l | grep TensorRT&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; aayu@HPSCIL:~/tensorrt_install$ dpkg -l &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; TensorRT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer-bin                                    &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT binaries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer-dev                                    &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT development libraries and headers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer-plugin-dev                             &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT plugin libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer-plugin8                                &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT plugin libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer-samples                                &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  all          TensorRT samples&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvinfer8                                       &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT runtime libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvonnxparsers-dev                              &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT ONNX libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvonnxparsers8                                 &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT ONNX libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvparsers-dev                                  &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT parsers libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  libnvparsers8                                     &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3-1+cuda11.8                  amd64        TensorRT parsers libraries&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ii  tensorrt                                          &lt;span class=&#34;token number&#34;&gt;8.5&lt;/span&gt;.3.1-1+cuda11.8                amd64        Meta package &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; TensorRT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;如果遇到 &lt;code&gt;unmet dependencies&lt;/code&gt;  的问题，一般是 cuda cudnn 没有安装好。TensorRT 的 &lt;code&gt;INCLUDE&lt;/code&gt;  路径是  &lt;code&gt;/usr/include/x86_64-linux-gnu/&lt;/code&gt; ,  &lt;code&gt;LIB&lt;/code&gt;  路径是 &lt;code&gt;/usr/lib/x86_64-linux-gnu/&lt;/code&gt; ,Sample code 在 &lt;code&gt;/usr/src/tensorrt/samples&lt;/code&gt; ,  &lt;code&gt;trtexec&lt;/code&gt;  在 &lt;code&gt;/usr/src/tensorrt/bin&lt;/code&gt;  下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://image.aayu.today/uploads/2023/03/01/202303012254945.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="人工智能" scheme="https://blog.aayu.today/categories/artificial-intelligence/" />
        <category term="基础知识" scheme="https://blog.aayu.today/categories/artificial-intelligence/basic/" />
        <category term="win11" scheme="https://blog.aayu.today/tags/win11/" />
        <category term="wsl" scheme="https://blog.aayu.today/tags/wsl/" />
        <category term="nvidia" scheme="https://blog.aayu.today/tags/nvidia/" />
        <category term="cuda" scheme="https://blog.aayu.today/tags/cuda/" />
        <category term="cudnn" scheme="https://blog.aayu.today/tags/cudnn/" />
        <category term="tensorrt" scheme="https://blog.aayu.today/tags/tensorrt/" />
        <updated>2023-02-28T13:22:51.000Z</updated>
    </entry>
</feed>
